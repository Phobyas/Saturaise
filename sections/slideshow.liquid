{% comment %} Bulletproof Responsive Slideshow {% endcomment %}
<link rel="preload" href="{{ 'section-slideshow.css' | asset_url }}" as="style">
<link rel="stylesheet" href="{{ 'section-slideshow.css' | asset_url }}">

{%- liquid
  assign section_padding = ''
  if section.settings.section_padding == 'top'
    assign section_padding = 'pb0'
  elsif section.settings.section_padding == 'bottom'
    assign section_padding = 'mt0'
  elsif section.settings.section_padding == 'none'
    assign section_padding = 'mt0 pb0'
  endif

  if section.settings.enable_autoplay
    assign slider_speed = section.settings.slider_speed | times: 1000
  else
    assign slider_speed = false
  endif

  assign caption_below = false
  if section.settings.caption_below
    assign caption_below = true
  endif
-%}

<style>
  #shopify-section-{{ section.id }} {
    --font-size: {{ section.settings.subheading_size }}px;
    --h2-size: {{ section.settings.slide_heading_size }}px;
  }

  /* Container with responsive max-width */
  .slideshow-{{ section.id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    max-width: 1280px;
    margin-left: auto;
    margin-right: auto;
  }
  
  /* Use 1600px max-width when viewport is at least 1920px */
  @media (min-width: 1920px) {
    .slideshow-{{ section.id }} {
      max-width: 1600px;
    }
  }

  /* Slides wrapper */
  .slideshow-{{ section.id }} .slides-wrapper {
    position: relative;
    width: 100%;
  }

  /* Individual slides */
  .slideshow-{{ section.id }} .slide {
    position: relative;
    width: 100%;
    display: none;
  }

  /* First slide visible */
  .slideshow-{{ section.id }} .slide:first-child {
    display: block;
  }

  /* Fade animation */
  .slideshow-{{ section.id }}.fade-enabled .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    opacity: 0;
    display: block;
    transition: opacity 0.6s ease-in-out;
  }

  .slideshow-{{ section.id }}.fade-enabled .slide.active {
    opacity: 1;
    z-index: 2;
  }

  /* Image wrapper */
  .slideshow-{{ section.id }} .slide-image {
    position: relative;
    width: 100%;
    line-height: 0;
  }

  /* Images */
  .slideshow-{{ section.id }} .slide-image img {
    width: 100%;
    height: auto;
    display: block;
  }

  /* Caption */
  .slideshow-{{ section.id }} .slide-caption {
    position: absolute;
    z-index: 3;
    max-width: 90%;
  }

  .slideshow-{{ section.id }} .caption-content {
    padding: 30px;
    background: var(--background);
    border-radius: 8px;
  }

  .slideshow-{{ section.id }} .slide-title {
    color: var(--text-color);
    font-size: var(--h2-size);
    margin: 0 0 15px;
    line-height: 1.2;
  }

  .slideshow-{{ section.id }} .slide-text {
    color: var(--text-color);
    font-size: var(--font-size);
    margin: 0 0 20px;
  }

  .slideshow-{{ section.id }} .slide-text p {
    color: inherit;
    margin: 0 0 10px;
  }

  .slideshow-{{ section.id }} .slide-text p:last-child {
    margin-bottom: 0;
  }

  .slideshow-{{ section.id }} .slide-buttons {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
  }

  .slideshow-{{ section.id }} .btn-border-link {
    display: inline-block;
    padding: 12px 30px;
    border: 2px solid var(--text-color);
    color: var(--text-color);
    text-decoration: none;
    transition: all 0.3s ease;
    font-size: 16px;
  }

  .slideshow-{{ section.id }} .btn-border-link:hover {
    background: var(--text-color);
    color: var(--background);
  }

  /* Navigation arrows */
  .slideshow-{{ section.id }} .nav-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 44px;
    height: 44px;
    border-radius: 50%;
    cursor: pointer;
    z-index: 4;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.3s;
  }

  .slideshow-{{ section.id }} .nav-arrow:hover {
    opacity: 0.8;
  }

  .slideshow-{{ section.id }} .nav-arrow.prev {
    left: 20px;
  }

  .slideshow-{{ section.id }} .nav-arrow.next {
    right: 20px;
  }

  .slideshow-{{ section.id }} .nav-arrow svg {
    width: 20px;
    height: 20px;
  }

  /* Dots navigation */
  .slideshow-{{ section.id }} .nav-dots {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 4;
    display: flex;
    gap: 10px;
  }

  .slideshow-{{ section.id }} .nav-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    border: none;
    cursor: pointer;
    transition: background 0.3s;
    padding: 0;
  }

  .slideshow-{{ section.id }} .nav-dot.active {
    background: white;
  }

  /* Drag functionality styles */
  .slideshow-{{ section.id }} .slides-wrapper {
    cursor: grab;
    user-select: none;
  }
  
  .slideshow-{{ section.id }} .slides-wrapper.dragging {
    cursor: grabbing;
  }
  
  .slideshow-{{ section.id }}.dragging a,
  .slideshow-{{ section.id }}.dragging button {
    pointer-events: none;
  }

  /* Mobile adjustments */
  @media (max-width: 767px) {
    #shopify-section-{{ section.id }} {
      --font-size: calc({{ section.settings.subheading_size }}px * 0.85);
      --h2-size: calc({{ section.settings.slide_heading_size }}px * 0.85);
    }

    .slideshow-{{ section.id }} .caption-content {
      padding: 20px;
    }

    .slideshow-{{ section.id }} .nav-arrow {
      width: 36px;
      height: 36px;
    }

    .slideshow-{{ section.id }} .nav-arrow.prev {
      left: 10px;
    }

    .slideshow-{{ section.id }} .nav-arrow.next {
      right: 10px;
    }

    {% if caption_below %}
      .slideshow-{{ section.id }} .slide-caption {
        position: static !important;
        transform: none !important;
        max-width: 100% !important;
        width: 100% !important;
      }

      .slideshow-{{ section.id }} .caption-content {
        background: var(--color-body);
        border-radius: 0;
        text-align: center;
      }

      .slideshow-{{ section.id }} .slide-title,
      .slideshow-{{ section.id }} .slide-text {
        color: var(--color-body-text);
      }

      .slideshow-{{ section.id }} .btn-border-link {
        color: var(--color-body-text);
        border-color: var(--color-body-text);
      }
    {% endif %}
  }

  /* Text alignment */
  .slideshow-{{ section.id }} .caption-content.text-center {
    text-align: center;
  }

  .slideshow-{{ section.id }} .caption-content.text-left {
    text-align: left;
  }

  .slideshow-{{ section.id }} .caption-content.text-right {
    text-align: right;
  }

  .slideshow-{{ section.id }} .caption-content.text-center .slide-buttons {
    justify-content: center;
  }

  .slideshow-{{ section.id }} .caption-content.text-right .slide-buttons {
    justify-content: flex-end;
  }
</style>

{% style %}
  {% for block in section.blocks %}
    {% assign block_opacity = block.settings.overlay_opacity | plus: 0 | divided_by: 100.0 %}
    
    #slide-{{ block.id }} {
      --section-overlay-color: {{ block.settings.overlay_color | color_modify: 'alpha', block_opacity }};
      --background: {{ block.settings.caption_background }};
      --text-color: {{ block.settings.slide_text_color }};
    }

    /* Overlay */
    #slide-{{ block.id }} .slide-image:after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--section-overlay-color);
      pointer-events: none;
    }

    /* Caption position */
    #slide-{{ block.id }} .slide-caption {
      top: {{ block.settings.caption_vertical }}%;
      left: {{ block.settings.caption_horizontal }}%;
      transform: translate(-{{ block.settings.caption_horizontal }}%, -{{ block.settings.caption_vertical }}%);
    }

    {% if block.settings.hide_caption_background %}
      @media (max-width: 767px) {
        #slide-{{ block.id }} .caption-content {
          background: transparent;
        }
      }
    {% endif %}
  {% endfor %}
{% endstyle %}

<div class="global__section section-slideshow {{ section_padding }}">
  <div class="grid__wrapper">
    <div class="span-12">
      {% if section.blocks.size > 0 %}
        <div class="slideshow-{{ section.id }}{% if section.blocks.size == 1 %} single-slide{% endif %}" 
             data-slideshow 
             data-autoplay="{{ slider_speed }}"
             data-section-id="{{ section.id }}">
          
          <div class="slides-wrapper">
            {% for block in section.blocks %}
              {% liquid
                assign main_image = block.settings.image
                assign mobile_image = block.settings.mobile_image
                assign has_caption = false
                
                if block.settings.heading != blank or block.settings.subheading != blank or block.settings.button_text != blank or block.settings.second_button_text != blank
                  assign has_caption = true
                endif
                
  assign loading = 'lazy'
  assign fetchpriority = 'auto'
  if forloop.first
    assign loading = 'eager'
    assign fetchpriority = 'high'
  endif
              %}
              
              <div id="slide-{{ block.id }}" 
                   class="slide{% if forloop.first %} active{% endif %}" 
                   {{ block.shopify_attributes }}>
                
                <div class="slide-image">
                  {% if main_image %}
                    {% if mobile_image %}
                      <picture>
                        <source media="(max-width: 767px)" 
                                srcset="{{ mobile_image | image_url: width: 750 }} 750w,
                                        {{ mobile_image | image_url: width: 1000 }} 1000w"
                                sizes="100vw">
                        <source media="(min-width: 768px)"
                                srcset="{{ main_image | image_url: width: 1200 }} 1200w,
                                        {{ main_image | image_url: width: 1600 }} 1600w,
                                        {{ main_image | image_url: width: 2000 }} 2000w"
                                sizes="100vw">
                        <img src="{{ main_image | image_url: width: 1600 }}"
                             alt="{{ block.settings.heading | default: main_image.alt | escape }}"
                             width="{{ main_image.width }}"
                             height="{{ main_image.height }}"
                             loading="{{ loading }}">
                      </picture>
                    {% else %}
                      <img src="{{ main_image | image_url: width: 1600 }}"
                           srcset="{{ main_image | image_url: width: 750 }} 750w,
                                   {{ main_image | image_url: width: 1200 }} 1200w, 
                                   {{ main_image | image_url: width: 1600 }} 1600w,
                                   {{ main_image | image_url: width: 2000 }} 2000w"
                           sizes="100vw"
                           alt="{{ block.settings.heading | default: main_image.alt | escape }}"
                           width="{{ main_image.width }}"
                           height="{{ main_image.height }}"
                           loading="{{ loading }}">
                    {% endif %}
                  {% else %}
                    {% capture current %}{% cycle 1, 2 %}{% endcapture %}
                    <div style="aspect-ratio: 16/9; background: #f5f5f5; display: flex; align-items: center; justify-content: center;">
                      {{ 'lifestyle-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}
                    </div>
                  {% endif %}
                </div>
                
                {% if has_caption %}
                  <div class="slide-caption">
                    <div class="caption-content text-{{ block.settings.text_align }}">
                      {% if block.settings.heading != blank %}
                        <h2 class="slide-title">{{ block.settings.heading | escape }}</h2>
                      {% endif %}
                      
                      {% if block.settings.subheading != blank %}
                        <div class="slide-text rte">
                          {{ block.settings.subheading }}
                        </div>
                      {% endif %}
                      
                      {% if block.settings.button_text != blank or block.settings.second_button_text != blank %}
                        <div class="slide-buttons">
                          {% if block.settings.button_text != blank %}
                            <a href="{{ block.settings.link | default: '#' }}" class="btn-border-link">
                              {{ block.settings.button_text | escape }}
                            </a>
                          {% endif %}
                          
                          {% if block.settings.second_button_text != blank %}
                            <a href="{{ block.settings.second_link | default: '#' }}" class="btn-border-link">
                              {{ block.settings.second_button_text | escape }}
                            </a>
                          {% endif %}
                        </div>
                      {% endif %}
                    </div>
                  </div>
                {% endif %}
              </div>
            {% endfor %}
          </div>
          
          {% if section.blocks.size > 1 and section.settings.show_arrows %}
            <button class="nav-arrow prev" aria-label="Previous slide">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M15 18l-6-6 6-6"/>
              </svg>
            </button>
            <button class="nav-arrow next" aria-label="Next slide">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 18l6-6-6-6"/>
              </svg>
            </button>
          {% endif %}
      {% else %}
        {%- render 'onboard-no-blocks' -%}
      {% endif %}
    </div>
  </div>
</div>

<script>
(function() {
  const slideshow = document.querySelector('.slideshow-{{ section.id }}');
  if (!slideshow) return;
  
  const slides = slideshow.querySelectorAll('.slide');
  const slidesWrapper = slideshow.querySelector('.slides-wrapper');
  const prevBtn = slideshow.querySelector('.nav-arrow.prev');
  const nextBtn = slideshow.querySelector('.nav-arrow.next');
  const dots = slideshow.querySelectorAll('.nav-dot');
  const autoplayDelay = parseInt(slideshow.dataset.autoplay) || 0;
  
  let currentSlide = 0;
  let autoplayTimer = null;
  let isTransitioning = false;
  
  // Only proceed if we have multiple slides
  if (slides.length <= 1) return;
  
  // Enable fade animation
  slideshow.classList.add('fade-enabled');
  
  // Set initial active state
  slides[0].classList.add('active');
  
  // Enhanced drag functionality variables
  let isDragging = false;
  let startX = 0;
  let startY = 0;
  let currentX = 0;
  let currentY = 0;
  let dragThreshold = 50;
  let touchDirection = null; // Track if touch is horizontal or vertical
  let hasDragStarted = false; // Track if we've committed to dragging
  
  // Maintain wrapper height
  function updateWrapperHeight() {
    const activeSlide = slides[currentSlide];
    const img = activeSlide.querySelector('img');
    
    function setHeight() {
      requestAnimationFrame(() => {
        const rect = activeSlide.getBoundingClientRect();
        slidesWrapper.style.height = rect.height + 'px';
      });
    }
    
    if (img) {
      if (img.complete) {
        setHeight();
      } else {
        img.addEventListener('load', setHeight, { once: true });
      }
    } else {
      setHeight();
    }
  }
  
  // Show specific slide
  function showSlide(index, instant = false) {
    if (isTransitioning && !instant) return;
    isTransitioning = true;
    
    // Remove active from all
    slides.forEach(slide => slide.classList.remove('active'));
    dots.forEach(dot => dot.classList.remove('active'));
    
    // Add active to current
    slides[index].classList.add('active');
    if (dots[index]) dots[index].classList.add('active');
    
    currentSlide = index;
    updateWrapperHeight();
    
    setTimeout(() => {
      isTransitioning = false;
    }, instant ? 0 : 600);
  }
  
  // Next slide
  function nextSlide() {
    const next = (currentSlide + 1) % slides.length;
    showSlide(next);
  }
  
  // Previous slide
  function prevSlide() {
    const prev = (currentSlide - 1 + slides.length) % slides.length;
    showSlide(prev);
  }
  
  // Autoplay
  function startAutoplay() {
    if (autoplayDelay > 0) {
      stopAutoplay();
      autoplayTimer = setInterval(nextSlide, autoplayDelay);
    }
  }
  
  function stopAutoplay() {
    if (autoplayTimer) {
      clearInterval(autoplayTimer);
      autoplayTimer = null;
    }
  }
  
  // Desktop drag functionality (unchanged)
  function handleMouseDragStart(e) {
    if (slides.length <= 1) return;
    
    isDragging = true;
    hasDragStarted = true;
    startX = e.pageX;
    currentX = startX;
    
    slidesWrapper.classList.add('dragging');
    slideshow.classList.add('dragging');
    
    e.preventDefault();
    stopAutoplay();
  }
  
  function handleMouseDragMove(e) {
    if (!isDragging || !hasDragStarted) return;
    
    e.preventDefault();
    currentX = e.pageX;
  }
  
  function handleMouseDragEnd(e) {
    if (!isDragging || !hasDragStarted) return;
    
    isDragging = false;
    hasDragStarted = false;
    slidesWrapper.classList.remove('dragging');
    slideshow.classList.remove('dragging');
    
    const diff = currentX - startX;
    
    if (Math.abs(diff) > dragThreshold) {
      if (diff > 0) {
        prevSlide();
      } else {
        nextSlide();
      }
    }
    
    setTimeout(startAutoplay, 1000);
  }
  
  // Enhanced touch functionality with direction detection
  function handleTouchStart(e) {
    if (slides.length <= 1) return;
    
    const touch = e.touches[0];
    startX = touch.pageX;
    startY = touch.pageY;
    currentX = startX;
    currentY = startY;
    
    // Reset state
    isDragging = false;
    hasDragStarted = false;
    touchDirection = null;
    
    // Don't prevent default here - let the browser handle initial touch
  }
  
  function handleTouchMove(e) {
    if (slides.length <= 1) return;
    
    const touch = e.touches[0];
    currentX = touch.pageX;
    currentY = touch.pageY;
    
    const deltaX = Math.abs(currentX - startX);
    const deltaY = Math.abs(currentY - startY);
    
    // Determine touch direction if not already determined
    if (!touchDirection && (deltaX > 10 || deltaY > 10)) {
      if (deltaX > deltaY) {
        touchDirection = 'horizontal';
      } else {
        touchDirection = 'vertical';
      }
    }
    
    // If horizontal movement and we haven't started dragging yet
    if (touchDirection === 'horizontal' && !hasDragStarted && deltaX > 15) {
      isDragging = true;
      hasDragStarted = true;
      slidesWrapper.classList.add('dragging');
      slideshow.classList.add('dragging');
      stopAutoplay();
    }
    
    // Only prevent default if we're committed to horizontal dragging
    if (hasDragStarted && touchDirection === 'horizontal') {
      e.preventDefault();
    }
    // For vertical scrolling or undetermined direction, let the browser handle it
  }
  
  function handleTouchEnd(e) {
    if (!hasDragStarted || touchDirection !== 'horizontal') {
      // Clean up any state but don't trigger slide change
      isDragging = false;
      hasDragStarted = false;
      touchDirection = null;
      slidesWrapper.classList.remove('dragging');
      slideshow.classList.remove('dragging');
      return;
    }
    
    isDragging = false;
    hasDragStarted = false;
    slidesWrapper.classList.remove('dragging');
    slideshow.classList.remove('dragging');
    
    const diff = currentX - startX;
    
    // Check if drag distance exceeds threshold
    if (Math.abs(diff) > dragThreshold) {
      if (diff > 0) {
        prevSlide();
      } else {
        nextSlide();
      }
    }
    
    // Reset touch direction
    touchDirection = null;
    
    // Resume autoplay after a delay
    setTimeout(startAutoplay, 1000);
  }
  
  // Event listeners
  if (prevBtn) prevBtn.addEventListener('click', () => {
    prevSlide();
    stopAutoplay();
  });
  
  if (nextBtn) nextBtn.addEventListener('click', () => {
    nextSlide();
    stopAutoplay();
  });
  
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      showSlide(index);
      stopAutoplay();
    });
  });
  
  // Pause on hover
  slideshow.addEventListener('mouseenter', stopAutoplay);
  slideshow.addEventListener('mouseleave', startAutoplay);
  
  // Desktop drag events (mouse)
  slidesWrapper.addEventListener('mousedown', handleMouseDragStart);
  document.addEventListener('mousemove', handleMouseDragMove);
  document.addEventListener('mouseup', handleMouseDragEnd);
  
  // Mobile touch events with proper direction detection
  slidesWrapper.addEventListener('touchstart', handleTouchStart, { passive: true });
  slidesWrapper.addEventListener('touchmove', handleTouchMove, { passive: false });
  slidesWrapper.addEventListener('touchend', handleTouchEnd, { passive: true });
  
  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    const rect = slideshow.getBoundingClientRect();
    const inViewport = rect.top < window.innerHeight && rect.bottom > 0;
    
    if (inViewport) {
      if (e.key === 'ArrowLeft') {
        prevSlide();
        stopAutoplay();
      } else if (e.key === 'ArrowRight') {
        nextSlide();
        stopAutoplay();
      }
    }
  });
  
  // Handle resize with debouncing
  let resizeTimer;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      updateWrapperHeight();
    }, 250);
  });
  
  // Handle images loading after initialization
  slides.forEach((slide) => {
    const img = slide.querySelector('img');
    if (img && !img.complete) {
      img.addEventListener('load', () => {
        if (slide.classList.contains('active')) {
          updateWrapperHeight();
        }
      });
    }
  });
  
  // Initialize
  updateWrapperHeight();
  startAutoplay();
  
  // Ensure height is set correctly after all resources load
  window.addEventListener('load', updateWrapperHeight);
  
  // Fix for Shopify theme editor
  document.addEventListener('shopify:section:load', (e) => {
    if (e.detail.sectionId === '{{ section.id }}') {
      setTimeout(() => {
        updateWrapperHeight();
        showSlide(0, true);
      }, 100);
    }
  });
})();
</script>

{% schema %}
{
  "name": "Slideshow",
  "tag": "section",
  "class": "dynamic-section",
  "max_blocks": 5,
  "blocks": [
    {
      "type": "image",
      "name": "Image slide",
      "settings": [
        {
          "type": "header",
          "content": "Desktop settings"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Desktop image",
          "info": "2880px x 1620px recommended"
        },
        {
          "type": "header",
          "content": "Mobile settings"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "Mobile image",
          "info": "800px x 1200px recommended"
        },
        {
          "type": "header",
          "content": "Caption content"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Heading",
          "default": "Slide image title"
        },
        {
          "type": "richtext",
          "id": "subheading",
          "label": "Subheading",
          "default": "<p>Slide image subheading</p>"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button text",
          "default": "Button"
        },
        {
          "type": "url",
          "id": "second_link",
          "label": "Button 2 link"
        },
        {
          "type": "text",
          "id": "second_button_text",
          "label": "Button 2 text"
        },
        {
          "type": "header",
          "content": "Appearance"
        },
        {
          "type": "color",
          "id": "overlay_color",
          "label": "Image overlay color",
          "default": "#000000"
        },
        {
          "type": "range",
          "id": "overlay_opacity",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Image overlay opacity",
          "default": 0
        },
        {
          "type": "color",
          "id": "slide_text_color",
          "label": "Caption text",
          "default": "#ffffff"
        },
        {
          "type": "color",
          "id": "caption_background",
          "label": "Caption background",
          "default": "transparent"
        },
        {
          "type": "checkbox",
          "id": "hide_caption_background",
          "label": "Hide caption background on mobile"
        },
        {
          "type": "range",
          "id": "caption_horizontal",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Caption horizontal position",
          "default": 50
        },
        {
          "type": "range",
          "id": "caption_vertical",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "%",
          "label": "Caption vertical position",
          "default": 50
        },
        {
          "type": "text_alignment",
          "id": "text_align",
          "label": "Caption alignment",
          "default": "center"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_autoplay",
      "label": "Auto-change slides",
      "default": false
    },
    {
      "type": "range",
      "id": "slider_speed",
      "min": 3,
      "max": 10,
      "step": 1,
      "label": "Change images every (seconds)",
      "default": 5
    },
    {
      "type": "select",
      "id": "section_padding",
      "label": "Section spacing",
      "options": [
        {
          "value": "top",
          "label": "Top"
        },
        {
          "value": "bottom",
          "label": "Bottom"
        },
        {
          "value": "both",
          "label": "Both"
        },
        {
          "value": "none",
          "label": "None"
        }
      ],
      "default": "both"
    }
  ],
  "presets": [
    {
      "name": "Slideshow",
      "blocks": [
        {
          "type": "image"
        },
        {
          "type": "image"
        }
      ]
    }
  ]
}
{% endschema %}