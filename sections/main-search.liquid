{% style %}
  .desc p span {
    font-size: 18px !important;
  }

  .count {
    font-size: 16px !important;
    font-weight: bold;
    margin-bottom: 10px;
  } 

  /* Filter and Sort Button Styles */
  .collection__page--topbar .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-height: 40px;
    padding: 8px 16px;
    border: 1px solid var(--text-color);
    border-radius: 8px;
    background: transparent;
    transition: all 0.3s ease;
    font-size: 14px;
    letter-spacing: 0.5px;
  }

  .collection__page--topbar .button:hover {
    background: #eee;
    color: var(--bg-color);
  }

  .collection__page--topbar .button .no-pe {
    font-weight: 700;
    text-transform: uppercase;
  }

  .collection__page--topbar .button svg {
    margin-left: 8px;
    width: 12px;
    height: 12px;
    transition: transform 0.3s ease;
  }

  .collection__page--topbar .button:hover svg {
    transform: translateY(2px);
    fill: var(--bg-color);
  }

  .search__page--bar-wrapper {
   width: 100% !important;
   max-width: 1200px !important;
   margin: 24px 0 36px 0 !important;
   
 }

 @media screen and (max-width: 1023px) {
   .search__page--bar-wrapper {
    padding: 0 12px;
   }
 }

 .search__page--bar-wrapper input {
    border-radius: 4px !important;
    border: 1px solid #ddd !important;
    height: 44px !important;
    padding: 0 15px !important;
    font-size: 16px !important;
  }

  .search__page--bar-wrapper .button {
    background: white !important;
    border: 1px solid #ddd !important;
    border-radius: 4px !important;
    height: 44px !important;
    width: 44px !important;
    padding: 0 !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .search__page--bar-wrapper .button svg {
    width: 18px !important;
    height: 18px !important;
    fill: #333 !important;
  }

  .search__page--bar-wrapper .button:hover {
    background: #f5f5f5 !important;
  }

 .form.form-vertical {
   width: 100% !important;
   display: flex !important;
   gap: 10px !important;
 }

 .text-search p{
   font-size: 18px !important;
   font-weight: 600;
   text-align: left;
 }

  @media screen and (max-width: 768px) {
    .collection__page--topbar .button {
      min-height: 36px;
      padding: 6px 12px;
      font-size: 13px;
    }

    .text-search p{
      font-size: 16px !important;
    }
  }

  @media screen and (max-width: 1023px){
    #search-page {
      padding: 0 12px;
    }
  }

  /* Subtle animation for filter updates */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  /* Apply animation only to newly added elements */
  .filter-drawer__filtering__results.js-new-filter {
    animation: fadeIn 0.3s ease;
  }
{% endstyle %}

{% comment %} Search Assets {% endcomment %}
<link rel="preload" href="{{ 'section-main-search.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="{{ 'section-main-search.css' | asset_url }}"></noscript>
<link rel="preload" href="{{ 'component-product-grid.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="{{ 'component-product-grid.css' | asset_url }}"></noscript>

{% comment %} Search Page Logic {% endcomment %}
{%- liquid
  assign page_limit = section.settings.items_per_page | default: 24

  assign has_sortby = false
  assign has_filter = false
  for block in section.blocks
    if block.type == 'sort_by'
      assign has_sortby = true
    endif
    if block.type == 'filter'
      assign has_filter = true
    endif
  endfor

  assign filter_count = 0
  for filter in search.filters
    if filter.type == 'price_range'
      if filter.min_value.value != nil or filter.max_value.value != nil
        assign filter_count = 1
      endif
    endif

    assign filter_count = filter_count | plus: filter.active_values.size
  endfor

  if settings.varying_grid
    assign grid_type = 'reverse cg6 sm-cg4 rg6 sm-rg6'
  else
    assign grid_type = 'cg6 sm-cg4 rg9 sm-rg6'
  endif

  case section.settings.items_per_row
  when 4
    assign items_per_row = 'span-3 sm-span-6 auto'
  when 3
    assign items_per_row = 'span-4 sm-span-6 auto'
  when 2
    assign items_per_row = 'span-6 sm-span-6 auto'
  when 1
    assign items_per_row = 'span-12 sm-span-12'
  endcase
-%}

<section
  id="search-page"
  class="search-template search__page--wrapper collection-template no-section-animation mt6 pb9"
  data-section-id="{{ section.id }}"
  data-section-type="search-template"
  data-asset-url="{{ 'section-main-search.js' | asset_url }}">

  {% paginate search.results by page_limit %}
    <div id="SearchProductGrid" class="grid__wrapper">
      <div id="search-bar" class="search__page--bar-wrapper span-12 auto ">
        <form action="{{ routes.search_url }}" method="get">
          <div class="a-left text-search mb-3">
            {% if search.performed %}
              {% if search.results_count == 0 %}
                <p>{{ 'general.search.no_results_html' | t: terms: search.terms }}</p>
              {% else %}
                <p>{{ 'general.search.results_for_html' | t: terms: search.terms }}</p>
              {% endif %}
            {% endif %}
          </div>
          <div class="form form-vertical a-center">
            <input
              class="mb0"
              type="text"
              name="q"
              id="q"
              value="{{ search.terms }}"
              placeholder="{{ 'general.search.placeholder' | t }}"/>
              <button type="submit" class="button">
                {% render 'saturaise-icons', 
                  icon: 'search' %}
              </button>
          </div>
        </form>
      </div>

      {% if search.performed %}
        <div class="collection__page--topbar span-12 auto grid__wrapper edge rg0">
          <div class="span-5 sm-span-12 auto a-left v-end">
            {%- for block in section.blocks -%}
              {%- case block.type -%}
                {%- when 'filter' -%}
                  <button class="button js-slideout-open js-menu-toggle mr3"
                    data-wau-slideout-target="search-filters"
                    data-slideout-direction="left"
                    data-toggle-menu="filter"
                    aria-label="{{ 'collections.filter.filter' | t }}"
                    tabindex="0" type="button" name="button">
                    <span class="no-pe">{{ 'collections.filter.filter' | t }}</span>
                    {% render 'snip-icons',
                      wrapper: '.collection__page--topbar',
                      classes: 'icon-filter'
                      type: 'theme',
                      icon: 'filter',
                      size: '14px',
                      fill: 'currentColor',
                      hover: 'currentColor' %}
                  </button>
                {%- when 'sort_by' -%}
                  <button class="button js-slideout-open js-menu-toggle mr3"
                    data-wau-slideout-target="search-filters"
                    data-slideout-direction="left"
                    data-toggle-menu="sort"
                    aria-label="{{ 'collections.filter.sort_title' | t }}"
                    tabindex="0" type="button" name="button">
                    <span class="no-pe">{{ 'collections.filter.sort_title' | t }}</span>
                    {% render 'snip-icons',
                      wrapper: '.collection__page--topbar',
                      classes: 'icon-sort'
                      type: 'apollo',
                      icon: 'down-carrot',
                      size: '12px',
                      fill: 'currentColor',
                      hover: 'currentColor' %}
                  </button>
              {%- endcase -%}
            {%- endfor -%}
          </div>
          <div class="span-7 sm-hide auto a-right v-end">
            {%- if section.settings.show_count -%}
              <p class="topbar__count mb0 count js-product-count">{{ 'collections.general.item_count.other' | t: count: search.results_count }}</p>
            {%- endif -%}
          </div>
          
          {%- if filter_count > 0 -%}
            {%- for block in section.blocks -%}
              {%- if block.type == 'filter' -%}
                  <div class="filter-drawer__filtering__results js-filters-reset js-main-filters-container span-12 auto">
                    <h3 class="visually-hidden">{{ 'collections.filter.filtering_by_label' | t }}</h3>
                    <ul class="current_filters mb0 mt4 js-main-filters-list">
                      {%- for filter in search.filters -%}
                        {%- for value in filter.active_values -%}
                          <li class="current_filters--filter">
                            <a class="js-current-filter" href="{{ value.url_to_remove }}">
                              {{ value.label | escape }}
                            </a>
                          </li>
                        {%- endfor -%}
                        {% if filter.type == "price_range" %}
                          {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                            <li class="current_filters--filter">
                              <a class="js-current-filter" href="{{ filter.url_to_remove }}">
                                {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
                              </a>
                            </li>
                          {%- endif -%}
                        {% endif %}
                      {%- endfor -%}
                      <li><a class="current_filters--clear js-current-filter ml4" href="{{ routes.search_url }}">{{ 'collections.filter.clear_all' | t }}</a></li>
                    </ul>
                  </div>
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
        </div>

        {%- if has_sortby or has_filter -%}
          <aside class="slideout slideout__drawer-right py8 px7"
            data-wau-slideout="search-filters" id="slideout-search-filters">
            <form id="SearchFiltersForm" data-filters>
              {% render 'snip-filter-drawer',
                has_sortby: has_sortby,
                has_filter: has_filter,
                type: search,
                filter_count: filter_count %}
            </form>
          </aside>
        {%- endif -%}

        {%- if search.results_count < 1 -%}
          <div id="main-search-results"
            class="search--empty span-12 auto"
            data-id="{{ section.id }}">
             <div class="py10 a-center">
              <h2>{{ 'general.search.no_results' | t }}</h2>
              <p>{{ 'general.search.no_results_html' | t: terms: search.terms }}</p>
             </div>
          </div>
        {%- else -%}
          <div class="collection span-12" id="main-search-product-grid" data-id="{{ section.id }}">
            <div class="product-loop grid__wrapper {{ grid_type }} edge">
              {% for item in search.results %}
                {% if item.object_type == 'product' %}
                  {% liquid
                    assign loading = 'lazy'
                    assign fetch_priority = 'auto'
                    if section.index == 1
                      if settings.varying_grid and forloop.index <= 3
                        assign loading = 'eager'
                        assign fetch_priority = 'high'
                      elsif forloop.index <= section.settings.items_per_row
                        assign loading = 'eager'
                        assign fetch_priority = 'high'
                      endif
                    endif
                   %}
                  {% render 'product-loop',
                    product: item,
                    grid_items: section.settings.items_per_row,
                    product_info_align: 'a-center',
                    items_per_row: items_per_row,
                    varying_grid: settings.varying_grid,
                    index: forloop.index,
                    loading: loading,
                    fetchpriority: fetch_priority %}
                {% endif %}
              {% endfor %}
            </div>
          </div>

          {% if search.results_count >= page_limit %}
            <div class="span-12 auto">
              {% render 'snip-pagination', paginate: paginate %}
            </div>
          {% endif %}
        {%- endif -%}
      {% endif %}
    </div>
  {% endpaginate %}

   <script>
    document.addEventListener('DOMContentLoaded', function() {
      // This script will ensure the current filters on the main page are updated
      // when filters are applied or removed via AJAX
      
      // Listen for AJAX requests and update the main page filter list
      (function() {
        // Store the original fetch function
        const originalFetch = window.fetch;
        
        // Override the fetch function to intercept AJAX requests
        window.fetch = function() {
          const fetchPromise = originalFetch.apply(this, arguments);
          
          // Process the response if it's a search page request
          if (arguments[0] && arguments[0].includes('/search')) {
            fetchPromise.then(response => {
              // Clone the response so we can read it twice
              const clonedResponse = response.clone();
              
              // Process the cloned response to update the filter UI
              clonedResponse.text().then(html => {
                updateMainPageFilters(html);
              }).catch(err => console.error('Error processing response:', err));
            }).catch(err => console.error('Error with fetch:', err));
          }
          
          return fetchPromise;
        };
        
        function updateMainPageFilters(html) {
          const parser = new DOMParser();
          const newDocument = parser.parseFromString(html, 'text/html');
          
          // Update the main page filters list
          const mainFiltersContainer = document.querySelector('.js-main-filters-container');
          const newMainFiltersContainer = newDocument.querySelector('.js-main-filters-container');
          
          if (mainFiltersContainer && newMainFiltersContainer) {
            // Only update the filter list items, not the entire container
            const mainFiltersList = mainFiltersContainer.querySelector('.js-main-filters-list');
            const newFiltersList = newMainFiltersContainer.querySelector('.js-main-filters-list');
            
            if (mainFiltersList && newFiltersList) {
              mainFiltersList.innerHTML = newFiltersList.innerHTML;
            }
            
            // Re-attach event listeners to the filter items
            attachFilterEventListeners();
            
            // Show or hide the filters container based on whether there are filters
            const hasFilters = newMainFiltersContainer.querySelector('.js-main-filters-list li') !== null;
            mainFiltersContainer.style.display = hasFilters ? 'block' : 'none';
          } else if (mainFiltersContainer && !newMainFiltersContainer) {
            // If there are no filters in the new document, hide the container
            mainFiltersContainer.style.display = 'none';
          } else if (!mainFiltersContainer && newMainFiltersContainer) {
            // If we need to add the filters container when it doesn't exist
            const topbar = document.querySelector('.collection__page--topbar');
            if (topbar) {
              // Create a clone of the filters container
              const containerClone = newMainFiltersContainer.cloneNode(true);
              // Append it to the topbar
              topbar.appendChild(containerClone);
              // Attach event listeners
              attachFilterEventListeners();
            }
          }
          
          // Also update filter drawer if it's open
          const filterDrawer = document.querySelector('.filter-drawer__wrapper');
          const newFilterDrawer = newDocument.querySelector('.filter-drawer__wrapper');
          if (filterDrawer && newFilterDrawer) {
            // Update the current filters in the drawer
            const drawerFiltersList = filterDrawer.querySelector('.current_filters');
            const newDrawerFiltersList = newFilterDrawer.querySelector('.current_filters');
            
            if (drawerFiltersList && newDrawerFiltersList) {
              drawerFiltersList.innerHTML = newDrawerFiltersList.innerHTML;
              
              // Re-attach event listeners
              document.querySelectorAll('.filter-drawer__wrapper .js-current-filter').forEach(link => {
                link.addEventListener('click', function(e) {
                  e.preventDefault();
                  
                  if (window.isLoading) return;
                  window.isLoading = true;
                  
                  document.querySelector('.filter-drawer__wrapper').classList.add('is-loading');
                  
                  fetch(this.href, {
                    headers: {
                      'X-Requested-With': 'XMLHttpRequest'
                    }
                  })
                  .then(response => response.text())
                  .then(html => {
                    updateMainPageFilters(html);
                    document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
                    window.isLoading = false;
                    window.history.pushState({}, '', this.href);
                  })
                  .catch(error => {
                    console.error('Error:', error);
                    document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
                    window.isLoading = false;
                  });
                });
              });
            }
          }
          
          // Update product count if it exists
          const productCount = document.querySelector('.js-product-count');
          const newProductCount = newDocument.querySelector('.js-product-count');
          if (productCount && newProductCount) {
            productCount.textContent = newProductCount.textContent;
          }
        }
        
        function attachFilterEventListeners() {
          // Attach click handlers to all filter remove buttons
          document.querySelectorAll('.js-main-filters-list .js-current-filter').forEach(link => {
            // Remove any existing event listeners first to prevent duplicates
            const newLink = link.cloneNode(true);
            link.parentNode.replaceChild(newLink, link);
            
            newLink.addEventListener('click', function(e) {
              e.preventDefault();
              
              if (window.isLoading) return;
              window.isLoading = true;
              
              // Store the drawer state before making the request
              const drawer = document.querySelector('[data-wau-slideout="search-filters"]');
              const wasDrawerOpen = drawer && drawer.classList.contains('slideout--active');
              
              // Add loading state to indicate processing
              document.body.classList.add('is-loading');
              if (document.querySelector('.filter-drawer__wrapper')) {
                document.querySelector('.filter-drawer__wrapper').classList.add('is-loading');
              }
              
              fetch(this.href, {
                headers: {
                  'X-Requested-With': 'XMLHttpRequest'
                }
              })
              .then(response => response.text())
              .then(html => {
                const parser = new DOMParser();
                const newDocument = parser.parseFromString(html, 'text/html');
                
                // Update product grid
                const productGrid = document.querySelector('#main-search-product-grid');
                const newProductGrid = newDocument.querySelector('#main-search-product-grid');
                if (productGrid && newProductGrid) {
                  productGrid.innerHTML = newProductGrid.innerHTML;
                }
                
                // Update main page filters
                updateMainPageFilters(html);
                
                // Update filter drawer if it exists
                const filterDrawer = document.querySelector('.filter-drawer__wrapper');
                const newFilterDrawer = newDocument.querySelector('.filter-drawer__wrapper');
                if (filterDrawer && newFilterDrawer) {
                  // Update only the filters list part
                  const drawerFiltersList = filterDrawer.querySelector('.current_filters');
                  const newDrawerFiltersList = newFilterDrawer.querySelector('.current_filters');
                  if (drawerFiltersList && newDrawerFiltersList) {
                    drawerFiltersList.innerHTML = newDrawerFiltersList.innerHTML;
                  }
                  
                  // Re-initialize drawer filter events
                  document.querySelectorAll('.filter-drawer__wrapper .js-current-filter').forEach(drawerLink => {
                    const newDrawerLink = drawerLink.cloneNode(true);
                    drawerLink.parentNode.replaceChild(newDrawerLink, drawerLink);
                    
                    newDrawerLink.addEventListener('click', function(e) {
                      e.preventDefault();
                      if (window.isLoading) return;
                      
                      const filterUrl = this.href;
                      window.isLoading = true;
                      filterDrawer.classList.add('is-loading');
                      
                      fetch(filterUrl, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                      })
                      .then(response => response.text())
                      .then(drawerHtml => {
                        // Update everything
                        updateMainPageFilters(drawerHtml);
                        
                        // Update product grid
                        const gridParser = new DOMParser();
                        const gridDocument = gridParser.parseFromString(drawerHtml, 'text/html');
                        const gridProductGrid = document.querySelector('#main-search-product-grid');
                        const newGridProductGrid = gridDocument.querySelector('#main-search-product-grid');
                        if (gridProductGrid && newGridProductGrid) {
                          gridProductGrid.innerHTML = newGridProductGrid.innerHTML;
                        }
                        
                        filterDrawer.classList.remove('is-loading');
                        window.isLoading = false;
                        window.history.pushState({}, '', filterUrl);
                      })
                      .catch(error => {
                        console.error('Drawer filter error:', error);
                        filterDrawer.classList.remove('is-loading');
                        window.isLoading = false;
                      });
                    });
                  });
                }
                
                // Update product count
                const productCount = document.querySelector('.js-product-count');
                const newProductCount = newDocument.querySelector('.js-product-count');
                if (productCount && newProductCount) {
                  productCount.textContent = newProductCount.textContent;
                }
                
                // Remove loading states
                document.body.classList.remove('is-loading');
                if (document.querySelector('.filter-drawer__wrapper')) {
                  document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
                }
                window.isLoading = false;
                
                // Update URL
                window.history.pushState({}, '', this.href);
              })
              .catch(error => {
                console.error('Error:', error);
                document.body.classList.remove('is-loading');
                if (document.querySelector('.filter-drawer__wrapper')) {
                  document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
                }
                window.isLoading = false;
              });
            });
          });
        }
        
        // Initial setup of event listeners
        attachFilterEventListeners();
      })();
      
      // Handle empty search state
      function updateEmptyState() {
        const searchContainer = document.querySelector('#main-search-product-grid');
        const emptyContainer = document.querySelector('.search--empty');
        
        if (emptyContainer) {
          // Check if empty because of filters
          const filterCount = document.querySelectorAll('.current_filters--filter').length;
          
          if (filterCount > 0) {
            // Show "no results with these filters" message
            const noResultsText = emptyContainer.querySelector('h2');
            const noResultsDesc = emptyContainer.querySelector('p');
            if (noResultsText) {
              noResultsText.textContent = "{{ 'collections.filter.no_results' | t }}";
            }
            if (noResultsDesc) {
              noResultsDesc.textContent = "{{ 'collections.filter.use_fewer_filters' | t }}";
            }
          }
        }
      }
      
      // Run once on page load
      updateEmptyState();
      
      // Update empty state when filters change
      const observer = new MutationObserver(updateEmptyState);
      const searchContainer = document.querySelector('#main-search-product-grid');
      if (searchContainer) {
        observer.observe(searchContainer, { childList: true, subtree: true });
      }
    });
   </script>
</section>

{% schema %}
{
  "name": "Search page",
  "max_blocks": 10,
  "settings": [
    {
      "type": "range",
      "id": "items_per_page",
      "min": 2,
      "max": 48,
      "step": 1,
      "label": "Products per page",
      "default": 24
    },
    {
      "type": "range",
      "id": "items_per_row",
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Products per row",
      "default": 4
    },
    {
      "type": "checkbox",
      "id": "show_count",
      "label": "Show product count",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "sort_by",
      "name": "Sort by",
      "limit": 1,
      "settings": []
    },
    {
      "type": "filter",
      "name": "Filters",
      "limit": 1,
      "settings": []
    }
  ]
}
{% endschema %}