{% comment %} Editorial Columns Assets {% endcomment %}
<link rel="preload" href="{{ 'section-editorial-columns.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="{{ 'section-editorial-columns.css' | asset_url }}"></noscript>

{% comment %} Editorial Columns Logic {% endcomment %}
{%- liquid
  assign section_padding = ''
  if section.settings.section_padding == 'top'
    assign section_padding = 'pb0'
  elsif section.settings.section_padding == 'bottom'
    assign section_padding = 'mt0'
  elsif section.settings.section_padding == 'none'
    assign section_padding = 'mt0 pb0'
  endif

  if settings.section_title_align == 'left'
    assign heading_align = 'a-left'
  else
    assign heading_align = 'a-center'
  endif

  case section.settings.text_align
  when 'left'
    assign text_align =  'a-left'
  when 'center'
    assign text_align =  'a-center'
  when 'right'
    assign text_align =  'a-right'
  endcase

  case section.blocks.size
    when 0
    when 1
      assign block_width = 'span-12 auto'
    when 2
      assign block_width = 'span-6 auto'
    when 3
      assign block_width = 'span-4 auto'
    when 4
      assign block_width = 'span-3 auto'
    when 5
      assign block_width = 'auto'
    when 6
      assign block_width = 'span-2 auto'
  endcase

  assign sm_render = '100vw'
  assign md_render = 'calc(100vw / ' | append: section.blocks.size | append: ')'
  assign lg_render = 'calc(1600px / ' | append: section.blocks.size | append: ')'

  if section.index == 1
    assign loading = 'eager'
    assign fetch_priority = 'high'
  endif
-%}

{% comment %} Editorial Columns Template {% endcomment %}
<div
  class="section-txt-cols pl-3 md:pl-0 mb-5 text-columns-{{ section.id }} global__section {{ section_padding }} {% if request.visual_preview_mode %}preview-mode{% endif %}"
  data-section-id="{{ section.id }}"
  data-section-type="editorial-columns"
  data-section-loaded="false"
  style="max-width: 1280px; margin: 0 auto;">
  <div class="grid__wrapper">
    <h2 class="section-txt-cols__section-heading {{ heading_align }} mb-3 grid-span-12 no-wrap">{{ section.settings.title }}</h2>
  </div>
  
  <div class="section-txt-cols__inner-wrapper">
    {% for block in section.blocks %}
      <article class="section-txt-cols__item text-promo-{{ block.id }} {{ text_align }}" {{ block.shopify_attributes }}>
        {% if block.settings.link != blank %}<a href="{{ block.settings.link }}">{% endif %}
          <div class="section-txt-cols__image mb4">
            {% if block.settings.image != blank %}
              {% render 'helper-image',
                 type: block.settings.image,
                 sm_render: sm_render,
                 md_render: md_render,
                 lg_render: lg_render,
                 loading: loading,
                 fetchpriority: fetch_priority %}
            {% else %}
              <div class="demo-1 onboard">
                {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
              </div>
            {% endif %}
          </div>
        {% if block.settings.link != blank %}</a>{% endif %}

        <div class="section-txt-cols__content mb2 animate--text delay--{{ forloop.index0 }}">
          {% if block.settings.title != blank %}
            <h3 class="section-txt-cols__block-heading mb2">{{ block.settings.title }}</h3>
          {% endif %}
          
          <div class="section-txt-cols__text-container">
            {% if block.settings.subheading != blank %}
              <div class="section-txt-cols__block-subheading mb2 content-wrapper" id="content-{{ block.id }}">
                {{ block.settings.subheading }}
              </div>
              <div class="read-more-container" data-for-content="content-{{ block.id }}">
                <button class="read-more-btn" aria-expanded="false" aria-controls="content-{{ block.id }}">Więcej</button>
              </div>
            {% endif %}
          </div>
        </div>
      </article>
    {% endfor %}
  </div>

  <style type="text/css">
    /* Section and Column Styling */
    .section-txt-cols__inner-wrapper {
      display: grid;
      grid-template-columns: repeat({{ section.blocks.size }}, 1fr);
      gap: 20px;
      width: 100%;
    }
    
    {% if section.blocks.size == 5 %}
      .section-txt-cols__inner-wrapper {
        grid-template-columns: repeat(5, 1fr);
      }
    {% endif %}
    
    /* Column Structure */
    .section-txt-cols__item {
      display: flex;
      flex-direction: column;
      height: 100%;
      position: relative;
    }
    
    .section-txt-cols__content {
      display: flex;
      flex-direction: column;
      flex-grow: 1;
    }
    
    .section-txt-cols__text-container {
      margin-bottom: 10px;
      display: flex;
      flex-direction: column;
      flex-grow: 1;
      position: relative;
    }
    
    .section-txt-cols__block-subheading {
      position: relative;
      overflow: hidden;
      transition: max-height 0.3s ease;
    }
    
    .read-more-container {
      margin-top: auto;
      text-align: center;
      
      display: none;
    }
    
    .read-more-btn {
      display: inline-block;
      padding-top: 40px;
      font-weight: 700;
      font-size: 14px;
      color: #333;
      background: transparent;
      border: 1px solid #333;
      border-radius: 4px;
      cursor: pointer;
      z-index: 2;
    }
    
    .section-txt-cols__section-heading.no-wrap {
      font-size: 32px;
      white-space: nowrap;
      font-weight: 700 !important;
    }
    
    /* Set max-width back to 1600px for large screens */
    @media (min-width: 1920px) {
      .section-txt-cols.text-columns-{{ section.id }} {
        max-width: 1600px !important;
      }
    }
    
    /* Mobile Layout */
    @media (max-width: 767px) {
      .section-txt-cols__section-heading.no-wrap {
        font-size: 24px !important;
        white-space: nowrap;
      }
      
      .section-txt-cols__inner-wrapper {
        display: flex !important;
        flex-wrap: nowrap !important;
        overflow-x: auto !important;
        -webkit-overflow-scrolling: touch;
        padding-bottom: 20px;
        scroll-padding: 0 20px;
        scroll-snap-type: x mandatory;
      }
      
      .section-txt-cols__item {
        flex: 0 0 270px;
        width: 270px !important;
        margin-right: 15px !important;
        scroll-snap-align: start;
        min-height: 350px;
      }
      
      .section-txt-cols__text-container {
        min-height: 150px;
        display: flex;
        flex-direction: column;
      }
      
      .section-txt-cols__block-subheading.collapsed {
        max-height: 120px;
        overflow: hidden;
      }
      
      .section-txt-cols__block-subheading.collapsed::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 40px;
        background: linear-gradient(to bottom, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1) 90%);
        pointer-events: none;
      }

      
    }

    .section-txt-cols__image{
      border-radius: 12px;
    }
  </style>

  {% if section.blocks.size == 0 %}
    {% render 'onboard-no-blocks' %}
  {% endif %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Setup text rollup functionality for mobile
    function setupTextRollup() {
      const isMobile = window.innerWidth <= 767;
      const section = document.querySelector('.text-columns-{{ section.id }}');
      const contentWrappers = section.querySelectorAll('.section-txt-cols__block-subheading');
      
      contentWrappers.forEach(contentWrapper => {
        const contentId = contentWrapper.id;
        const buttonContainer = section.querySelector(`.read-more-container[data-for-content="${contentId}"]`);
        
        if (!buttonContainer) return;
        
        if (isMobile) {
          // Check if content is overflowing
          const isOverflowing = contentWrapper.scrollHeight > 120;
          
          if (isOverflowing) {
            // Add collapsed class and show button
            contentWrapper.classList.add('collapsed');
            buttonContainer.style.display = 'block';
            
            // Setup button
            const button = buttonContainer.querySelector('.read-more-btn');
            if (button) {
              button.textContent = 'Więcej';
              button.setAttribute('aria-expanded', 'false');
              
              // Remove old listener
              const newButton = button.cloneNode(true);
              button.parentNode.replaceChild(newButton, button);
              
              // Add click event
              newButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const isCollapsed = contentWrapper.classList.contains('collapsed');
                
                if (isCollapsed) {
                  contentWrapper.classList.remove('collapsed');
                  this.textContent = 'Mniej';
                  this.setAttribute('aria-expanded', 'true');
                } else {
                  contentWrapper.classList.add('collapsed');
                  this.textContent = 'Więcej';
                  this.setAttribute('aria-expanded', 'false');
                }
              });
            }
          } else {
            // Text fits, no need for button
            contentWrapper.classList.remove('collapsed');
            buttonContainer.style.display = 'none';
          }
        } else {
          // Desktop - show all content, hide buttons
          contentWrapper.classList.remove('collapsed');
          buttonContainer.style.display = 'none';
        }
      });
    }
    
    // Run on load
    setupTextRollup();
    
    // Mark section as loaded
    document.querySelector('.text-columns-{{ section.id }}').dataset.sectionLoaded = 'true';
    
    // Run on window resize with debounce
    let resizeTimer;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(setupTextRollup, 250);
    });
  });
</script>

{% schema %}
{
  "name": "Editorial columns",
  "tag": "section",
  "class": "dynamic-section",
  "max_blocks": 6,
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Editorial columns"
    },
    {
      "type": "text_alignment",
      "id": "text_align",
      "label": "Text alignment",
      "default": "left"
    },
    {
      "type": "select",
      "id": "section_padding",
      "label": "Section spacing",
      "options": [
        {
          "value": "top",
          "label": "Top"
        },
        {
          "value": "bottom",
          "label": "Bottom"
        },
        {
          "value": "both",
          "label": "Both"
        },
        {
          "value": "none",
          "label": "None"
        }
      ],
      "default": "both"
    }
  ],
  "blocks": [
    {
      "type": "text_block",
      "name": "Column",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link",
          "info": "Optional"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Our collections"
        },
        {
          "type": "richtext",
          "id": "subheading",
          "label": "Text",
          "default": "<p>Pair large text with an image to give focus to your chosen product, collection, or blog post. Add details on availability, style, or even provide a review.</p>"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Editorial columns",
      "blocks": [
        {
          "type": "text_block"
        },
        {
          "type": "text_block"
        },
        {
          "type": "text_block"
        }
      ]
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}