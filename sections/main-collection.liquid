

<style>
/* CRITICAL: Load immediately to prevent layout shift */
.desc p, .rte.desc p { font-size: 16px !important; margin-top: 6px !important; margin-bottom: 0 !important; transition: none !important; animation: none !important; }
.desc h3, .rte.desc h3, { font-size: 16px !important; font-weight: 700 !important; margin: 0 !important; transition: none !important; animation: none !important; }
@media (max-width: 1024px) { .desc p, .rte.desc p { font-size: 14px !important; } .desc h3, .rte.desc h3 { font-size: 14px !important; } }
</style>

{% comment %} Collection Page Assets {% endcomment %}
<link rel="preload" href="{{ 'section-main-collection.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="{{ 'section-main-collection.css' | asset_url }}"></noscript>
<link rel="preload" href="{{ 'component-product-grid.css' | asset_url }}" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="{{ 'component-product-grid.css' | asset_url }}"></noscript>

{% comment %} Collection Page Logic {% endcomment %}
{%- liquid
  assign page_limit = section.settings.items_per_page

  assign has_sortby = false
  for block in section.blocks
    if block.type == 'sort_by'
      assign has_sortby = true
    endif
  endfor

  assign has_filter = false
  for block in section.blocks
    if block.type == 'filter'
      assign has_filter = true
    endif
  endfor

  assign filter_count = 0
  for filter in collection.filters
    if filter.type == 'price_range'
      if filter.min_value.value != nil or filter.max_value.value != nil
        assign filter_count = filter_count | plus: 1
      endif
    endif
    assign filter_count = filter_count | plus: filter.active_values.size
  endfor

  if section.settings.collection_image and collection.image
    assign collection_image = true
    assign header_width = 'span-8'
  else
    assign collection_image = false
    assign header_width = 'span-8 push-2'
  endif

  assign empty_collection = true
  if collection.products.size > 0
    assign empty_collection = false
  endif

  case section.settings.items_per_row
  when 4
    assign items_per_row = 'span-3 sm-span-6 auto'
  when 3
    assign items_per_row = 'span-4 sm-span-6 auto'
  when 2
    assign items_per_row = 'span-6 sm-span-6 auto'
  when 1
    assign items_per_row = 'span-12 sm-span-12'
  endcase

  if settings.varying_grid
    assign grid_type = 'reverse cg6 sm-cg4 rg6 sm-rg6'
  else
    assign grid_type = 'cg6 sm-cg4 rg9 sm-rg6'
  endif
-%}


<section
  id="collection-page"
  class="collection__page--wrapper collection-template collection-{{ section.id }} modern-collection-filters mt6 pb9 no-section-animation"
  data-section-id="{{ section.id }}"
  data-section-type="collection"
  data-asset-url="{{ 'section-main-collection.js' | asset_url }}"
  data-collection-handle="{{ collection.handle }}"
  data-empty="{{ empty_collection }}">

 
  {% paginate collection.products by page_limit %}
    <div id="CollectionProductGrid" class="grid__wrapper px-3 lg:px-0">
      
{%- comment -%} Enhanced Collection Header with Schema.org microdata {%- endcomment -%}
{%- if collection.description != blank -%}
  <section class="collection__page--description w-100 span-8 mt2 pb2 a-left" 
           itemscope 
           itemtype="https://schema.org/CollectionPage">
    <div class="rte desc">
      <h1 class="text-2xl font-bold" itemprop="name">
        {{ collection.title }}
      </h1>
      <div itemprop="description">
        {{ collection.description | replace: '<span>', '<span class=" text-base">' }}
      </div>
      <meta itemprop="url" content="{{ shop.url }}{{ collection.url }}">
      <meta itemprop="numberOfItems" content="{{ collection.products_count }}">
      {% if collection.image %}
        <meta itemprop="image" content="{{ collection.image | img_url: 'master' }}">
      {% endif %}
    </div>
  </section>
{%- endif -%}

      {%- if collection_image -%}
       <div class="collection__page--image span-4 auto">
         {% liquid
           if section.index == 1
             assign loading = 'eager'
             assign fetch_priority = 'high'
           endif
          %}
         {% render 'helper-image',
            type: collection.image,
            sm_render: '100vw'
            md_render: 'calc((100vw / 12) * 4)',
            lg_render: 'calc((1600px / 12) * 4)',
            loading: loading,
            fetchpriority: fetch_priority %}
       </div>
     {%- endif -%}

     {%- comment -%} Enhanced Filter Top Bar {%- endcomment -%}
     {%- liquid
       assign show_filters = false
       if collection.filters.size > 0 or has_sortby
         assign show_filters = true
       endif
     -%}
     
     {% if show_filters %}
       <div class="modern-filter-topbar span-12 auto">
         <button class="modern-filter-button" 
                 type="button" 
                 onclick="FilterDrawer.open()"
                 aria-label="{{ 'collections.filter.filter' | t | default: 'Otwórz filtry' }}">
           {{ 'collections.filter.filter' | t | default: 'Filtruj' }}
           <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
             <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"></polygon>
           </svg>
         </button>
         <div class="modern-product-count">
           <span id="modernProductCount">
             {%- if collection.products_count == 1 -%}
               {{ collection.products_count }} produkt
             {%- elsif collection.products_count < 5 -%}
               {{ collection.products_count }} produkty
             {%- else -%}
               {{ collection.products_count }} produktów
             {%- endif -%}
           </span>
         </div>
       </div>
     {% endif %}

     {%- comment -%} Enhanced Current Filters Display {%- endcomment -%}
     {%- comment -%} Enhanced Current Filters Display with Mobile Support {%- endcomment -%}
{% comment %} <div class="modern-current-filters span-12 auto" id="modernCurrentFilters" {% unless filter_count > 0 %}style="display: none;"{% endunless %}>
  <div class="modern-current-filters-wrapper">
   
    <div class="modern-current-filters-header">
      <h3 class="modern-current-filters-title">{{ 'collections.filter.filtering_by_label' | t | default: 'Bieżące filtry:' }}</h3>
  
      <div class="modern-clear-all-mobile" style="display: none;">
        {% if filter_count > 0 %}
          <button class="modern-clear-all-filters" 
                  type="button" 
                  onclick="FilterDrawer.clearAll()"
                  aria-label="{{ 'collections.filter.clear_all' | t | default: 'Wyczyść wszystkie filtry' }}">
            <span class="clear-all-text">{{ 'collections.filter.clear_all' | t | default: 'Wyczyść' }}</span>
          </button>
        {% endif %}
      </div>
    </div>
    

    <div class="modern-current-filters-scroll-container">
      <ul class="modern-current-filters-list" id="modernCurrentFiltersList">
     
        {% for filter in collection.filters %}
          {% for value in filter.active_values %}
            <li class="modern-current-filter-item">
              <button class="modern-current-filter-tag" 
                      type="button"
                      data-filter-param="{{ value.param_name }}"
                      data-filter-value="{{ value.value }}"
                      onclick="FilterDrawer.removeFilter('{{ value.param_name }}', '{{ value.value }}')"
                      aria-label="{{ 'collections.filter.remove_filter' | t | default: 'Usuń filtr' }} {{ value.label | escape }}">
                <span class="filter-tag-text">{{ value.label | escape }}</span>
                <span class="modern-filter-remove-icon" aria-hidden="true">×</span>
              </button>
            </li>
          {% endfor %}
          {% if filter.type == 'price_range' %}
            {% if filter.min_value.value != nil %}
              <li class="modern-current-filter-item">
                <button class="modern-current-filter-tag" 
                        type="button"
                        data-filter-param="filter.v.price.gte"
                        data-filter-value="{{ filter.min_value.value }}"
                        onclick="FilterDrawer.removeFilter('filter.v.price.gte', '{{ filter.min_value.value }}')"
                        aria-label="{{ 'collections.filter.remove_filter' | t | default: 'Usuń filtr' }} ceny minimalnej">
                  <span class="filter-tag-text">Od {{ filter.min_value.value | money_without_currency | replace: ',', '' | round }} zł</span>
                  <span class="modern-filter-remove-icon" aria-hidden="true">×</span>
                </button>
              </li>
            {% endif %}
            {% if filter.max_value.value != nil %}
              <li class="modern-current-filter-item">
                <button class="modern-current-filter-tag" 
                        type="button"
                        data-filter-param="filter.v.price.lte"
                        data-filter-value="{{ filter.max_value.value }}"
                        onclick="FilterDrawer.removeFilter('filter.v.price.lte', '{{ filter.max_value.value }}')"
                        aria-label="{{ 'collections.filter.remove_filter' | t | default: 'Usuń filtr' }} ceny maksymalnej">
                  <span class="filter-tag-text">Do {{ filter.max_value.value | money_without_currency | replace: ',', '' | round }} zł</span>
                  <span class="modern-filter-remove-icon" aria-hidden="true">×</span>
                </button>
              </li>
            {% endif %}
          {% endif %}
        {% endfor %}
        

        {% if filter_count > 0 %}
          <li class="modern-current-filter-item modern-clear-all-desktop">
            <button class="modern-clear-all-filters" 
                    type="button" 
                    onclick="FilterDrawer.clearAll()"
                    aria-label="{{ 'collections.filter.clear_all' | t | default: 'Wyczyść wszystkie filtry' }}">
              <span class="clear-all-text">{{ 'collections.filter.clear_all' | t | default: 'Wyczyść wszystkie' }}</span>
            </button>
          </li>
        {% endif %}
      </ul>
    </div>
  </div>
</div> {% endcomment %}

      {%- if collection.products.size >= 1 -%}
        <div class="collection span-12 " id="main-collection-product-grid" data-id="{{ section.id }}">
          <div class="product-loop grid__wrapper  {{ grid_type }} edge">
            {% if collection != blank %}
              {% for product in collection.products limit: page_limit %}
                {% liquid
                  assign loading = 'lazy'
                  assign fetch_priority = 'auto'
                  if section.index == 1
                    if settings.varying_grid and forloop.index <= 3
                      assign loading = 'eager'
                      assign fetch_priority = 'high'
                    elsif forloop.index <= section.settings.items_per_row
                      assign loading = 'eager'
                      assign fetch_priority = 'high'
                    endif
                  endif
                 %}
                {% render 'product-loop',
                  collection: collection,
                  product: product,
                  grid_items: section.settings.items_per_row,
                  product_info_align: 'a-center',
                  items_per_row: items_per_row,
                  varying_grid: settings.varying_grid,
                  index: forloop.index,
                  loading: loading,
                  fetchpriority: fetch_priority,
                  itemtype: 'https://schema.org/Product' %}
              {% endfor %}
              <div class="span-12 auto">
              {% unless collection.products_count <= page_limit %}
                {% render 'snip-pagination', paginate: paginate %}
              {% endunless %}
              </div>
            {% else %}
              {% for i in (1..3) %}
                {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}
                {% assign placeholder = 'product-' | append: current %}
                <article class="product-listing relative {{ settings.image_ratio }} a-center">
                  <div class="product-image">
                    <div class="reveal relative demo-1 ">
                      {{ placeholder | placeholder_svg_tag: 'placeholder-svg' }}
                    </div>
                  </div>
                  <div class="product-info mt1 pb1 px1 sm-px0 a-center">
                    <small class="product-vendor block mb1">Product Vendor</small>
                    <p class="product-title">Product Title</p>
                    <p class="product-subtitle mb0">Product subtitle</p>
                  </div>
                </article>
              {% endfor %}
            {% endif %}
          </div>
        </div>
      {%- else -%}
        <div class="collection collection--empty span-12 relative" id="main-collection-product-grid" data-id="{{ section.id }}">
          <div class="js-coll-empty-filter py10 a-center" style="display: none;">
            <h2>{{ 'collections.filter.no_results' | t }}</h2>
            <p>{{ 'collections.filter.use_fewer_filters' | t }}</p>
            <button class="button btn-outlined" type="button" onclick="FilterDrawer.clearAll()">{{ 'collections.filter.clear_all' | t }}</button>
          </div>
          <div class="js-coll-empty py10 a-center no-js-show">
            <h2>{{ 'collections.general.empty' | t }}</h2>
            <p>{{ 'collections.general.no_matches' | t }}</p>
            <a class="button btn-outlined" href="{{ routes.collections_url }}">{{ 'collections.general.all_collections' | t }}</a>
          </div>
        </div>
      {%- endif -%}
   </div>
   {% endpaginate %}
</section>

<!-- BULLETPROOF FILTER DRAWER SYSTEM - Built from Scratch -->
{% if show_filters %}
  <!-- Drawer Container - Always at body level -->
  <div id="filterDrawerContainer" class="filter-drawer-container">
    
    <!-- Backdrop Overlay -->
    <div id="filterBackdrop" class="filter-backdrop" onclick="FilterDrawer.close()"></div>
    
    <!-- The Actual Drawer -->
    <div id="filterDrawer" class="filter-drawer" role="dialog" aria-modal="true" aria-labelledby="drawerTitle">
      
      <!-- Fixed Header -->
      <div class="filter-drawer-header">
        <h2 id="drawerTitle" class="filter-drawer-title">
          {{ 'collections.filter.filter_and_sort' | t | default: 'Filtrowanie i sortowanie' }}
        </h2>
        <button class="filter-drawer-close" onclick="FilterDrawer.close()" type="button" aria-label="Zamknij filtry">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      
      <!-- Scrollable Content -->
      <div class="filter-drawer-content">
        
        <!-- Sort Section -->
        {% if has_sortby %}
          <div class="filter-section">
            <button class="filter-section-header" onclick="FilterDrawer.toggleSection('sort')" type="button">
              <span>{{ 'collections.filter.sort_title' | t | default: 'Sortuj' }}</span>
              <svg class="filter-section-arrow" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </button>
            <div class="filter-section-content" id="filterSectionSort">
              <div class="filter-options">
                {% for option in collection.sort_options %}
                  <label class="filter-option-item sort-option" data-sort-value="{{ option.value }}">
                    <input type="radio" 
                           name="sort_by" 
                           value="{{ option.value }}" 
                           {% if option.value == collection.sort_by %}checked{% endif %}
                           onchange="FilterDrawer.handleSort('{{ option.value }}')">
                    <span class="filter-option-label">{{ option.name }}</span>
                  </label>
                {% endfor %}
              </div>
            </div>
          </div>
        {% endif %}

        <!-- Filter Sections -->
        {% if has_filter and collection.filters.size > 0 %}
          {% for filter in collection.filters %}
            {% case filter.type %}
              {% when 'list' %}
                <div class="filter-section">
                  <button class="filter-section-header" onclick="FilterDrawer.toggleSection('{{ filter.label | handle }}')" type="button">
                    <span>{{ filter.label | escape }}</span>
                    <svg class="filter-section-arrow" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="6,9 12,15 18,9"></polyline>
                    </svg>
                  </button>
                  <div class="filter-section-content" id="filterSection{{ filter.label | handle | capitalize }}">
{% comment %} REPLACE the filter options section with this smart size sorting {% endcomment %}
                    <div class="filter-options">
                      {% comment %} Smart Size Sorting System {% endcomment %}
                      {% liquid
                        assign filter_handle = filter.label | handle
                        assign is_size_filter = false
                        
                     
                        assign size_keywords = 'size,sizes,rozmiar,rozmiary,taille,tailles,größe,größen,talla,tallas,tamanho,tamanhos'
                        assign size_keywords_array = size_keywords | split: ','
                        
                        for size_keyword in size_keywords_array
                          if filter_handle contains size_keyword
                            assign is_size_filter = true
                            break
                          endif
                        endfor
                      %}

                      {% if is_size_filter %}
                        {% comment %} SMART SIZE SORTING INCLUDING HALF SIZES {% endcomment %}
                        {% liquid
                       
                          assign clothing_sizes = 'XXXS,XXS,XS,S,M,L,XL,XXL,XXXL,4XL,5XL'
                          assign clothing_sizes_array = clothing_sizes | split: ','
                          
                     
                          assign clothing_size_items = ''
                          assign numeric_size_items = ''
                          assign other_size_items = ''
                          
    
                          for value in filter.values
                            assign size_upper = value.value | upcase | strip
                            assign is_clothing = false
                            assign is_numeric = false
                            
                
                            for clothing_size in clothing_sizes_array
                              if size_upper == clothing_size
                                assign is_clothing = true
                                assign clothing_size_items = clothing_size_items | append: size_upper | append: '|' | append: value.value | append: '|' | append: value.label | append: '|' | append: value.count | append: '|' | append: value.active | append: '|' | append: value.param_name | append: '||'
                                break
                              endif
                            endfor
                            
                            unless is_clothing
                  
                              assign has_decimal = false
                              if size_upper contains '.'
                                assign has_decimal = true
                              endif
                              if size_upper contains ','
                                assign has_decimal = true
                                assign size_upper = size_upper | replace: ',', '.'
                              endif
                              
                              assign size_as_number = size_upper | times: 1.0
                              if size_as_number > 0
                                assign is_numeric = true
                                if has_decimal
                                  assign sort_key = size_as_number | times: 10 | round
                                else
                                  assign sort_key = size_as_number | times: 10
                                endif
                                assign numeric_size_items = numeric_size_items | append: sort_key | append: '|' | append: value.value | append: '|' | append: value.label | append: '|' | append: value.count | append: '|' | append: value.active | append: '|' | append: value.param_name | append: '||'
                              endif
                            endunless
                            
                            unless is_clothing or is_numeric
                              assign other_size_items = other_size_items | append: value.label | append: '|' | append: value.value | append: '|' | append: value.label | append: '|' | append: value.count | append: '|' | append: value.active | append: '|' | append: value.param_name | append: '||'
                            endunless
                          endfor
                        %}

                        {% comment %} Render clothing sizes in predefined order {% endcomment %}
                        {% for clothing_size in clothing_sizes_array %}
                          {% assign clothing_array = clothing_size_items | split: '||' %}
                          {% for clothing_data in clothing_array %}
                            {% unless clothing_data == blank %}
                              {% assign parts = clothing_data | split: '|' %}
                              {% if parts[0] == clothing_size %}
                                <label class="filter-option-item {% if parts[4] == 'true' %}active{% endif %}" 
                                       {% if parts[3] == '0' and parts[4] != 'true' %}data-disabled="true"{% endif %}>
                                  <input type="checkbox"
                                         name="{{ parts[5] }}"
                                         value="{{ parts[1] }}"
                                         data-param="{{ parts[5] }}"
                                         data-value="{{ parts[1] }}"
                                         data-label="{{ parts[2] | escape }}"
                                         {% if parts[4] == 'true' %}checked{% endif %}
                                         {% if parts[3] == '0' and parts[4] != 'true' %}disabled{% endif %}
                                         onchange="FilterDrawer.handleFilterChange(this)">
                                  <span class="filter-option-checkbox"></span>
                                  <span class="filter-option-label">{{ parts[2] | escape }}</span>
                                  <span class="filter-option-count">({{ parts[3] }})</span>
                                </label>
                                {% break %}
                              {% endif %}
                            {% endunless %}
                          {% endfor %}
                        {% endfor %}

                        {% comment %} Render numeric sizes (including half sizes) in order {% endcomment %}
                        {% liquid
                          assign numeric_array = numeric_size_items | split: '||'
                          assign numeric_for_sort = ''
                          
                          for numeric_data in numeric_array
                            unless numeric_data == blank
                              assign parts = numeric_data | split: '|'
                              assign numeric_for_sort = numeric_for_sort | append: parts[0] | append: ','
                            endunless
                          endfor
                          
                          assign sorted_numerics = numeric_for_sort | split: ',' | compact | uniq | sort
                        %}

                        {% for sorted_num in sorted_numerics %}
                          {% unless sorted_num == blank %}
                            {% assign numeric_array = numeric_size_items | split: '||' %}
                            {% for numeric_data in numeric_array %}
                              {% unless numeric_data == blank %}
                                {% assign parts = numeric_data | split: '|' %}
                                {% if parts[0] == sorted_num %}
                                  <label class="filter-option-item {% if parts[4] == 'true' %}active{% endif %}" 
                                         {% if parts[3] == '0' and parts[4] != 'true' %}data-disabled="true"{% endif %}>
                                    <input type="checkbox"
                                           name="{{ parts[5] }}"
                                           value="{{ parts[1] }}"
                                           data-param="{{ parts[5] }}"
                                           data-value="{{ parts[1] }}"
                                           data-label="{{ parts[2] | escape }}"
                                           {% if parts[4] == 'true' %}checked{% endif %}
                                           {% if parts[3] == '0' and parts[4] != 'true' %}disabled{% endif %}
                                           onchange="FilterDrawer.handleFilterChange(this)">
                                    <span class="filter-option-checkbox"></span>
                                    <span class="filter-option-label">{{ parts[2] | escape }}</span>
                                    <span class="filter-option-count">({{ parts[3] }})</span>
                                  </label>
                                  {% break %}
                                {% endif %}
                              {% endunless %}
                            {% endfor %}
                          {% endunless %}
                        {% endfor %}

                        {% comment %} Render other sizes alphabetically {% endcomment %}
                        {% assign other_array = other_size_items | split: '||' %}
                        {% assign sorted_other = other_array | sort %}
                        {% for other_data in sorted_other %}
                          {% unless other_data == blank %}
                            {% assign parts = other_data | split: '|' %}
                            <label class="filter-option-item {% if parts[4] == 'true' %}active{% endif %}" 
                                   {% if parts[3] == '0' and parts[4] != 'true' %}data-disabled="true"{% endif %}>
                              <input type="checkbox"
                                     name="{{ parts[5] }}"
                                     value="{{ parts[1] }}"
                                     data-param="{{ parts[5] }}"
                                     data-value="{{ parts[1] }}"
                                     data-label="{{ parts[2] | escape }}"
                                     {% if parts[4] == 'true' %}checked{% endif %}
                                     {% if parts[3] == '0' and parts[4] != 'true' %}disabled{% endif %}
                                     onchange="FilterDrawer.handleFilterChange(this)">
                              <span class="filter-option-checkbox"></span>
                              <span class="filter-option-label">{{ parts[2] | escape }}</span>
                              <span class="filter-option-count">({{ parts[3] }})</span>
                            </label>
                          {% endunless %}
                        {% endfor %}

                      {% else %}
                        {% comment %} NON-SIZE FILTERS - Keep original sorting by count (most popular first) {% endcomment %}
                        {% assign sorted_values = filter.values | sort: 'count' | reverse %}
                        
                        {% for value in sorted_values %}
                          <label class="filter-option-item {% if value.active %}active{% endif %}" 
                                 {% if value.count == 0 and value.active == false %}data-disabled="true"{% endif %}>
                            <input type="checkbox"
                                   name="{{ value.param_name }}"
                                   value="{{ value.value }}"
                                   data-param="{{ value.param_name }}"
                                   data-value="{{ value.value }}"
                                   data-label="{{ value.label | escape }}"
                                   {% if value.active %}checked{% endif %}
                                   {% if value.count == 0 and value.active == false %}disabled{% endif %}
                                   onchange="FilterDrawer.handleFilterChange(this)">
                            <span class="filter-option-checkbox"></span>
                            <span class="filter-option-label">{{ value.label | escape }}</span>
                            <span class="filter-option-count">({{ value.count }})</span>
                          </label>
                        {% endfor %}
                      {% endif %}
                    </div>
                  </div>
                </div>
              {% when 'price_range' %}
                <div class="filter-section">
                  <button class="filter-section-header" onclick="FilterDrawer.toggleSection('price')" type="button">
                    <span>{{ filter.label | escape }}</span>
                    <svg class="filter-section-arrow" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="6,9 12,15 18,9"></polyline>
                    </svg>
                  </button>
                  <div class="filter-section-content" id="filterSectionPrice">
                    <div class="price-range-inputs">
                      <div class="price-input-group">
                        <label for="priceMin">{{ 'collections.filter.from' | t | default: 'Od' }}</label>
                        <input type="number" 
                               id="priceMin" 
                               placeholder="0"
                               min="0"
                               max="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                               value="{% if filter.min_value.value %}{{ filter.min_value.value | money_without_currency | replace: ',', '' | round }}{% endif %}">
                      </div>
                      <div class="price-input-group">
                        <label for="priceMax">{{ 'collections.filter.to' | t | default: 'Do' }}</label>
                        <input type="number" 
                               id="priceMax" 
                               placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                               min="0"
                               max="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                               value="{% if filter.max_value.value %}{{ filter.max_value.value | money_without_currency | replace: ',', '' | round }}{% endif %}">
                      </div>
                    </div>
                    <button type="button" class="price-apply-btn" onclick="FilterDrawer.applyPriceFilter()">
                      {{ 'collections.filter.apply' | t | default: 'Zastosuj' }}
                    </button>
                  </div>
                </div>
            {% endcase %}
          {% endfor %}
        {% endif %}
      </div>
      
      <!-- Fixed Footer -->
<!-- Fixed Footer -->
<div class="filter-drawer-footer">
  <button class="filter-apply-btn" onclick="FilterDrawer.close()" type="button">
    <span id="filterApplyText">Zobacz Wyniki</span>
  </button>
</div>
    </div>
  </div>
{% endif %}

<script>

  
// COMPLETE ENHANCED REAL-TIME FILTER SYSTEM WITH REQUEST MANAGEMENT
// This version properly handles concurrent requests and prevents race conditions

const FilterDrawer = {
  isOpen: false,
  isLoading: false,
  updateTimeout: null,
  currentRequest: null, // Track current fetch request
  requestController: null, // AbortController for current request
  pendingFilters: null, // Store filters to apply after current request
  requestQueue: [], // Queue for filter changes
  activeFilters: {
    sort: '{{ collection.sort_by | default: "manual" }}',
    filters: {}
  },
  
  init() {
    console.log('🚀 FilterDrawer System Starting...');
    
    // Add loading animation CSS
    if (!document.getElementById('filter-drawer-animations')) {
      const style = document.createElement('style');
      style.id = 'filter-drawer-animations';
      style.innerHTML = `
        @keyframes pulse {
          0% { opacity: 0.6; }
          50% { opacity: 1; }
          100% { opacity: 0.6; }
        }
        .drawer-loading-indicator {
          animation: pulse 1.5s ease-in-out infinite;
        }
      `;
      document.head.appendChild(style);
    }
    
    // Load current state from URL
    this.loadFiltersFromURL();
    
    // Disable conflicting theme filters
    this.disableThemeFilters();
    
    // Setup all event listeners
    this.setupEventListeners();
    
    // Move drawer to body level
    this.createBodyContainer();
    
    // Initialize drawer state
    this.updateDrawerState();
    
    // Setup real-time updates
    this.setupRealTimeUpdates();
    
    // Initialize current filters display
    this.updateCurrentFiltersDisplay();
    
    console.log('✅ FilterDrawer System Ready');
  },
  
  setupRealTimeUpdates() {
    const filterContainer = document.getElementById('filterDrawer');
    if (!filterContainer) return;
    
    // Use event delegation with immediate feedback
    filterContainer.addEventListener('change', (e) => {
      if (e.target.matches('input[type="checkbox"], input[type="radio"]')) {
        // Provide immediate visual feedback
        this.updateVisualState(e.target);
        // Handle the actual filter change
        this.handleRealTimeChange(e.target);
      }
    });
    
    // Handle price input changes with better debouncing
    const priceInputs = filterContainer.querySelectorAll('#priceMin, #priceMax');
    priceInputs.forEach(input => {
      let priceTimeout;
      
      input.addEventListener('input', () => {
        // Clear previous timeout for this specific input
        if (priceTimeout) clearTimeout(priceTimeout);
        
        // Set new timeout
        priceTimeout = setTimeout(() => {
          this.applyPriceFilter();
        }, 800); // Slightly longer delay for price inputs
      });
      
      // Apply immediately on Enter key
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          if (priceTimeout) clearTimeout(priceTimeout);
          this.applyPriceFilter();
        }
      });
      
      // Apply when input loses focus
      input.addEventListener('blur', () => {
        if (priceTimeout) clearTimeout(priceTimeout);
        // Small delay to allow for clicking other elements
        setTimeout(() => {
          this.applyPriceFilter();
        }, 200);
      });
    });
  },
  
  updateVisualState(element) {
    // Provide immediate visual feedback
    const filterItem = element.closest('.filter-option-item');
    if (!filterItem) return;
    
    if (element.type === 'checkbox') {
      if (element.checked) {
        filterItem.classList.add('active');
      } else {
        filterItem.classList.remove('active');
      }
    }
  },
  
  handleRealTimeChange(element) {
    // Cancel any pending debounced update
    if (this.updateTimeout) {
      clearTimeout(this.updateTimeout);
      this.updateTimeout = null;
    }
    
    // Update filter state immediately
    if (element.type === 'checkbox') {
      this.updateFilterState(element);
      // Apply with smart debouncing
      this.smartApplyFilters();
    } else if (element.type === 'radio' && element.name === 'sort_by') {
      this.activeFilters.sort = element.value;
      // Sorting changes should apply immediately
      this.applyFiltersWithCancellation();
    }
  },
  
  updateFilterState(checkbox) {
    const param = checkbox.dataset.param;
    const value = checkbox.dataset.value;
    
    if (!param || !value) {
      console.error('Missing param or value for filter:', checkbox);
      return;
    }
    
    if (!this.activeFilters.filters[param]) {
      this.activeFilters.filters[param] = [];
    }
    
    if (checkbox.checked) {
      if (!this.activeFilters.filters[param].includes(value)) {
        this.activeFilters.filters[param].push(value);
      }
    } else {
      const index = this.activeFilters.filters[param].indexOf(value);
      if (index > -1) {
        this.activeFilters.filters[param].splice(index, 1);
        if (this.activeFilters.filters[param].length === 0) {
          delete this.activeFilters.filters[param];
        }
      }
    }
  },
  
  smartApplyFilters() {
    // If a request is in progress, queue this update
    if (this.isLoading) {
      // Store the current filter state to apply after current request
      this.pendingFilters = JSON.parse(JSON.stringify(this.activeFilters));
      console.log('📋 Queued filter update for after current request');
      return;
    }
    
    // Otherwise, apply with a short debounce
    if (this.updateTimeout) {
      clearTimeout(this.updateTimeout);
    }
    
    this.updateTimeout = setTimeout(() => {
      this.applyFiltersWithCancellation();
    }, 400); // Short delay for multiple quick selections
  },
  
  applyFiltersWithCancellation() {
    // Cancel any pending debounced update
    if (this.updateTimeout) {
      clearTimeout(this.updateTimeout);
      this.updateTimeout = null;
    }
    
    // Cancel any in-flight request
    if (this.requestController) {
      console.log('🛑 Cancelling previous request');
      this.requestController.abort();
      this.requestController = null;
      this.isLoading = false;
    }
    
    // Apply the filters
    this.applyFilters();
  },
  
  debounceUpdate(callback, delay) {
    if (this.updateTimeout) {
      clearTimeout(this.updateTimeout);
    }
    this.updateTimeout = setTimeout(callback, delay);
  },
  
  disableThemeFilters() {
    const themeSelectors = [
      '[data-wau-slideout-target="collection-filters"]:not(.modern-filter-button)',
      '.slideout__trigger-filters:not(.modern-filter-button)',
      '.slideout[data-wau-slideout="collection-filters"]:not(#filterDrawerContainer *)',
      '.filter-drawer__filtering__results:not(.modern-current-filters)',
      '.collection__page--topbar .button:not(.modern-filter-button)',
      '.collection__horizontal-toolbar .slideout__trigger-filters:not(.modern-filter-button)',
      '.js-filter',
      '.js-current-filter'
    ];
    
    themeSelectors.forEach(selector => {
      try {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
          if (el.classList.contains('modern-filter-button') || 
              el.closest('#filterDrawerContainer')) {
            return;
          }
          
          if (el.closest('.product-listing, .product-item, .product-loop, .grid__wrapper')) {
            return;
          }
          
          const clone = el.cloneNode(true);
          clone.style.display = 'none';
          clone.style.visibility = 'hidden';
          clone.style.opacity = '0';
          clone.style.pointerEvents = 'none';
          if (el.parentNode) {
            el.parentNode.replaceChild(clone, el);
          }
        });
      } catch (e) {
        console.warn('Could not disable selector:', selector);
      }
    });
    
    if (window.WAU && window.WAU.Slideout) {
      const originalInit = window.WAU.Slideout.init;
      window.WAU.Slideout.init = function(target) {
        if (target === 'collection-filters') {
          console.log('🚫 Blocked WAU slideout for collection-filters');
          return;
        }
        return originalInit.call(this, target);
      };
    }
    
    if (window.CollectionFilters) {
      window.CollectionFilters.renderPage = function() {
        console.log('🚫 Blocked CollectionFilters.renderPage');
        return;
      };
    }
  },
  
  createBodyContainer() {
    const container = document.getElementById('filterDrawerContainer');
    if (container && !container.parentElement.matches('body')) {
      document.body.appendChild(container);
      console.log('✅ Drawer moved to body level');
    }
  },
  
  setupEventListeners() {
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.isOpen) {
        // Allow escape key to force close even during loading
        this.close(true);
      }
    });
    
    window.addEventListener('popstate', (e) => {
      // Cancel any pending requests when navigating
      if (this.requestController) {
        this.requestController.abort();
      }
      this.loadFiltersFromURL();
      this.updateDrawerState();
      this.applyFilters(false);
    });
    
    document.addEventListener('touchmove', (e) => {
      if (this.isOpen && !e.target.closest('.filter-drawer')) {
        e.preventDefault();
      }
    }, { passive: false });
    
    // Setup backdrop click handler
    const backdrop = document.getElementById('filterBackdrop');
    if (backdrop) {
      backdrop.onclick = (e) => {
        // Only close if not loading
        if (!this.isLoading) {
          this.close();
        } else {
          console.log('⏳ Click X button to close during loading');
          // Optional: show a message to user
          this.showCloseHint();
        }
      };
    }
    
    // Setup close button to force close
    const closeButton = document.querySelector('.filter-drawer-close');
    if (closeButton) {
      closeButton.onclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Force close even during loading
        this.close(true);
      };
    }
  },
  
  showCloseHint() {
    // Show a temporary hint to use X button
    const hint = document.querySelector('.drawer-loading-indicator');
    if (hint) {
      const originalText = hint.innerHTML;
      hint.innerHTML = '<span>Użyj X aby zamknąć</span>';
      hint.style.backgroundColor = '#dc2626';
      setTimeout(() => {
        hint.innerHTML = originalText;
        hint.style.backgroundColor = '#1d4ed8';
      }, 2000);
    }
  },
  
  open() {
    // Allow opening even if loading - better UX
    const container = document.getElementById('filterDrawerContainer');
    const backdrop = document.getElementById('filterBackdrop');
    const drawer = document.getElementById('filterDrawer');
    
    if (!container || !backdrop || !drawer) {
      console.error('❌ Drawer elements not found');
      return;
    }
    
    if (!container.parentElement.matches('body')) {
      document.body.appendChild(container);
    }
    
    this.updateDrawerState();
    this.scrollPosition = window.pageYOffset;
    
    container.style.display = 'block';
    container.style.position = 'fixed';
    container.style.top = '0';
    container.style.left = '0';
    container.style.width = '100vw';
    container.style.height = '100vh';
    container.style.zIndex = '999999';
    
    requestAnimationFrame(() => {
      backdrop.classList.add('active');
      drawer.classList.add('active');
    });
    
    document.body.style.overflow = 'hidden';
    document.body.style.position = 'fixed';
    document.body.style.top = `-${this.scrollPosition}px`;
    document.body.style.width = '100%';
    
    this.isOpen = true;
    
    setTimeout(() => {
      const firstInput = drawer.querySelector('input:not([disabled]), button:not([disabled])');
      if (firstInput) firstInput.focus();
    }, 100);
    
    console.log('✅ Drawer opened' + (this.isLoading ? ' (loading in progress)' : ''));
  },
  
  close(forceClose = false) {
    // Don't allow backdrop clicks to close during loading unless forced
    if (this.isLoading && !forceClose) {
      console.log('⏳ Cannot close drawer while loading (use X button to force close)');
      return;
    }
    
    const container = document.getElementById('filterDrawerContainer');
    const backdrop = document.getElementById('filterBackdrop');
    const drawer = document.getElementById('filterDrawer');
    
    if (!container || !backdrop || !drawer) return;
    
    backdrop.classList.remove('active');
    drawer.classList.remove('active');
    
    setTimeout(() => {
      container.style.display = 'none';
    }, 300);
    
    document.body.style.overflow = '';
    document.body.style.position = '';
    document.body.style.top = '';
    document.body.style.width = '';
    
    if (this.scrollPosition !== undefined) {
      window.scrollTo(0, this.scrollPosition);
    }
    
    this.isOpen = false;
    
    // Don't cancel the request - let it complete in background
    console.log('✅ Drawer closed' + (this.isLoading && forceClose ? ' (forced during loading)' : ''));
    
    const filterButton = document.querySelector('.modern-filter-button');
    if (filterButton) filterButton.focus();
  },
  
  toggleSection(sectionId) {
    const content = document.getElementById(`filterSection${sectionId.charAt(0).toUpperCase() + sectionId.slice(1)}`);
    const header = event.target.closest('.filter-section-header');
    const arrow = header?.querySelector('.filter-section-arrow');
    
    if (!content || !header || !arrow) return;
    
    const isOpen = content.classList.contains('active');
    
    if (isOpen) {
      content.classList.remove('active');
      arrow.classList.remove('rotated');
      content.style.maxHeight = '0';
    } else {
      content.classList.add('active');
      arrow.classList.add('rotated');
      content.style.maxHeight = content.scrollHeight + 'px';
    }
  },
  
  handleSort(sortValue) {
    this.activeFilters.sort = sortValue;
    this.applyFiltersWithCancellation();
  },
  
  handleFilterChange(checkbox) {
    this.updateFilterState(checkbox);
    this.smartApplyFilters();
  },
  
  applyPriceFilter() {
    const minInput = document.getElementById('priceMin');
    const maxInput = document.getElementById('priceMax');
    
    if (!minInput || !maxInput) return;
    
    const minValue = parseInt(minInput.value) || 0;
    const maxValue = parseInt(maxInput.value) || 0;
    
    // Check if values actually changed
    const currentMin = this.activeFilters.filters['filter.v.price.gte']?.[0] || 0;
    const currentMax = this.activeFilters.filters['filter.v.price.lte']?.[0] || 0;
    
    if (currentMin === minValue * 100 && currentMax === maxValue * 100) {
      console.log('💰 Price values unchanged, skipping update');
      return;
    }
    
    // Remove existing price filters
    Object.keys(this.activeFilters.filters).forEach(key => {
      if (key.includes('price')) {
        delete this.activeFilters.filters[key];
      }
    });
    
    // Add new price filters
    if (minValue > 0) {
      this.activeFilters.filters['filter.v.price.gte'] = [minValue * 100];
    }
    
    if (maxValue > 0) {
      this.activeFilters.filters['filter.v.price.lte'] = [maxValue * 100];
    }
    
    this.applyFiltersWithCancellation();
  },
  
  removeFilter(param, value) {
    if (this.activeFilters.filters[param]) {
      const index = this.activeFilters.filters[param].indexOf(value);
      if (index > -1) {
        this.activeFilters.filters[param].splice(index, 1);
        if (this.activeFilters.filters[param].length === 0) {
          delete this.activeFilters.filters[param];
        }
      }
    }
    
    this.updateDrawerState();
    this.applyFiltersWithCancellation();
  },
  
  clearAll() {
    // Cancel any pending requests
    if (this.requestController) {
      this.requestController.abort();
    }
    
    this.activeFilters.filters = {};
    this.activeFilters.sort = 'manual';
    
    this.updateDrawerState();
    
    const url = new URL(window.location.href);
    url.search = '';
    window.location.href = url.toString();
  },
  
  updateDrawerState() {
    document.querySelectorAll('#filterDrawer .filter-option-item').forEach(filterItem => {
      const checkbox = filterItem.querySelector('input[type="checkbox"]');
      if (!checkbox) return;
      
      const param = checkbox.dataset.param;
      const value = checkbox.dataset.value;
      
      const isActive = this.activeFilters.filters[param] && 
                      this.activeFilters.filters[param].includes(value);
      
      checkbox.checked = isActive;
      
      if (isActive) {
        filterItem.classList.add('active');
      } else {
        filterItem.classList.remove('active');
      }
    });
    
    document.querySelectorAll('#filterDrawer .sort-option input[type="radio"]').forEach(radio => {
      radio.checked = radio.value === this.activeFilters.sort;
    });
    
    const priceGte = this.activeFilters.filters['filter.v.price.gte'];
    const priceLte = this.activeFilters.filters['filter.v.price.lte'];
    
    const minInput = document.getElementById('priceMin');
    const maxInput = document.getElementById('priceMax');
    
    if (minInput) {
      minInput.value = priceGte ? priceGte[0] / 100 : '';
    }
    if (maxInput) {
      maxInput.value = priceLte ? priceLte[0] / 100 : '';
    }
    
    console.log('🔄 Drawer state updated');
  },
  
  loadFiltersFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    
    this.activeFilters.filters = {};
    this.activeFilters.sort = 'manual';
    
    const sortBy = urlParams.get('sort_by');
    if (sortBy) {
      this.activeFilters.sort = sortBy;
    }
    
    urlParams.forEach((value, key) => {
      if (key.startsWith('filter.')) {
        if (!this.activeFilters.filters[key]) {
          this.activeFilters.filters[key] = [];
        }
        if (!this.activeFilters.filters[key].includes(value)) {
          this.activeFilters.filters[key].push(value);
        }
      }
    });
    
    console.log('📋 Loaded filters from URL:', this.activeFilters);
  },
  
  applyFilters(pushState = true) {
    // Prevent multiple simultaneous requests
    if (this.isLoading && this.requestController) {
      console.log('⏳ Request already in progress, queueing...');
      this.pendingFilters = JSON.parse(JSON.stringify(this.activeFilters));
      return;
    }
    
    this.isLoading = true;
    
    // Create new AbortController for this request
    this.requestController = new AbortController();
    
    // Build URL
    const url = new URL(window.location.href);
    url.search = '';
    
    if (this.activeFilters.sort && this.activeFilters.sort !== 'manual') {
      url.searchParams.set('sort_by', this.activeFilters.sort);
    }
    
    Object.keys(this.activeFilters.filters).forEach(param => {
      this.activeFilters.filters[param].forEach(value => {
        url.searchParams.append(param, value);
      });
    });
    
    console.log('🔄 Applying filters:', url.toString());
    
    this.showLoading();
    
    // Set a timeout for the request
    const timeoutId = setTimeout(() => {
      if (this.requestController) {
        this.requestController.abort();
        console.log('⏱️ Request timed out');
      }
    }, 10000);
    
    // Make the fetch request
    fetch(url.toString(), {
      signal: this.requestController.signal,
      headers: { 
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'text/html'
      }
    })
    .then(response => {
      clearTimeout(timeoutId);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      return response.text();
    })
    .then(html => {
      // Request completed successfully
      this.requestController = null;
      this.isLoading = false;
      
      this.updateContent(html);
      
      if (pushState) {
        window.history.pushState({}, '', url.toString());
      }
      
      this.hideLoading();
      this.updateCurrentFiltersDisplay();
      
      console.log('✅ Filters applied successfully');
      
      // Check if there are pending filters to apply
      if (this.pendingFilters) {
        console.log('📋 Applying queued filters');
        const pending = this.pendingFilters;
        this.pendingFilters = null;
        this.activeFilters = pending;
        // Apply pending filters after a short delay
        setTimeout(() => {
          this.applyFilters();
        }, 100);
      }
    })
    .catch(error => {
      clearTimeout(timeoutId);
      this.requestController = null;
      this.isLoading = false;
      this.hideLoading();
      
      if (error.name === 'AbortError') {
        console.log('🛑 Request was cancelled');
        // Don't do anything else for cancelled requests
      } else {
        console.error('❌ Filter error:', error);
        // Only fallback to page reload for actual errors
        window.location.href = url.toString();
      }
    });
  },
  
  updateContent(html) {
    const parser = new DOMParser();
    const newDoc = parser.parseFromString(html, 'text/html');
    
    const currentGrid = document.querySelector('#main-collection-product-grid');
    const newGrid = newDoc.querySelector('#main-collection-product-grid');
    
    if (currentGrid && newGrid) {
      const scrollY = window.scrollY;
      
      currentGrid.style.transition = 'opacity 0.2s ease';
      currentGrid.style.opacity = '0.5';
      
      setTimeout(() => {
        currentGrid.innerHTML = newGrid.innerHTML;
        currentGrid.style.opacity = '1';
        
        if (!this.isOpen) {
          window.scrollTo(0, scrollY);
        }
        
        setTimeout(() => {
          currentGrid.style.transition = '';
        }, 200);
      }, 100);
    }
    
    let productCount = 0;
    const countElement = newDoc.getElementById('modernProductCount');
    if (countElement) {
      const match = countElement.textContent.match(/(\d+)/);
      if (match) {
        productCount = parseInt(match[1]);
      }
    }
    
    if (productCount === 0) {
      productCount = newDoc.querySelectorAll('.product-listing, .product-item, [data-product-id]').length;
    }
    
    this.updateProductCountDisplay(productCount);
    this.updateFilterCounts(newDoc);
    
    const emptyMessage = currentGrid.querySelector('.js-coll-empty-filter');
    if (productCount === 0 && emptyMessage) {
      emptyMessage.style.display = 'block';
    } else if (emptyMessage) {
      emptyMessage.style.display = 'none';
    }
    
    if (window.WAU) {
      if (window.WAU.Quickshop) window.WAU.Quickshop.init();
      if (window.WAU.ProductGridVideo) window.WAU.ProductGridVideo.init();
    }
  },
  
  updateProductCountDisplay(count) {
    const countElement = document.getElementById('modernProductCount');
    if (countElement) {
      let countText;
      if (count === 0) {
        countText = 'Brak produktów';
      } else if (count === 1) {
        countText = '1 produkt';
      } else if (count >= 2 && count <= 4) {
        countText = `${count} produkty`;
      } else {
        countText = `${count} produktów`;
      }
      countElement.textContent = countText;
      console.log(`📊 Product count: ${countText}`);
    }
  },
  
  updateFilterCounts(newDoc) {
    const newDrawer = newDoc.querySelector('#filterDrawer');
    if (!newDrawer) return;
    
    const newSections = newDrawer.querySelectorAll('.filter-section');
    const currentSections = document.querySelectorAll('#filterDrawer .filter-section');
    
    newSections.forEach((newSection, sectionIndex) => {
      const currentSection = currentSections[sectionIndex];
      if (!currentSection) return;
      
      const newOptions = newSection.querySelectorAll('.filter-option-item');
      const currentOptions = currentSection.querySelectorAll('.filter-option-item');
      
      newOptions.forEach((newOption, optionIndex) => {
        const currentOption = currentOptions[optionIndex];
        if (!currentOption) return;
        
        const newCount = newOption.querySelector('.filter-option-count');
        const currentCount = currentOption.querySelector('.filter-option-count');
        if (newCount && currentCount) {
          currentCount.textContent = newCount.textContent;
        }
        
        const newInput = newOption.querySelector('input');
        const currentInput = currentOption.querySelector('input');
        if (newInput && currentInput) {
          const newDisabled = newInput.disabled || newOption.hasAttribute('data-disabled');
          const countText = newCount ? newCount.textContent : '(0)';
          const count = parseInt(countText.match(/\d+/)?.[0] || '0');
          
          if ((newDisabled || count === 0) && !currentInput.checked) {
            currentInput.disabled = true;
            currentOption.setAttribute('data-disabled', 'true');
            currentOption.style.opacity = '0.5';
            currentOption.style.pointerEvents = 'none';
          } else {
            currentInput.disabled = false;
            currentOption.removeAttribute('data-disabled');
            currentOption.style.opacity = '';
            currentOption.style.pointerEvents = '';
          }
        }
      });
    });
  },
  
  updateCurrentFiltersDisplay() {
    const container = document.getElementById('modernCurrentFilters');
    const list = document.getElementById('modernCurrentFiltersList');
    
    if (!list || !container) return;
    
    list.innerHTML = '';
    
    let hasFilters = false;
    
    Object.keys(this.activeFilters.filters).forEach(param => {
      this.activeFilters.filters[param].forEach(value => {
        hasFilters = true;
        
        const checkbox = document.querySelector(`[data-param="${param}"][data-value="${value}"]`);
        let label = checkbox ? checkbox.dataset.label : value;
        
        if (param === 'filter.v.price.gte') {
          label = `Od ${value / 100} zł`;
        } else if (param === 'filter.v.price.lte') {
          label = `Do ${value / 100} zł`;
        }
        
        const li = document.createElement('li');
        li.className = 'modern-current-filter-item';
        li.innerHTML = `
          <button class="modern-current-filter-tag" 
                  type="button"
                  data-filter-param="${param}"
                  data-filter-value="${value}"
                  onclick="FilterDrawer.removeFilter('${param}', '${value}')"
                  aria-label="Usuń filtr ${label}">
            <span class="filter-tag-text">${label}</span>
            <span class="modern-filter-remove-icon" aria-hidden="true">×</span>
          </button>
        `;
        list.appendChild(li);
      });
    });
    
    if (hasFilters) {
      const clearLi = document.createElement('li');
      clearLi.className = 'modern-current-filter-item modern-clear-all-desktop';
      clearLi.innerHTML = `
        <button class="modern-clear-all-filters" 
                type="button" 
                onclick="FilterDrawer.clearAll()"
                aria-label="Wyczyść wszystkie filtry">
          <span class="clear-all-text">Wyczyść wszystkie</span>
        </button>
      `;
      list.appendChild(clearLi);
      container.style.display = 'block';
    } else {
      container.style.display = 'none';
    }
  },
  
  showLoading() {
    const wrapper = document.querySelector('.modern-collection-filters');
    if (wrapper) {
      wrapper.classList.add('loading');
    }
    
    const grid = document.querySelector('#main-collection-product-grid');
    if (grid) {
      grid.style.opacity = '0.5';
      grid.style.pointerEvents = 'none';
    }
    
    // Show loading indicator in drawer but DON'T disable it
    const drawer = document.querySelector('#filterDrawer');
    if (drawer) {
      // Add visual loading indicator without blocking interactions
      if (!drawer.querySelector('.drawer-loading-indicator')) {
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'drawer-loading-indicator';
        loadingDiv.innerHTML = '<span>Aktualizowanie...</span>';
        loadingDiv.style.cssText = `
          position: absolute;
          top: 10px;
          right: 60px;
          background: #1d4ed8;
          color: white;
          padding: 5px 15px;
          border-radius: 20px;
          font-size: 12px;
          z-index: 1000;
          animation: pulse 1.5s ease-in-out infinite;
        `;
        drawer.querySelector('.filter-drawer-header')?.appendChild(loadingDiv);
      }
    }
  },
  
  hideLoading() {
    const wrapper = document.querySelector('.modern-collection-filters');
    if (wrapper) {
      wrapper.classList.remove('loading');
    }
    
    const grid = document.querySelector('#main-collection-product-grid');
    if (grid) {
      grid.style.opacity = '1';
      grid.style.pointerEvents = '';
    }
    
    // Remove loading indicator from drawer
    const loadingIndicator = document.querySelector('.drawer-loading-indicator');
    if (loadingIndicator) {
      loadingIndicator.remove();
    }
  }
};

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    FilterDrawer.init();
    
    const filterButton = document.querySelector('.modern-filter-button');
    if (filterButton) {
      const newButton = filterButton.cloneNode(true);
      filterButton.parentNode.replaceChild(newButton, filterButton);
      
      newButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        FilterDrawer.open();
      });
    }
    
    // Override inline onclick handlers for backdrop and close button
    const backdrop = document.getElementById('filterBackdrop');
    if (backdrop) {
      backdrop.onclick = null; // Remove inline handler
      backdrop.addEventListener('click', function(e) {
        if (!FilterDrawer.isLoading) {
          FilterDrawer.close();
        } else {
          FilterDrawer.showCloseHint();
        }
      });
    }
    
    const closeButton = document.querySelector('.filter-drawer-close');
    if (closeButton) {
      closeButton.onclick = null; // Remove inline handler
      closeButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        FilterDrawer.close(true); // Force close
      });
    }
    
    window.FilterDrawer = FilterDrawer;
  }, 100);
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
  if (FilterDrawer.updateTimeout) {
    clearTimeout(FilterDrawer.updateTimeout);
  }
  if (FilterDrawer.requestController) {
    FilterDrawer.requestController.abort();
  }
});

// Handle Shopify theme editor events
document.addEventListener('shopify:section:load', function(event) {
  if (event.target.querySelector('[data-section-type="collection"]')) {
    setTimeout(() => {
      FilterDrawer.init();
    }, 100);
  }
});

document.addEventListener('shopify:section:unload', function(event) {
  if (event.target.querySelector('[data-section-type="collection"]')) {
    if (FilterDrawer.updateTimeout) {
      clearTimeout(FilterDrawer.updateTimeout);
    }
    if (FilterDrawer.requestController) {
      FilterDrawer.requestController.abort();
    }
  }
});
</script>

{% style %}
/* ENHANCED FILTER DRAWER STYLES - Complete Code */

/* Scoped container to prevent style conflicts */
.modern-collection-filters {
  --filter-primary: #1d4ed8;
  --filter-dark: #323232;
  --filter-light: #eeeeee;
  --filter-white: #ffffff;
  position: relative;
}

/* Only apply box-sizing to our filter elements */
.modern-collection-filters .modern-filter-topbar,
.modern-collection-filters .modern-filter-topbar *,
.modern-collection-filters .modern-current-filters,
.modern-collection-filters .modern-current-filters *,
.filter-drawer-container,
.filter-drawer-container * {
  box-sizing: border-box;
}

/* Filter Top Bar - scoped to avoid conflicts */
.modern-collection-filters .modern-filter-topbar {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  /* margin-bottom: 20px !important; */
  padding: 16px 0 !important;
  border-bottom: 1px solid var(--filter-light) !important;
}

.modern-collection-filters .modern-filter-button {
  display: inline-flex !important;
  align-items: center !important;
  justify-content: center !important;
  min-height: 40px !important;
  padding: 8px 16px !important;
  border: 1px solid var(--text-color, var(--filter-dark)) !important;
  border-radius: 4px !important;
  background: transparent !important;
  color: var(--text-color, var(--filter-dark)) !important;
  font-size: 14px !important;
  font-weight: 700 !important;
  text-transform: uppercase !important;
  letter-spacing: 0.5px !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
  text-decoration: none !important;
  font-family: inherit !important;
  line-height: normal !important;
  margin: 0 !important;
  outline: none !important;
  box-shadow: none !important;
  vertical-align: baseline !important;
  white-space: nowrap !important;
}

.modern-collection-filters .modern-filter-button:hover,
.modern-collection-filters .modern-filter-button:focus {
  background: var(--text-color, var(--filter-dark)) !important;
  color: var(--bg-color, var(--filter-white)) !important;
  transform: translateY(-1px) !important;
  outline: none !important;
  box-shadow: none !important;
}

.modern-collection-filters .modern-filter-button:active {
  transform: translateY(0) !important;
  transition: all 0.1s ease !important;
}

.modern-collection-filters .modern-filter-button svg {
  margin-left: 8px !important;
  width: 12px !important;
  height: 12px !important;
}

.modern-collection-filters .modern-product-count {
  font-size: 16px !important;
  color: var(--filter-dark) !important;
  font-weight: bold !important;
}

/* Current Filters Display - scoped */
.modern-collection-filters .modern-current-filters {
  margin: 16px 0 24px 0 !important;
  padding: 0 !important;
}

.modern-collection-filters .modern-current-filters-title {
  font-size: 12px !important;
  font-weight: 600 !important;
  color: var(--filter-dark) !important;
  margin: 0 0 8px 0 !important;
  text-transform: uppercase !important;
  letter-spacing: 0.5px !important;
}

.modern-collection-filters .modern-current-filters-list {
  list-style: none !important;
  margin: 0 !important;
  padding: 0 !important;
  display: flex !important;
  flex-wrap: wrap !important;
  gap: 6px !important;
}

.modern-collection-filters .modern-current-filter-item {
  margin: 0 !important;
  padding: 0 !important;
}

/* Enhanced filter tags with proper icon positioning */
.modern-collection-filters .modern-current-filter-tag {
  border: 1px solid var(--text-color) !important;
  padding: 6px 12px !important;
  display: inline-flex !important;
  align-items: center !important;
  justify-content: space-between !important;
  margin: 0 !important;
  border-radius: 16px !important;
  background: transparent !important;
  color: var(--filter-primary) !important;
  font-size: 12px !important;
  font-weight: 500 !important;
  text-decoration: none !important;
  transition: all 0.2s ease !important;
  cursor: pointer !important;
  line-height: 1.4 !important;
  gap: 8px !important;
  max-width: 200px !important;
  min-width: 60px !important;
}

.modern-collection-filters .modern-current-filter-tag:hover {
  background: var(--text-color, var(--filter-dark)) !important;
  color: var(--bg-color, var(--filter-white)) !important;
  transform: translateY(-1px) !important;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
}

/* Enhanced remove icon - properly positioned on the right */
.modern-collection-filters .modern-filter-remove-icon {
  margin-left: 0 !important;
  font-size: 14px !important;
  font-weight: bold !important;
  opacity: 1 !important;
  display: inline-flex !important;
  align-items: center !important;
  justify-content: center !important;
  width: 18px !important;
  height: 18px !important;
  border-radius: 50% !important;
  background: rgba(0, 0, 0, 0.1) !important;
  transition: all 0.2s ease !important;
  flex-shrink: 0 !important;
  order: 2 !important;
}

/* Remove icon hover state */
.modern-collection-filters .modern-current-filter-tag:hover .modern-filter-remove-icon {
  background: rgba(255, 255, 255, 0.3) !important;
  color: inherit !important;
  transform: scale(1.1) !important;
}

/* Enhanced "Clear All" button */
.modern-collection-filters .modern-clear-all-filters {
  border: 2px solid #dc2626 !important;
  padding: 8px 16px !important;
  display: inline-flex !important;
  align-items: center !important;
  justify-content: space-between !important;
  margin: 0 !important;
  border-radius: 20px !important;
  background: transparent !important;
  color: #dc2626 !important;
  font-size: 12px !important;
  font-weight: 700 !important;
  text-decoration: none !important;
  transition: all 0.2s ease !important;
  cursor: pointer !important;
  line-height: 1.4 !important;
  text-transform: uppercase !important;
  letter-spacing: 0.5px !important;
  gap: 8px !important;
  min-height: 36px !important;
  max-width: 180px !important;
  min-width: 120px !important;
}

.modern-collection-filters .modern-clear-all-filters:hover {
  background: #dc2626 !important;
  color: var(--bg-color, var(--filter-white)) !important;
  transform: translateY(-2px) !important;
  box-shadow: 0 4px 8px rgba(220, 38, 38, 0.3) !important;
}

/* Enhanced × icon for clear all button */
.modern-collection-filters .modern-clear-all-filters::before {
  content: '×' !important;
  margin-right: 0 !important;
  font-size: 16px !important;
  font-weight: bold !important;
  display: inline-flex !important;
  align-items: center !important;
  justify-content: center !important;
  width: 20px !important;
  height: 20px !important;
  border-radius: 50% !important;
  background: rgba(220, 38, 38, 0.1) !important;
  transition: all 0.2s ease !important;
  order: 2 !important;
  flex-shrink: 0 !important;
}

.modern-collection-filters .modern-clear-all-filters:hover::before {
  background: rgba(255, 255, 255, 0.2) !important;
  transform: rotate(90deg) !important;
}

/* Text elements inside filter tags */
.modern-collection-filters .filter-tag-text,
.modern-collection-filters .clear-all-text {
  flex: 1 !important;
  text-align: left !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  order: 1 !important;
}

/* DRAWER CONTAINER - Completely isolated */
.filter-drawer-container {
  display: none;
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100vw !important;
  height: 100vh !important;
  z-index: 999999 !important;
  pointer-events: none;
  font-family: inherit;
}

/* Backdrop Overlay */
.filter-drawer-container .filter-backdrop {
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;
  background: rgba(0, 0, 0, 0.5) !important;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: auto;
  backdrop-filter: blur(2px);
  -webkit-backdrop-filter: blur(2px);
}

.filter-drawer-container .filter-backdrop.active {
  opacity: 1;
}

/* The Actual Drawer */
.filter-drawer-container .filter-drawer {
  position: absolute !important;
  top: 0 !important;
  right: 0 !important;
  width: 400px !important;
  height: 100% !important;
  background: #ffffff !important;
  box-shadow: -4px 0 20px rgba(0, 0, 0, 0.15) !important;
  transform: translateX(100%);
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  flex-direction: column;
  pointer-events: auto;
  color: var(--filter-dark);
  border-left: 1px solid #e5e7eb !important;
}

.filter-drawer-container .filter-drawer.active {
  transform: translateX(0);
}

/* Fixed Header */
.filter-drawer-container .filter-drawer-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 24px;
  border-bottom: 1px solid #e5e7eb;
  background: #ffffff !important;
  flex-shrink: 0;
  min-height: 70px;
}

.filter-drawer-container .filter-drawer-title {
  font-size: 18px !important;
  font-weight: 600 !important;
  color: var(--filter-dark) !important;
  margin: 0 !important;
}

.filter-drawer-container .filter-drawer-close {
  background: none !important;
  border: none !important;
  padding: 8px !important;
  cursor: pointer;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
}

.filter-drawer-container .filter-drawer-close:hover {
  background: var(--filter-light) !important;
}

.filter-drawer-container .filter-drawer-close svg {
  width: 20px;
  height: 20px;
  color: #323232 !important;
  stroke: #323232 !important;
}

/* Scrollable Content */
.filter-drawer-container .filter-drawer-content {
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 0 0 100px 0;
  -webkit-overflow-scrolling: touch;
}

/* Enhanced scrollbar for webkit browsers */
.filter-drawer-container .filter-drawer-content::-webkit-scrollbar {
  width: 8px;
}

.filter-drawer-container .filter-drawer-content::-webkit-scrollbar-track {
  background: #f1f3f4;
}

.filter-drawer-container .filter-drawer-content::-webkit-scrollbar-thumb {
  background: #c1c8cd;
  border-radius: 4px;
}

.filter-drawer-container .filter-drawer-content::-webkit-scrollbar-thumb:hover {
  background: #a1a8ad;
}

/* Filter Sections */
.filter-drawer-container .filter-section {
  border-bottom: 1px solid #e5e7eb;
  background: #ffffff !important;
}

.filter-drawer-container .filter-section-header {
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 24px;
  background: #ffffff !important;
  border: none;
  cursor: pointer;
  transition: background-color 0.2s ease;
  font-size: 16px !important;
  font-weight: 600;
  color: var(--filter-dark);
  text-align: left;
}



.filter-drawer-container .filter-section-header:hover {
  background: #f8f9fa !important;
}

.filter-drawer-container .filter-section-arrow {
  transition: transform 0.3s ease;
  color: var(--filter-dark);
  opacity: 0.7;
}

.filter-drawer-container .filter-section-arrow.rotated {
  transform: rotate(180deg);
}

.filter-drawer-container .filter-section-content {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
  background: #ffffff !important;
}

.filter-drawer-container .filter-section-content.active {
  max-height: 400px;
  overflow-y: auto;
}

/* Filter Options - Enhanced specificity to override Shopify theme */
.filter-drawer-container .filter-options {
  padding: 16px 24px;
  background: #ffffff !important;
}

.filter-drawer-container .filter-drawer .filter-option-item {
  display: flex !important;
  align-items: center !important;
  padding: 10px 12px !important;
  margin-bottom: 8px !important;
  background: #ffffff !important;
  border: 1px solid #e5e7eb !important;
  border-radius: 6px !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
  position: relative !important;
  color: #323232 !important;
}

.filter-drawer-container .filter-drawer .filter-option-item:hover {
  border-color: var(--filter-primary) !important;
  background: #f8f9ff !important;
  transform: translateY(-1px) !important;
  box-shadow: 0 2px 4px rgba(29, 78, 216, 0.1) !important;
}

/* ACTIVE STATE - Selected filters - Maximum specificity */
.filter-drawer-container .filter-drawer .filter-section .filter-option-item.active,
.filter-drawer-container .filter-drawer .filter-option-item.active {
  background: #1d4ed8 !important;
  border-color: #1d4ed8 !important;
  color: #ffffff !important;
  transform: translateY(-1px) !important;
  box-shadow: 0 2px 8px rgba(29, 78, 216, 0.3) !important;
}

/* Active state hover effect - Maximum specificity */
.filter-drawer-container .filter-drawer .filter-section .filter-option-item.active:hover,
.filter-drawer-container .filter-drawer .filter-option-item.active:hover {
  background: #1e40af !important;
  border-color: #1e40af !important;
  color: #ffffff !important;
  transform: translateY(-2px) !important;
  box-shadow: 0 4px 12px rgba(29, 78, 216, 0.4) !important;
}

.filter-drawer-container .filter-drawer .filter-option-item[data-disabled="true"] {
  opacity: 0.5 !important;
  pointer-events: none !important;
}

.filter-drawer-container .filter-drawer .filter-option-item input[type="checkbox"] {
  position: absolute !important;
  opacity: 0 !important;
  pointer-events: none !important;
  width: 1px !important;
  height: 1px !important;
  margin: 0 !important;
  padding: 0 !important;
  border: none !important;
  clip: rect(0, 0, 0, 0) !important;
}

.filter-drawer-container .filter-drawer .filter-option-checkbox {
  width: 16px !important;
  height: 16px !important;
  border: 2px solid #e5e7eb !important;
  border-radius: 3px !important;
  margin-right: 10px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  transition: all 0.2s ease !important;
  flex-shrink: 0 !important;
  background: #ffffff !important;
  position: relative !important;
}

/* Active checkbox styling - Maximum specificity */
.filter-drawer-container .filter-drawer .filter-section .filter-option-item.active .filter-option-checkbox,
.filter-drawer-container .filter-drawer .filter-option-item.active .filter-option-checkbox {
  background: #ffffff !important;
  border-color: #ffffff !important;
  box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.2) !important;
}

.filter-drawer-container .filter-drawer .filter-section .filter-option-item.active .filter-option-checkbox::after,
.filter-drawer-container .filter-drawer .filter-option-item.active .filter-option-checkbox::after {
  content: '✓' !important;
  color: #1d4ed8 !important;
  font-size: 11px !important;
  font-weight: bold !important;
  line-height: 1 !important;
  position: absolute !important;
  top: 50% !important;
  left: 50% !important;
  transform: translate(-50%, -50%) !important;
}

.filter-drawer-container .filter-drawer .filter-option-item:not(.active) .filter-option-checkbox {
  background: #ffffff !important;
  border-color: #e5e7eb !important;
}

.filter-drawer-container .filter-drawer .filter-option-item:not(.active):hover .filter-option-checkbox {
  border-color: var(--filter-primary) !important;
  background: #f8f9ff !important;
}

.filter-drawer-container .filter-drawer .filter-option-label {
  flex: 1 !important;
  font-size: 13px !important;
  font-weight: 500 !important;
  margin-right: 8px !important;
  transition: color 0.2s ease !important;
  color: inherit !important;
}

/* Active label text color - Maximum specificity */
.filter-drawer-container .filter-drawer .filter-section .filter-option-item.active .filter-option-label,
.filter-drawer-container .filter-drawer .filter-option-item.active .filter-option-label {
  color: #ffffff !important;
  font-weight: 600 !important;
}

.filter-drawer-container .filter-drawer .filter-option-count {
  font-size: 14px !important;
  opacity: 0.7 !important;
  padding: 2px 6px !important;
  background: rgba(0, 0, 0, 0.05) !important;
  border-radius: 10px !important;
  transition: all 0.2s ease !important;
  font-weight: 500 !important;
  color: inherit !important;
}

/* Active count styling - Maximum specificity */
.filter-drawer-container .filter-drawer .filter-section .filter-option-item.active .filter-option-count,
.filter-drawer-container .filter-drawer .filter-option-item.active .filter-option-count {
  background: rgba(255, 255, 255, 0.25) !important;
  color: #ffffff !important;
  opacity: 1 !important;
  font-weight: 600 !important;
}

/* Sort Options */
.filter-drawer-container .sort-option input {
  margin-right: 10px;
}

/* Price Range */
.filter-drawer-container .price-range-inputs {
  display: flex;
  gap: 12px;
  margin-bottom: 16px;
}

.filter-drawer-container .price-input-group {
  flex: 1;
}

.filter-drawer-container .price-input-group label {
  display: block;
  font-size: 11px;
  font-weight: 600;
  color: var(--filter-dark);
  margin-bottom: 6px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.filter-drawer-container .price-input-group input {
  width: 100%;
  padding: 10px 12px;
  border: 2px solid #e5e7eb;
  border-radius: 6px;
  font-size: 13px;
  background: #ffffff !important;
  color: var(--filter-dark);
  transition: border-color 0.2s ease;
}

.filter-drawer-container .price-input-group input:focus {
  outline: none;
  border-color: var(--filter-primary);
}

.filter-drawer-container .price-apply-btn {
  width: 100%;
  padding: 12px;
  background: #1d4ed8 !important;
  color: #ffffff !important;
  border: none;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: background-color 0.2s ease;
  box-shadow: 0 2px 4px rgba(29, 78, 216, 0.2);
}

.filter-drawer-container .price-apply-btn:hover {
  background: #1e40af !important;
  box-shadow: 0 4px 8px rgba(29, 78, 216, 0.3);
}

/* Fixed Footer */
.filter-drawer-container .filter-drawer-footer {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 20px 24px;
  border-top: 1px solid #e5e7eb;
  background: #ffffff !important;
}

.filter-drawer-container .filter-apply-btn {
  width: 100%;
  padding: 16px;
  background: #1d4ed8 !important;
  color: #ffffff !important;
  border: none;
  border-radius: 8px;
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(29, 78, 216, 0.2);
  text-align: center !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
}

.filter-drawer-container .filter-apply-btn:hover {
  background: #1e40af !important;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(29, 78, 216, 0.3);
}

/* Loading State */
.modern-collection-filters.loading {
  opacity: 0.7;
  pointer-events: none;
  position: relative;
}

.modern-collection-filters.loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 40px;
  height: 40px;
  margin: -20px 0 0 -20px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid var(--filter-primary);
  border-radius: 50%;
  animation: modernFilterSpin 1s linear infinite;
  z-index: 1000;
}

@keyframes modernFilterSpin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .filter-drawer-container .filter-drawer {
    width: 100vw !important;
  }
  
  .modern-collection-filters .modern-filter-topbar {
    flex-direction: column;
    gap: 12px;
    align-items: flex-start;
  }

  .modern-collection-filters .modern-filter-button {
    width: 100%;
    justify-content: center;
  }

  .modern-collection-filters .modern-current-filters-list {
    gap: 4px;
  }

  .modern-collection-filters .modern-current-filter-tag,
  .modern-collection-filters .modern-clear-all-filters {
    font-size: 10px !important;
    padding: 8px 12px !important;
    min-height: 40px !important;
  }
  
  .modern-collection-filters .modern-filter-remove-icon {
    width: 20px !important;
    height: 20px !important;
    font-size: 16px !important;
  }
  
  .modern-collection-filters .modern-clear-all-filters {
    min-height: 44px !important;
  }
  
  .modern-collection-filters .modern-clear-all-filters::before {
    width: 22px !important;
    height: 22px !important;
    font-size: 18px !important;
  }

  .filter-drawer-container .filter-section-header {
    padding: 14px 16px;
  }

  .filter-drawer-container .filter-options {
    padding: 8px 16px 16px 16px;
  }

  .filter-drawer-container .filter-drawer-header {
    padding: 16px 20px;
  }

  .filter-drawer-container .filter-drawer-title {
    font-size: 16px !important;
  }
}

/* Focus states for accessibility */
.modern-collection-filters .modern-filter-button:focus,
.modern-collection-filters .modern-current-filter-tag:focus,
.modern-collection-filters .modern-clear-all-filters:focus,
.filter-drawer-container .filter-drawer-close:focus,
.filter-drawer-container .filter-section-header:focus,
.filter-drawer-container .filter-option-item:focus,
.filter-drawer-container .price-input-group input:focus,
.filter-drawer-container .price-apply-btn:focus,
.filter-drawer-container .filter-apply-btn:focus {
  outline: 2px solid var(--filter-primary) !important;
  outline-offset: 2px !important;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .modern-collection-filters .modern-filter-remove-icon {
    background: rgba(0, 0, 0, 0.3) !important;
    border: 1px solid currentColor !important;
  }
  
  .modern-collection-filters .modern-clear-all-filters::before {
    background: rgba(220, 38, 38, 0.3) !important;
    border: 1px solid currentColor !important;
  }
}

/* Safely hide ONLY theme filter elements - NOT product elements */
.collection__page--topbar .button:not(.modern-filter-button),
.collection__page--topbar .slideout__trigger-filters:not(.modern-filter-button),
.collection__horizontal-toolbar .slideout__trigger-filters:not(.modern-filter-button),
.slideout[data-wau-slideout="collection-filters"]:not(#filterDrawerContainer *),
.filter-drawer__filtering__results:not(.modern-current-filters) {
  display: none !important;
  visibility: hidden !important;
  opacity: 0 !important;
  pointer-events: none !important;
}

/* Ensure product loop gets proper spacing */
/* .modern-collection-filters .product-loop {
  margin-top: 20px;
} */

/* Prevent any styling conflicts with existing product elements */
.modern-collection-filters .collection,
.modern-collection-filters .product-loop,
.modern-collection-filters .product-listing,
.modern-collection-filters .product-item,
.modern-collection-filters .product-image,
.modern-collection-filters .product-info {
  /* Let these inherit from theme - don't override */
}
{% endstyle %}

{% schema %}
{
  "name": "Enhanced Collection page",
  "max_blocks": 10,
  "settings": [
    {
      "type": "range",
      "id": "items_per_page",
      "min": 2,
      "max": 48,
      "step": 1,
      "label": "Products per page",
      "default": 30
    },
    {
      "type": "range",
      "id": "items_per_row",
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Products per row",
      "default": 3,
      "info": "Will not apply if offset product grid enabled."
    },
    {
      "type": "checkbox",
      "id": "collection_image",
      "label": "Show collection image",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_count",
      "label": "Show product count",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_savings",
      "label": "Show savings amount",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "sort_by",
      "name": "Sort by",
      "limit": 1,
      "settings": [

      ]
    },
    {
      "type": "filter",
      "name": "Filters",
      "limit": 1,
      "settings": [

      ]
    }
  ]
}
{% endschema %}