{% schema %}
{
  "name": "Collection Categories",
  "tag": "section",
  "class": "collection-badges-section",
  "settings": [],
  "blocks": [
    {
      "type": "category",
      "name": "Category",
      "limit": 20,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Category name"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collection Categories",
      "blocks": [
        {
          "type": "category"
        },
        {
          "type": "category"
        },
        {
          "type": "category"
        }
      ]
    }
  ]
}
{% endschema %}
    
<div class="w-full flex justify-center">
 <div class="relative w-full max-w-[1600px] pl-3 lg:pl-0">
   <div id="badgeScroller" class="w-full flex py-1 md:py-2 mt-5 overflow-x-auto scrollbar-hide">
     <div class="flex flex-shrink gap-3 md:gap-6">
       {% for block in section.blocks %}
         {% if block.settings.title != blank and block.settings.link != blank %}
           <a href="{{ block.settings.link }}" 
              class="flex items-center gap-3 px-3 py-2 bg-[#EEEEEE] rounded-lg shadow-sm hover:bg-gray-50 transition-colors whitespace-nowrap"
              {{ block.shopify_attributes }}>
             {% if block.settings.image %}
               <div class="w-12 h-12 rounded-full overflow-hidden flex-shrink-0 bg-gray-50">
                 {{ block.settings.image | image_url: width: 96 | image_tag: 
                   class: 'w-full h-full object-contain',
                   loading: 'lazy',
                   alt: block.settings.title
                 }}
               </div>
             {% endif %}
             <span class="text-base font-medium">{{ block.settings.title }}</span>
           </a>
         {% endif %}
       {% endfor %}
     </div>
   </div>
 </div>
</div>

<style>
 #badgeScroller {
   cursor: grab;
   -ms-overflow-style: none;
   scrollbar-width: none;
 }
 
 #badgeScroller::-webkit-scrollbar {
   display: none;
 }

 #badgeScroller.dragging {
   cursor: grabbing;
   user-select: none;
 }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const scroller = document.getElementById('badgeScroller');
  let isDown = false;
  let startX;
  let scrollLeft;
  let hasMoved = false; // Track if there was actual movement
  
  scroller.addEventListener('mousedown', (e) => {
    isDown = true;
    scroller.classList.add('dragging');
    startX = e.pageX - scroller.offsetLeft;
    scrollLeft = scroller.scrollLeft;
    hasMoved = false; // Reset movement tracking on mousedown
  });
  
  scroller.addEventListener('mouseleave', () => {
    isDown = false;
    scroller.classList.remove('dragging');
  });
  
  scroller.addEventListener('mouseup', (e) => {
    if (isDown && hasMoved) {
      // If we dragged (not just clicked), prevent the default link behavior
      e.preventDefault();
      e.stopPropagation();
      
      // Find if we're on a link and prevent its navigation
      let target = e.target;
      while (target !== scroller) {
        if (target.tagName === 'A') {
          // This prevents the click that would follow this mouseup
          const preventClick = function(e) {
            e.preventDefault();
            target.removeEventListener('click', preventClick);
          };
          target.addEventListener('click', preventClick);
          break;
        }
        target = target.parentNode;
      }
    }
    
    isDown = false;
    scroller.classList.remove('dragging');
  });
  
  scroller.addEventListener('mousemove', (e) => {
    if(!isDown) return;
    e.preventDefault();
    const x = e.pageX - scroller.offsetLeft;
    const walk = (x - startX);
    
    // Only consider it a drag if moved more than 5px
    if (Math.abs(walk) > 5) {
      hasMoved = true;
    }
    
    scroller.scrollLeft = scrollLeft - walk;
  });
  
  // Prevent default drag behavior on children
  const links = scroller.getElementsByTagName('a');
  Array.from(links).forEach(link => {
    link.addEventListener('dragstart', (e) => e.preventDefault());
    
    // Add this to handle touch events better
    link.addEventListener('click', (e) => {
      if (hasMoved) {
        e.preventDefault();
      }
    });
  });
  
  // Add touch support with the same logic
  scroller.addEventListener('touchstart', (e) => {
    isDown = true;
    scroller.classList.add('dragging');
    startX = e.touches[0].pageX - scroller.offsetLeft;
    scrollLeft = scroller.scrollLeft;
    hasMoved = false;
  }, { passive: true });
  
  scroller.addEventListener('touchend', () => {
    isDown = false;
    scroller.classList.remove('dragging');
    
    // If there was movement, prevent clicks for a short time
    if (hasMoved) {
      const links = scroller.getElementsByTagName('a');
      Array.from(links).forEach(link => {
        link.style.pointerEvents = 'none';
        setTimeout(() => {
          link.style.pointerEvents = '';
        }, 100);
      });
    }
  });
  
  scroller.addEventListener('touchmove', (e) => {
    if(!isDown) return;
    const x = e.touches[0].pageX - scroller.offsetLeft;
    const walk = (x - startX);
    
    // Only consider it a drag if moved more than 5px
    if (Math.abs(walk) > 5) {
      hasMoved = true;
    }
    
    scroller.scrollLeft = scrollLeft - walk;
  }, { passive: false });
});
</script>