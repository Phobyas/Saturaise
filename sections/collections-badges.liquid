{% schema %}
  {
    "name": "Collection Categories",
    "tag": "section",
    "class": "collection-badges-section",
    "settings": [
      {
        "type": "range",
        "id": "scroll_amount",
        "min": 100,
        "max": 500,
        "step": 50,
        "unit": "px",
        "label": "Scroll amount",
        "default": 200
      },
      {
        "type": "range",
        "id": "min_height",
        "min": 80,
        "max": 200,
        "step": 10,
        "unit": "px",
        "label": "Container height",
        "default": 150,
        "info": "Adjust this value if you experience layout shifts"
      }
    ],
    "blocks": [
      {
        "type": "category",
        "name": "Category",
        "limit": 20,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Category name"
          },
          {
            "type": "url",
            "id": "link",
            "label": "Link"
          },
          {
            "type": "image_picker",
            "id": "image",
            "label": "Image"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Collection Categories",
        "blocks": [
          {
            "type": "category"
          },
          {
            "type": "category"
          },
          {
            "type": "category"
          }
        ]
      }
    ]
  }
  {% endschema %}
  
  <!-- Pre-define essential styles to prevent CLS -->
  <style id="badges-cls-fix-{{ section.id }}">
    /* Set pre-determined height with a CSS variable for easy adjustment */
    :root {
      --badges-container-height: {{ section.settings.min_height | default: 150 }}px;
      --badges-mobile-height: {{ section.settings.min_height | minus: 20 | default: 130 }}px;
    }
    
    /* Main container - this will reserve space before content loads */
    .badges-section-wrapper-{{ section.id }} {
      position: relative;
      width: 100%;
      min-height: var(--badges-container-height);
      margin-top: 12px;
      display: block;
      overflow: hidden;
      contain: layout;
    }
    
    /* Fix for inner container to maintain proper position */
    .badges-inner-container-{{ section.id }} {
      position: relative;
      width: 100%;
      max-width: 1600px;
      min-height: var(--badges-container-height);
      margin: 0 auto;
      padding-top: 12px;
      padding-left: 12px;
    }
    
    /* Make sure scroller has proper height */
    .badges-scroller-{{ section.id }} {
      min-height: calc(var(--badges-container-height) - 50px);
      width: 100%;
      overflow-x: auto;
      padding: 8px 0;
      display: flex;
      -ms-overflow-style: none;
      scrollbar-width: none;
      -webkit-overflow-scrolling: touch;
    }
    
    .badges-scroller-{{ section.id }}::-webkit-scrollbar {
      display: none;
    }
    
    /* Mobile adjustments */
    @media (max-width: 767px) {
      .badges-section-wrapper-{{ section.id }} {
        min-height: var(--badges-mobile-height);
      }
      
      .badges-inner-container-{{ section.id }} {
        min-height: var(--badges-mobile-height);
      }
      
      .badges-scroller-{{ section.id }} {
        min-height: calc(var(--badges-mobile-height) - 40px);
      }
    }
  </style>
  
  <!-- Main container with pre-defined height -->
  <div class="badges-section-wrapper-{{ section.id }}">
    <div class="badges-inner-container-{{ section.id }} relative w-full max-w-[1600px] pt-3 pl-3 md:pl-0">
      <!-- Header with arrows -->
      <div class="flex justify-between items-center">
        <div></div>
        <div class="badge-arrows flex gap-3">
          <button id="badgePrev-{{ section.id }}" class="badge-arrow-btn" aria-label="Previous categories">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="#ffffff" viewBox="0 0 16 16">
              <path d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
            </svg>
          </button>
          <button id="badgeNext-{{ section.id }}" class="badge-arrow-btn" aria-label="Next categories">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="#ffffff" viewBox="0 0 16 16">
              <path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Badge scroller with fixed height -->
      <div class="relative">
        <div id="badgeScroller-{{ section.id }}" class="badges-scroller-{{ section.id }} w-full flex py-1 md:py-2 overflow-x-auto scrollbar-hide">
          <div class="flex flex-nowrap gap-3 md:gap-4">
            {% for block in section.blocks %}
              {% if block.settings.title != blank and block.settings.link != blank %}
                <a href="{{ block.settings.link }}" 
                   class="flex items-center gap-3 px-3 py-2 bg-[#EEEEEE] rounded-lg shadow-sm hover:bg-gray-50 transition-colors whitespace-nowrap flex-shrink-0"
                   {{ block.shopify_attributes }}>
                  {% if block.settings.image %}
                    <div class="w-12 h-12 rounded-full overflow-hidden flex-shrink-0 bg-gray-50">
                      {{ block.settings.image | image_url: width: 96 | image_tag: 
                        class: 'w-full h-full object-contain',
                        loading: 'eager',
                        fetchpriority: 'high',
                        width: 96,
                        height: 96,
                        alt: block.settings.title
                      }}
                    </div>
                  {% endif %}
                  <span class="text-base font-medium">{{ block.settings.title }}</span>
                </a>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <style>
    #badgeScroller-{{ section.id }} {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }
    
    #badgeScroller-{{ section.id }}::-webkit-scrollbar {
      display: none;
    }
  
    .badge-arrow-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: opacity 0.2s, background-color 0.2s;
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background-color: #323232;
      border: none;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    
    .badge-arrow-btn:hover {
      background-color: #333333;
    }
    
    .badge-arrow-btn:active {
      transform: scale(0.95);
    }
    
    .badge-arrow-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .badge-arrow-btn svg {
      min-width: 16px;
      min-height: 16px;
    }
    
    @media (max-width: 767px) {
      .badge-arrows {
        display: none;
      }
    }
  </style>
  
  <script>
  // IIFE to immediately set heights before any content loads
  (function() {
    // Create and inject a style tag with critical CSS for CLS prevention
    function injectCriticalCSS() {
      const height = {{ section.settings.min_height | default: 150 }};
      const mobileHeight = {{ section.settings.min_height | minus: 20 | default: 130 }};
      const isMobile = window.innerWidth < 768;
      
      const containerHeight = isMobile ? mobileHeight : height;
      const sectionId = "{{ section.id }}";
      
      // Apply height directly to ensure immediate effect
      const sectionWrapper = document.querySelector('.badges-section-wrapper-' + sectionId);
      if (sectionWrapper) {
        sectionWrapper.style.minHeight = containerHeight + 'px';
      }
      
      const innerContainer = document.querySelector('.badges-inner-container-' + sectionId);
      if (innerContainer) {
        innerContainer.style.minHeight = containerHeight + 'px';
      }
      
      const scroller = document.querySelector('.badges-scroller-' + sectionId);
      if (scroller) {
        scroller.style.minHeight = (containerHeight - (isMobile ? 40 : 50)) + 'px';
      }
    }
    
    // Execute immediately
    injectCriticalCSS();
    
    // Also execute on resize to handle orientation changes
    window.addEventListener('resize', injectCriticalCSS);
  })();
  
  document.addEventListener('DOMContentLoaded', function() {
    const sectionId = "{{ section.id }}";
    const scroller = document.getElementById('badgeScroller-' + sectionId);
    const prevBtn = document.getElementById('badgePrev-' + sectionId);
    const nextBtn = document.getElementById('badgeNext-' + sectionId);
    const scrollAmount = {{ section.settings.scroll_amount | default: 200 }};
    
    if (!scroller || !prevBtn || !nextBtn) return;
    
    // Super simplified drag variables
    let isDragging = false;
    let startX = 0;
    let startScrollLeft = 0;
    
    // Basic arrow button functionality
    function updateArrowState() {
      prevBtn.disabled = scroller.scrollLeft <= 0;
      nextBtn.disabled = scroller.scrollLeft >= scroller.scrollWidth - scroller.clientWidth - 5;
    }
    
    // Button click handlers
    prevBtn.addEventListener('click', function() {
      scroller.scrollTo({
        left: scroller.scrollLeft - scrollAmount,
        behavior: 'smooth'
      });
      setTimeout(updateArrowState, 300);
    });
    
    nextBtn.addEventListener('click', function() {
      scroller.scrollTo({
        left: scroller.scrollLeft + scrollAmount,
        behavior: 'smooth'
      });
      setTimeout(updateArrowState, 300);
    });
    
    // Initialize button state
    updateArrowState();
    
    // Update button state on scroll
    scroller.addEventListener('scroll', updateArrowState);
    
    // Ultra-simple mouse drag handling - prioritizing responsiveness
    scroller.addEventListener('mousedown', function(e) {
      isDragging = true;
      startX = e.pageX;
      startScrollLeft = scroller.scrollLeft;
      
      // Disable the scroll animation for dragging
      scroller.style.scrollBehavior = 'auto';
      scroller.style.cursor = 'grabbing';
      
      // Prevent default behaviors that might interfere
      e.preventDefault();
    });
    
    // When mouse moves, scroll the container directly
    document.addEventListener('mousemove', function(e) {
      if (!isDragging) return;
      
      // Simple, direct calculation - no multipliers or complex math
      const x = e.pageX;
      const distance = x - startX;
      scroller.scrollLeft = startScrollLeft - distance;
      
      // Prevent any other events
      e.preventDefault();
    });
    
    // End dragging on mouse up or leave
    document.addEventListener('mouseup', endDrag);
    document.addEventListener('mouseleave', endDrag);
    
    function endDrag() {
      if (!isDragging) return;
      
      isDragging = false;
      scroller.style.cursor = '';
      
      // Re-enable smooth scrolling
      setTimeout(function() {
        scroller.style.scrollBehavior = '';
      }, 50);
    }
    
    // Simple touch handling
    scroller.addEventListener('touchstart', function(e) {
      isDragging = true;
      startX = e.touches[0].pageX;
      startScrollLeft = scroller.scrollLeft;
      
      // Disable the scroll animation for dragging
      scroller.style.scrollBehavior = 'auto';
    }, { passive: true });
    
    scroller.addEventListener('touchmove', function(e) {
      if (!isDragging) return;
      
      const x = e.touches[0].pageX;
      const distance = x - startX;
      scroller.scrollLeft = startScrollLeft - distance;
      
      // Prevent page scrolling when dragging horizontally
      if (Math.abs(distance) > 10) {
        e.preventDefault();
      }
    }, { passive: false });
    
    scroller.addEventListener('touchend', function() {
      isDragging = false;
      
      // Re-enable smooth scrolling
      setTimeout(function() {
        scroller.style.scrollBehavior = '';
      }, 50);
    });
    
    // Handle click prevention on drag
    let dragStartTime = 0;
    let hasMoved = false;
    
    scroller.addEventListener('mousedown', function() {
      dragStartTime = Date.now();
      hasMoved = false;
    }, { passive: true });
    
    scroller.addEventListener('mousemove', function() {
      if (isDragging) {
        hasMoved = true;
      }
    }, { passive: true });
    
    // Prevent clicks after dragging
    scroller.addEventListener('click', function(e) {
      if (hasMoved && (Date.now() - dragStartTime > 100)) {
        e.preventDefault();
        e.stopPropagation();
      }
    }, true);
  });
  </script>