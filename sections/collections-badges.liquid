{% schema %}
  {
    "name": "Collection Categories",
    "tag": "section",
    "class": "collection-badges-section",
    "settings": [
      {
        "type": "range",
        "id": "scroll_amount",
        "min": 100,
        "max": 500,
        "step": 50,
        "unit": "px",
        "label": "Scroll amount",
        "default": 200
      }
    ],
    "blocks": [
      {
        "type": "category",
        "name": "Category",
        "limit": 20,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Category name"
          },
          {
            "type": "url",
            "id": "link",
            "label": "Link"
          },
          {
            "type": "image_picker",
            "id": "image",
            "label": "Image"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Collection Categories",
        "blocks": [
          {
            "type": "category"
          },
          {
            "type": "category"
          },
          {
            "type": "category"
          }
        ]
      }
    ]
  }
{% endschema %}

<!-- Immediate height styles to prevent CLS -->
<style id="cls-prevention-{{ section.id }}">
  /* Fixed dimensions for section container to prevent layout shifts */
  #shopify-section-{{ section.id }} {
    min-height: 110px;
    overflow: visible;
    contain: layout;
    margin-bottom: 20px;
  }
  
  @media (max-width: 767px) {
    #shopify-section-{{ section.id }} {
      min-height: 80px;
    }
  }
  
  #badgeScroller {
    -ms-overflow-style: none;
    scrollbar-width: none;
    -webkit-overflow-scrolling: touch;
    height: 80px;
  }
  
  @media (max-width: 767px) {
    #badgeScroller {
      height: 70px;
    }
  }
  
  #badgeScroller::-webkit-scrollbar {
    display: none;
  }

  .badge-arrow-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: opacity 0.2s, background-color 0.2s;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: #323232;
    border: none;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
  }
  
  .badge-arrow-btn:hover {
    background-color: #333333;
  }
  
  .badge-arrow-btn:active {
    transform: scale(0.95);
  }
  
  .badge-arrow-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .badge-arrow-btn svg {
    min-width: 16px;
    min-height: 16px;
  }
  
  @media (max-width: 767px) {
    .badge-arrows {
      display: none;
    }
  }
  
  /* Fixed dimensions for badge items */
  .badge-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px 12px;
    background-color: #EEEEEE;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    transition: background-color 0.2s;
    white-space: nowrap;
    height: 64px;
  }
  
  .badge-image-container {
    width: 48px;
    height: 48px;
    aspect-ratio: 1/1;
    overflow: hidden;
    border-radius: 50%;
    background-color: #f5f5f5;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>

<div class="w-full flex justify-center mt-3">
  <div class="relative w-full max-w-[1600px] pt-3 pl-3 md:pl-0">
    <!-- Header with arrows - maintaining original position -->
    <div class="flex justify-between items-center">
      <div></div>
      <div class="badge-arrows flex gap-3">
        <button id="badgePrev" class="badge-arrow-btn" aria-label="Previous categories" disabled>
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="#ffffff" viewBox="0 0 16 16">
            <path d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
          </svg>
        </button>
        <button id="badgeNext" class="badge-arrow-btn" aria-label="Next categories">
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="#ffffff" viewBox="0 0 16 16">
            <path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Badge scroller with fixed dimensions to prevent CLS -->
    <div class="relative">
      <div id="badgeScroller" class="w-full flex py-1 md:py-2 overflow-x-auto">
        <div class="flex flex-shrink gap-3 md:gap-4">
          {% for block in section.blocks %}
            {% if block.settings.title != blank and block.settings.link != blank %}
              <a href="{{ block.settings.link }}" 
                 class="badge-item"
                 {{ block.shopify_attributes }}>
                {% if block.settings.image %}
                  <div class="badge-image-container">
                    {{ block.settings.image | image_url: width: 96 | image_tag: 
                      class: 'w-full h-full object-contain',
                      loading: 'eager',
                      fetchpriority: 'high',
                      width: 48,
                      height: 48,
                      alt: block.settings.title,
                      style: "aspect-ratio: 1/1; width: 48px; height: 48px;"
                    }}
                  </div>
                {% endif %}
                <span class="text-base font-medium">{{ block.settings.title }}</span>
              </a>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Early initialization script to prevent CLS -->
<script>
// Early pre-calculation script to prevent CLS
(function() {
  // Reserve space before the DOM is fully loaded
  const styleTag = document.getElementById('cls-prevention-{{ section.id }}');
  if (styleTag) {
    styleTag.textContent += `
      #shopify-section-{{ section.id }} {
        min-height: ${window.innerWidth < 768 ? '90px' : '110px'};
      }
      #badgeScroller {
        height: ${window.innerWidth < 768 ? '70px' : '80px'};
      }
    `;
  }
})();

document.addEventListener('DOMContentLoaded', function() {
  const scroller = document.getElementById('badgeScroller');
  const prevBtn = document.getElementById('badgePrev');
  const nextBtn = document.getElementById('badgeNext');
  const scrollAmount = {{ section.settings.scroll_amount | default: 200 }};
  
  // Skip initialization if elements don't exist
  if (!scroller || !prevBtn || !nextBtn) return;
  
  // Simple drag handling variables
  let isDragging = false;
  let startX = 0;
  let startScrollLeft = 0;
  
  // Basic arrow button functionality
  function updateArrowState() {
    prevBtn.disabled = scroller.scrollLeft <= 0;
    nextBtn.disabled = scroller.scrollLeft >= scroller.scrollWidth - scroller.clientWidth - 5;
  }
  
  // Button click handlers
  prevBtn.addEventListener('click', function() {
    scroller.scrollTo({
      left: scroller.scrollLeft - scrollAmount,
      behavior: 'smooth'
    });
    setTimeout(updateArrowState, 300);
  });
  
  nextBtn.addEventListener('click', function() {
    scroller.scrollTo({
      left: scroller.scrollLeft + scrollAmount,
      behavior: 'smooth'
    });
    setTimeout(updateArrowState, 300);
  });
  
  // Initialize button state
  updateArrowState();
  
  // Update button state on scroll
  scroller.addEventListener('scroll', updateArrowState);
  
  // Simple mouse drag handling
  scroller.addEventListener('mousedown', function(e) {
    isDragging = true;
    startX = e.pageX;
    startScrollLeft = scroller.scrollLeft;
    
    // Disable the scroll animation for dragging
    scroller.style.scrollBehavior = 'auto';
    scroller.style.cursor = 'grabbing';
    
    // Prevent default behaviors
    e.preventDefault();
  });
  
  // Scroll the container when mouse moves
  document.addEventListener('mousemove', function(e) {
    if (!isDragging) return;
    
    // Direct calculation without complex math
    const x = e.pageX;
    const distance = x - startX;
    scroller.scrollLeft = startScrollLeft - distance;
    
    // Prevent other events
    e.preventDefault();
  });
  
  // End dragging on mouse up or leave
  document.addEventListener('mouseup', endDrag);
  document.addEventListener('mouseleave', endDrag);
  
  function endDrag() {
    if (!isDragging) return;
    
    isDragging = false;
    scroller.style.cursor = '';
    
    // Re-enable smooth scrolling
    setTimeout(function() {
      scroller.style.scrollBehavior = '';
    }, 50);
  }
  
  // Touch handling for mobile
  scroller.addEventListener('touchstart', function(e) {
    isDragging = true;
    startX = e.touches[0].pageX;
    startScrollLeft = scroller.scrollLeft;
    
    // Disable scroll animation
    scroller.style.scrollBehavior = 'auto';
  }, { passive: true });
  
  scroller.addEventListener('touchmove', function(e) {
    if (!isDragging) return;
    
    const x = e.touches[0].pageX;
    const distance = x - startX;
    scroller.scrollLeft = startScrollLeft - distance;
    
    // Prevent page scrolling when dragging horizontally
    if (Math.abs(distance) > 10) {
      e.preventDefault();
    }
  }, { passive: false });
  
  scroller.addEventListener('touchend', function() {
    isDragging = false;
    
    // Re-enable smooth scrolling
    setTimeout(function() {
      scroller.style.scrollBehavior = '';
    }, 50);
  });
  
  // Prevent click after drag
  let dragStartTime = 0;
  let hasMoved = false;
  
  scroller.addEventListener('mousedown', function() {
    dragStartTime = Date.now();
    hasMoved = false;
  }, { passive: true });
  
  scroller.addEventListener('mousemove', function() {
    if (isDragging) {
      hasMoved = true;
    }
  }, { passive: true });
  
  scroller.addEventListener('click', function(e) {
    if (hasMoved && (Date.now() - dragStartTime > 100)) {
      e.preventDefault();
      e.stopPropagation();
    }
  }, true);
});
</script>