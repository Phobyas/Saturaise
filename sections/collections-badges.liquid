{% schema %}
  {
    "name": "Collection Categories",
    "tag": "section",
    "class": "collection-badges-section",
    "settings": [
      {
        "type": "range",
        "id": "scroll_amount",
        "min": 100,
        "max": 500,
        "step": 50,
        "unit": "px",
        "label": "Scroll amount",
        "default": 200
      }
    ],
    "blocks": [
      {
        "type": "category",
        "name": "Category",
        "limit": 20,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Category name"
          },
          {
            "type": "url",
            "id": "link",
            "label": "Link"
          },
          {
            "type": "image_picker",
            "id": "image",
            "label": "Image"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Collection Categories",
        "blocks": [
          {
            "type": "category"
          },
          {
            "type": "category"
          },
          {
            "type": "category"
          }
        ]
      }
    ]
  }
{% endschema %}

<style>
  /* Main section container - consistent with collection carousel */
  #shopify-section-{{ section.id }} {
    height: 110px !important;
    overflow: visible;
    contain: layout style;
    max-width: 1280px;
    margin: 0 auto 20px auto;
    width: 100%;
  }

  @media (min-width: 1920px) {
    #shopify-section-{{ section.id }} {
      max-width: 1600px;
    }
  }

  @media (max-width: 767px) {
    #shopify-section-{{ section.id }} {
      margin: 0;
      height: 90px !important;
    }
  }

  @media (min-width: 768px) {
    #shopify-section-{{ section.id }} {
      margin-bottom: 40px;
      margin-top: 20px;
    }
  }

  /* Badge container wrapper */
  .badge-container-{{ section.id }} {
    height: 110px !important;
    position: relative;
    width: 100%;
    max-width: 1280px;
  }

  @media (min-width: 1920px) {
    .badge-container-{{ section.id }} {
      max-width: 1600px;
    }
  }

  @media (max-width: 767px) {
    .badge-container-{{ section.id }} {
      height: 90px !important;
      padding-left: 12px;
    }
  }

  /* Header row */
  .badge-header-{{ section.id }} {
    height: 40px !important;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  @media (max-width: 767px) {
    .badge-header-{{ section.id }} {
      height: 30px !important;
    }
  }

  /* Enhanced badge arrow buttons - copied exactly from collection-badges styling */
  .badge-arrows-{{ section.id }} {
    display: none;
    gap: 12px;
  }

  .badge-arrow-btn-{{ section.id }} {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: #323232;
    border: none;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    position: relative;
    z-index: 2;
  }
  
  .badge-arrow-btn-{{ section.id }} svg {
    width: 16px !important;
    height: 16px !important;
    fill: #ffffff !important;
    display: block !important;
    min-width: 16px;
    min-height: 16px;
  }
  
  .badge-arrow-btn-{{ section.id }}:disabled svg {
    opacity: 0.5;
  }
  
  .badge-arrow-btn-{{ section.id }}:hover {
    background-color: #1d4ed8;
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
  }

  .badge-arrow-btn-{{ section.id }}:active {
    transform: scale(1.05);
    transition: all 0.1s ease;
  }

  .badge-arrow-btn-{{ section.id }}:disabled {
    background-color: #9ca3af;
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  .badge-arrow-btn-{{ section.id }}:disabled:hover {
    background-color: #9ca3af;
    transform: none;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  /* Show arrows only on desktop */
  @media (min-width: 768px) {
    .badge-arrows-{{ section.id }} {
      display: flex;
    }
  }

  /* Scroll container wrapper */
  .badge-scroll-wrapper-{{ section.id }} {
    height: 70px !important;
    position: relative;
    overflow: hidden;
  }

  @media (max-width: 767px) {
    .badge-scroll-wrapper-{{ section.id }} {
      height: 60px !important;
    }
  }

  /* Badge scroller */
  #badgeScroller-{{ section.id }} {
    height: 64px !important;
    display: flex;
    align-items: center;
    overflow-x: auto;
    overflow-y: hidden;
    white-space: nowrap;
    -ms-overflow-style: none;
    scrollbar-width: none;
    scroll-behavior: smooth;
    padding: 0;
  }

  @media (max-width: 767px) {
    #badgeScroller-{{ section.id }} {
      height: 54px !important;
    }
  }

  #badgeScroller-{{ section.id }}::-webkit-scrollbar {
    display: none;
  }

  /* Badge inner container */
  .badge-inner-{{ section.id }} {
    display: inline-flex;
    align-items: center;
    height: 64px;
    flex-shrink: 0;
  }

  @media (max-width: 767px) {
    .badge-inner-{{ section.id }} {
      height: 54px;
    }
  }

  /* Individual badge items - styled like collection cards */
  .badge-item-{{ section.id }} {
    display: inline-flex;
    align-items: center;
    gap: 12px;
    padding: 8px 12px;
    background: #ffffff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    cursor: pointer;
    border: 1px solid rgba(0,0,0,0.05);
    white-space: nowrap;
    height: 64px !important;
    min-width: 120px;
    margin-right: 12px;
    position: relative;
    flex-shrink: 0;
    contain: layout style;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    text-decoration: none;
  }

  @media (max-width: 767px) {
    .badge-item-{{ section.id }} {
      height: 54px !important;
    }
  }

  /* Hover effects matching collection cards */
  .badge-item-{{ section.id }}:hover {
    box-shadow: 0 8px 20px rgba(0,0,0,0.08);
    border-color: rgba(0,0,0,0.1);
    transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  /* Image container */
  .badge-image-container-{{ section.id }} {
    width: 48px !important;
    height: 48px !important;
    min-width: 48px !important;
    min-height: 48px !important;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: #f8f9fa;
    overflow: hidden;
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    contain: size layout style;
    pointer-events: none;
  }

  .badge-image-container-{{ section.id }} img {
    width: 48px !important;
    height: 48px !important;
    object-fit: contain;
    mix-blend-mode: multiply;
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    display: block;
    pointer-events: none;
    user-select: none;
    -webkit-user-drag: none;
    -khtml-user-drag: none;
    -moz-user-drag: none;
    -o-user-drag: none;
    user-drag: none;
  }

  /* Overlay with gradient effect */
  .badge-item-{{ section.id }}::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(0,0,0,0.02) 0%,
      rgba(0,0,0,0.06) 100%
    );
    opacity: 0;
    transition: opacity 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    pointer-events: none;
    z-index: 1;
  }

  .badge-item-{{ section.id }}:hover::before {
    opacity: 1;
    transition: opacity 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  /* Badge text styling */
  .badge-text-{{ section.id }} {
    font-size: 14px;
    font-weight: 500;
    line-height: 1.2;
    color: #1f2937;
    position: relative;
    z-index: 2;
    pointer-events: none;
  }

  /* Loading states and accessibility */
  .badge-item-{{ section.id }}:focus {
    outline: 2px solid #2563eb;
    outline-offset: 2px;
  }

  .badge-item-{{ section.id }}:active {
    transform: scale(1.01);
    transition: all 0.1s ease;
  }

  /* Shimmer loading effect for images */
  .badge-image-container-{{ section.id }}::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: left 0.6s ease;
    z-index: 1;
    pointer-events: none;
  }

  .badge-item-{{ section.id }}:hover .badge-image-container-{{ section.id }}::before {
    left: 100%;
  }

  /* Mobile interaction styles - disable hover effects on touch devices */
  @media (hover: none) and (pointer: coarse), (max-width: 767px) {
    .badge-item-{{ section.id }}:hover {
      box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }
    
    .badge-item-{{ section.id }}:hover::before {
      opacity: 0;
    }

    .badge-item-{{ section.id }}:hover .badge-image-container-{{ section.id }}::before {
      left: -100%;
    }

    .badge-item-{{ section.id }} {
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);
      tap-highlight-color: rgba(0, 0, 0, 0.1);
    }
  }
</style>

<div id="shopify-section-{{ section.id }}" class="w-full flex justify-center">
  <div class="badge-container-{{ section.id }}">
    <div class="badge-header-{{ section.id }}">
      <div></div>
      <div class="badge-arrows-{{ section.id }} flex gap-3 mb-5">
        <button id="badgePrev-{{ section.id }}" 
                class="badge-arrow-btn-{{ section.id }}" 
                aria-label="Poprzednie kategorie" 
                disabled>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#ffffff" viewBox="0 0 16 16">
            <path d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
          </svg>
        </button>
        <button id="badgeNext-{{ section.id }}" 
                class="badge-arrow-btn-{{ section.id }}" 
                aria-label="NastÄ™pne kategorie">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#ffffff" viewBox="0 0 16 16">
            <path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
          </svg>
        </button>
      </div>
    </div>
    
    <div class="badge-scroll-wrapper-{{ section.id }}">
      <div id="badgeScroller-{{ section.id }}">
        <div class="badge-inner-{{ section.id }}">
          {% for block in section.blocks %}
            {% if block.settings.title != blank and block.settings.link != blank %}
              <a href="{{ block.settings.link }}" 
                 class="badge-item-{{ section.id }}"
                 aria-label="Zobacz kolekcjÄ™ {{ block.settings.title }}"
                 title="PrzejdÅº do kolekcji {{ block.settings.title }}"
                 {{ block.shopify_attributes }}>
                {% if block.settings.image %}
                  <div class="badge-image-container-{{ section.id }}">
                    {{ block.settings.image | image_url: width: 96 | image_tag: 
                      class: 'badge-image',
                      loading: 'eager',
                      fetchpriority: 'high',
                      width: 48,
                      height: 48,
                      alt: '',
                      role: 'presentation',
                      sizes: '48px'
                    }}
                  </div>
                {% else %}
                  <div class="badge-image-container-{{ section.id }}">
                    <div style="width: 48px; height: 48px; background: #f0f0f0; border-radius: 50%;"></div>
                  </div>
                {% endif %}
                <span class="badge-text-{{ section.id }}">{{ block.settings.title }}</span>
              </a>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
(function() {
  'use strict';
  
  const sectionId = '{{ section.id }}';
  const scroller = document.getElementById('badgeScroller-' + sectionId);
  const prevBtn = document.getElementById('badgePrev-' + sectionId);
  const nextBtn = document.getElementById('badgeNext-' + sectionId);
  const scrollAmount = {{ section.settings.scroll_amount | default: 200 }};
  
  if (!scroller || !prevBtn || !nextBtn) return;
  
  let isDragging = false;
  let startX = 0;
  let startScrollLeft = 0;
  let hasDragged = false;
  const dragThreshold = 5;
  
  function updateArrowState() {
    requestAnimationFrame(() => {
      const scrollLeft = scroller.scrollLeft;
      const maxScroll = scroller.scrollWidth - scroller.clientWidth - 5;
      
      prevBtn.disabled = scrollLeft <= 0;
      nextBtn.disabled = scrollLeft >= maxScroll;
    });
  }
  
  function smoothScroll(target) {
    scroller.scrollTo({
      left: target,
      behavior: 'smooth'
    });
    
    setTimeout(updateArrowState, 300);
  }
  
  prevBtn.addEventListener('click', () => {
    smoothScroll(scroller.scrollLeft - scrollAmount);
  });
  
  nextBtn.addEventListener('click', () => {
    smoothScroll(scroller.scrollLeft + scrollAmount);
  });
  
  scroller.addEventListener('scroll', updateArrowState, { passive: true });
  
  function preventClickAfterDrag(e) {
    if (hasDragged) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
      return false;
    }
  }
  
  const badges = scroller.querySelectorAll('.badge-item-' + sectionId);
  badges.forEach(badge => {
    badge.addEventListener('click', preventClickAfterDrag, true);
  });
  
  scroller.addEventListener('mousedown', e => {
    isDragging = true;
    hasDragged = false;
    startX = e.pageX;
    startScrollLeft = scroller.scrollLeft;
    scroller.style.scrollBehavior = 'auto';
    scroller.style.cursor = 'grabbing';
    e.preventDefault();
  });
  
  document.addEventListener('mousemove', e => {
    if (!isDragging) return;
    
    const distance = Math.abs(e.pageX - startX);
    if (distance > dragThreshold) {
      hasDragged = true;
    }
    
    scroller.scrollLeft = startScrollLeft - (e.pageX - startX);
    e.preventDefault();
  });
  
  function endDrag() {
    if (!isDragging) return;
    
    isDragging = false;
    scroller.style.cursor = '';
    
    setTimeout(() => {
      scroller.style.scrollBehavior = '';
    }, 50);
    
    setTimeout(() => {
      hasDragged = false;
    }, 100);
  }
  
  document.addEventListener('mouseup', endDrag);
  document.addEventListener('mouseleave', endDrag);
  
  let touchStartX = 0;
  
  scroller.addEventListener('touchstart', e => {
    isDragging = true;
    hasDragged = false;
    touchStartX = e.touches[0].pageX;
    startX = touchStartX;
    startScrollLeft = scroller.scrollLeft;
    scroller.style.scrollBehavior = 'auto';
  }, { passive: true });
  
  scroller.addEventListener('touchmove', e => {
    if (!isDragging) return;
    
    const distance = Math.abs(e.touches[0].pageX - touchStartX);
    if (distance > dragThreshold) {
      hasDragged = true;
    }
    
    scroller.scrollLeft = startScrollLeft - (e.touches[0].pageX - startX);
  }, { passive: true });
  
  scroller.addEventListener('touchend', () => {
    isDragging = false;
    
    setTimeout(() => {
      scroller.style.scrollBehavior = '';
    }, 50);
    
    setTimeout(() => {
      hasDragged = false;
    }, 150);
  });
  
  updateArrowState();
  
  const observer = new MutationObserver(() => {
    const newBadges = scroller.querySelectorAll('.badge-item-' + sectionId + ':not([data-click-handler])');
    newBadges.forEach(badge => {
      badge.addEventListener('click', preventClickAfterDrag, true);
      badge.setAttribute('data-click-handler', 'true');
    });
  });
  
  observer.observe(scroller, { childList: true, subtree: true });
})();
</script>