{% schema %}
  {
    "name": "Collection Categories",
    "tag": "section",
    "class": "collection-badges-section",
    "settings": [
      {
        "type": "range",
        "id": "scroll_amount",
        "min": 100,
        "max": 500,
        "step": 50,
        "unit": "px",
        "label": "Scroll amount",
        "default": 200
      }
    ],
    "blocks": [
      {
        "type": "category",
        "name": "Category",
        "limit": 20,
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Category name"
          },
          {
            "type": "url",
            "id": "link",
            "label": "Link"
          },
          {
            "type": "image_picker",
            "id": "image",
            "label": "Image"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Collection Categories",
        "blocks": [
          {
            "type": "category"
          },
          {
            "type": "category"
          },
          {
            "type": "category"
          }
        ]
      }
    ]
  }
{% endschema %}

<!-- CLS prevention styles -->
<style id="cls-prevention-{{ section.id }}">
  /* Fixed dimensions for section container */
  #shopify-section-{{ section.id }} {
    min-height: 110px;
    overflow: visible;
    margin-bottom: 8px;
  }
  
  @media (max-width: 767px) {
    #shopify-section-{{ section.id }} {
      min-height: 90px;
    }
  }
  
  /* Fixed dimensions for scroll container */
  #badgeScroller {
    -ms-overflow-style: none;
    scrollbar-width: none;
    height: 80px;
    overflow-x: auto;
    overflow-y: hidden;
    white-space: nowrap;
  }
  
  @media (max-width: 767px) {
    #badgeScroller {
      height: 70px;
    }
  }
  
  #badgeScroller::-webkit-scrollbar {
    display: none;
  }

  /* Enhanced badge hover effects with smooth return transitions */
  .badge-item {
    display: inline-flex;
    align-items: center;
    gap: 12px;
    padding: 8px 12px;
    background-color: #EEEEEE;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Smoother easing curve */
    white-space: nowrap;
    height: 64px;
    min-width: 120px;
    margin-right: 12px;
    position: relative;
    overflow: hidden;
    cursor: pointer;
    border: 1px solid transparent; /* Add transparent border for smooth transition */
  }

  /* Hover effects with custom timing */
  .badge-item:hover {
    background-color: #ffffff;
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    transform: translateY(-3px) scale(1.02);
    border: 1px solid #ddd;
    transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1); /* Faster entry with slight bounce */
  }

  /* Image container hover effects */
  .badge-image-container {
    width: 48px;
    height: 48px;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: #f5f5f5;
    overflow: hidden;
    transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Longer, smoother return */
    box-shadow: 0 0 0 rgba(0,0,0,0); /* Start with invisible shadow for smooth transition */
  }

  .badge-image-container img {
    mix-blend-mode: multiply; 
  }

  .badge-item:hover .badge-image-container {
    background-color: #e8f4f8;
    transform: scale(1.1);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: all 0.25s cubic-bezier(0.34, 1.56, 0.64, 1); /* Faster entry */
  }

  /* Image hover effects */
  .badge-image-container img {
    width: 48px;
    height: 48px;
    object-fit: contain;
    transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Smoother return */
  }

  .badge-item:hover .badge-image-container img {
    transform: scale(1.05);
    transition: transform 0.25s cubic-bezier(0.34, 1.56, 0.64, 1); /* Faster entry */
  }

  /* Text hover effects */
  .badge-item span {
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Smooth return */
    font-weight: 500;
    color: inherit; /* Explicit color for smooth transition */
    text-shadow: 0 0 0 rgba(0,0,0,0); /* Start with invisible shadow */
  }

  .badge-item:hover span {
    color: #2563eb;
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(0,0,0,0.05);
    transition: all 0.2s cubic-bezier(0.34, 1.56, 0.64, 1); /* Faster entry */
  }

  /* Subtle background animation on hover with smoother reset */
  .badge-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: left 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Smoother return */
    z-index: 1;
  }

  .badge-item:hover::before {
    left: 100%;
    transition: left 0.4s cubic-bezier(0.34, 1.56, 0.64, 1); /* Faster entry */
  }

  /* Ensure content stays above the animation */
  .badge-item > * {
    position: relative;
    z-index: 2;
  }

  /* Active/pressed state with better transitions */
  .badge-item:active {
    transform: translateY(-1px) scale(1.01);
    transition: all 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Focus state for accessibility */
  .badge-item:focus {
    outline: 2px solid #2563eb;
    outline-offset: 2px;
    transition: outline 0.2s ease;
  }

  /* Enhanced arrow button styles */
  .badge-arrow-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease; /* Enhanced transition */
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: #323232;
    border: none;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    position: relative;
    z-index: 2;
  }

  .badge-arrow-btn:hover {
    background-color: #1d4ed8;
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
  }

  .badge-arrow-btn:active {
    transform: scale(1.05);
    transition: all 0.1s ease;
  }

  .badge-arrow-btn:disabled {
    background-color: #9ca3af;
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  .badge-arrow-btn:disabled:hover {
    background-color: #9ca3af;
    transform: none;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .badge-arrow-btn svg {
    width: 16px !important;
    height: 16px !important;
    fill: #ffffff !important;
    display: block !important;
    min-width: 16px;
    min-height: 16px;
  }
  
  .badge-arrow-btn:disabled svg {
    opacity: 0.5;
  }
  
  @media (max-width: 767px) {
    .badge-arrows {
      display: none;
    }
    
    /* Disable hover effects on mobile to prevent sticky hover */
    .badge-item:hover {
      background-color: #EEEEEE;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      transform: none;
      border: none;
    }
    
    .badge-item:hover .badge-image-container {
      background-color: #f5f5f5;
      transform: none;
      box-shadow: none;
    }
    
    .badge-item:hover .badge-image-container img {
      transform: none;
    }
    
    .badge-item:hover span {
      color: inherit;
      font-weight: 500;
      text-shadow: none;
    }
    
    .badge-item::before {
      display: none;
    }
    
    /* Add a subtle tap effect for mobile */
    .badge-item:active {
      background-color: #e0e0e0;
      transform: scale(0.98);
    }
  }
  
  /* Responsive container max-width */
  .badge-container {
    max-width: 1280px !important;
    margin-left: auto !important;
    margin-right: auto !important;
  }
  
  /* Use 1600px max-width when viewport is at least 1920px */
  @media (min-width: 1920px) {
    .badge-container {
      max-width: 1600px !important;
    }
  }

  /* Smooth transition for drag prevention */
  .badge-item.no-pointer-events {
    pointer-events: none;
  }

  /* Optional: Add a subtle pulse animation for featured badges */
  .badge-item.featured {
    animation: subtle-pulse 3s infinite;
  }

  @keyframes subtle-pulse {
    0%, 100% {
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    50% {
      box-shadow: 0 1px 3px rgba(37, 99, 235, 0.2);
    }
  }
</style>

<div class="w-full flex justify-center mt-3">
  <div class="badge-container relative w-full pt-3 pl-3 md:pl-0 mb-5">
    <!-- Header with arrows - maintaining original position -->
    <div class="flex justify-between items-center">
      <div></div>
      <div class="badge-arrows flex gap-3">
        <button id="badgePrev" class="badge-arrow-btn" aria-label="Previous categories" disabled>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#ffffff" viewBox="0 0 16 16">
            <path d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
          </svg>
        </button>
        <button id="badgeNext" class="badge-arrow-btn" aria-label="Next categories">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#ffffff" viewBox="0 0 16 16">
            <path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Badge scroller with fixed dimensions to prevent CLS -->
    <div class="relative">
      <div id="badgeScroller" class="w-full flex py-1 md:py-2 overflow-x-auto">
        <div class="flex flex-shrink gap-2">
          {% for block in section.blocks %}
            {% if block.settings.title != blank and block.settings.link != blank %}
              <a href="{{ block.settings.link }}" 
                 class="badge-item"
                 {{ block.shopify_attributes }}>
                {% if block.settings.image %}
                  <div class="badge-image-container">
                    {{ block.settings.image | image_url: width: 96 | image_tag: 
                      class: 'w-full h-full object-contain',
                      loading: 'eager',
                      fetchpriority: 'high',
                      width: 48,
                      height: 48,
                      alt: block.settings.title,
                      style: "aspect-ratio: 1/1; width: 48px; height: 48px;"
                    }}
                  </div>
                {% endif %}
                <span class="text-sm font-medium">{{ block.settings.title }}</span>
              </a>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- CLS prevention script -->
<script>
// Early pre-calculation script to prevent CLS
(function() {
  // Reserve space before the DOM is fully loaded
  var sectionElement = document.getElementById('shopify-section-{{ section.id }}');
  if (sectionElement) {
    sectionElement.style.minHeight = window.innerWidth < 768 ? '90px' : '110px';
  }
})();

document.addEventListener('DOMContentLoaded', function() {
  var scroller = document.getElementById('badgeScroller');
  var prevBtn = document.getElementById('badgePrev');
  var nextBtn = document.getElementById('badgeNext');
  var scrollAmount = {{ section.settings.scroll_amount | default: 200 }};
  
  // Skip initialization if elements don't exist
  if (!scroller || !prevBtn || !nextBtn) return;
  
  // Set fixed height immediately
  scroller.style.height = window.innerWidth < 768 ? '70px' : '80px';
  
  // Enhanced drag handling variables
  var isDragging = false;
  var startX = 0;
  var startScrollLeft = 0;
  var hasDragged = false; // Track if actual dragging occurred
  var dragThreshold = 5; // Minimum pixels to consider it a drag
  
  // Basic arrow button functionality
  function updateArrowState() {
    prevBtn.disabled = scroller.scrollLeft <= 0;
    nextBtn.disabled = scroller.scrollLeft >= scroller.scrollWidth - scroller.clientWidth - 5;
  }
  
  // Button click handlers
  prevBtn.addEventListener('click', function() {
    scroller.scrollTo({
      left: scroller.scrollLeft - scrollAmount,
      behavior: 'smooth'
    });
    setTimeout(updateArrowState, 300);
  });
  
  nextBtn.addEventListener('click', function() {
    scroller.scrollTo({
      left: scroller.scrollLeft + scrollAmount,
      behavior: 'smooth'
    });
    setTimeout(updateArrowState, 300);
  });
  
  // Initialize button state
  updateArrowState();
  
  // Update button state on scroll
  scroller.addEventListener('scroll', updateArrowState, { passive: true });
  
  // Prevent clicks on badge items after dragging
  function preventClickAfterDrag(e) {
    if (hasDragged) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
      return false;
    }
  }
  
  // Add click prevention to all badge items
  function addClickPrevention() {
    var badgeItems = scroller.querySelectorAll('.badge-item');
    badgeItems.forEach(function(item) {
      item.addEventListener('click', preventClickAfterDrag, true);
    });
  }
  
  // Initialize click prevention
  addClickPrevention();
  
  // Re-add click prevention when new items are added (for dynamic content)
  var observer = new MutationObserver(function() {
    addClickPrevention();
  });
  observer.observe(scroller, { childList: true, subtree: true });
  
  // Enhanced mouse drag handling
  scroller.addEventListener('mousedown', function(e) {
    isDragging = true;
    hasDragged = false;
    startX = e.pageX;
    startScrollLeft = scroller.scrollLeft;
    
    // Disable the scroll animation for dragging
    scroller.style.scrollBehavior = 'auto';
    scroller.style.cursor = 'grabbing';
    
    // Prevent default behaviors
    e.preventDefault();
  });
  
  // Scroll the container when mouse moves
  document.addEventListener('mousemove', function(e) {
    if (!isDragging) return;
    
    var x = e.pageX;
    var distance = Math.abs(x - startX);
    
    // Check if we've moved enough to consider it a drag
    if (distance > dragThreshold) {
      hasDragged = true;
    }
    
    // Perform the scroll
    var scrollDistance = x - startX;
    scroller.scrollLeft = startScrollLeft - scrollDistance;
    
    // Prevent other events
    e.preventDefault();
  });
  
  // End dragging on mouse up or leave
  document.addEventListener('mouseup', endDrag);
  document.addEventListener('mouseleave', endDrag);
  
  function endDrag() {
    if (!isDragging) return;
    
    isDragging = false;
    scroller.style.cursor = '';
    
    // Re-enable smooth scrolling
    setTimeout(function() {
      scroller.style.scrollBehavior = '';
    }, 50);
    
    // Reset hasDragged flag after a short delay to allow click prevention
    setTimeout(function() {
      hasDragged = false;
    }, 100);
  }
  
  // Enhanced touch handling for mobile
  var touchStartX = 0;
  var touchHasDragged = false;
  
  scroller.addEventListener('touchstart', function(e) {
    isDragging = true;
    touchHasDragged = false;
    touchStartX = e.touches[0].pageX;
    startX = e.touches[0].pageX;
    startScrollLeft = scroller.scrollLeft;
    
    // Disable scroll animation
    scroller.style.scrollBehavior = 'auto';
  }, { passive: true });
  
  scroller.addEventListener('touchmove', function(e) {
    if (!isDragging) return;
    
    var x = e.touches[0].pageX;
    var distance = Math.abs(x - touchStartX);
    
    // Check if we've moved enough to consider it a drag
    if (distance > dragThreshold) {
      touchHasDragged = true;
      hasDragged = true;
    }
    
    var scrollDistance = x - startX;
    scroller.scrollLeft = startScrollLeft - scrollDistance;
  }, { passive: true });
  
  scroller.addEventListener('touchend', function() {
    isDragging = false;
    
    // Re-enable smooth scrolling
    setTimeout(function() {
      scroller.style.scrollBehavior = '';
    }, 50);
    
    // Reset hasDragged flag after a short delay for touch
    setTimeout(function() {
      hasDragged = false;
      touchHasDragged = false;
    }, 150); // Slightly longer delay for touch devices
  });
  
  // Handle resize
  window.addEventListener('resize', function() {
    // Update section height based on viewport
    var sectionElement = document.getElementById('shopify-section-{{ section.id }}');
    if (sectionElement) {
      sectionElement.style.minHeight = window.innerWidth < 768 ? '90px' : '110px';
    }
    
    // Update scroller height
    if (scroller) {
      scroller.style.height = window.innerWidth < 768 ? '70px' : '80px';
    }
    
    // Update arrow state
    updateArrowState();
  }, { passive: true });
});
</script>