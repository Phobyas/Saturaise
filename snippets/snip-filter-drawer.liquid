{%- liquid

  if type == search
    assign class_prefix = 'search'
  else
    assign class_prefix = 'collection'
  endif

  assign color_swatch_options = settings.swatch_option_names | replace: ' ,', ',' | replace: ', ', ',' | split: ',' | downcase

-%}

<div class="filter-drawer__wrapper grid__wrapper edge rg0 cg0 sm-rg0 sm-cg0">

  <div class="filter-drawer__mobile-close span-12 auto a-right">
    <div class="slideout__trigger--close">
      <button class="slideout__trigger-{{ class_prefix }}-filters js-slideout-close btn-as-link" data-slideout-direction="left" aria-label="Close navigation" tabindex="0" type="button" name="button">
        {% render 'snip-icons',
           wrapper: '.filter-drawer__mobile-close',
           type: 'theme',
           icon: 'close',
           size: '18px',
           classes: 'vib-center',
           fill: 'var(--text-color)',
           hover: 'var(--hover-color)' %}
      </button>
    </div>
  </div>

  {%- unless has_filter == false -%}
     <div class="filter-drawer__menu-block {% unless collection.all_products_count >= 1000 %}active--menu{% endunless %} js-mobile-menu span-12 auto" data-menu-handle="filter" {% if collection.all_products_count >= 1000 %}style="display: none;"{% endif %}>
      <div class="filter-drawer__header sm-caps grid__wrapper edge">
        <p class="span-6 auto a-left">{{ 'collections.filter.filter' | t }}</p>
        {%- if filter_count > 0 -%}
          {%- liquid
            if type == collection
              assign clear_url = collection.url
            else
              assign clear_url = routes.search_url
            endif
          -%}
          <p class="span-6 auto a-right"><a class="current_filters--clear js-current-filter ml4" href="{{ clear_url }}">{{ 'collections.filter.clear_all' | t }}</a></p>
        {%- endif -%}
      </div>
      {%- for filter in type.filters -%}
        {%- assign total_active_values = total_active_values | plus: filter.active_values.size -%}
        {% case filter.type %}
        {% when 'list' %}
          {%- liquid

            # Set default to false since we are in a loop.
            assign is_size_filter = false
            assign is_color_filter = false
            assign filter_label_to_lowercase = filter.label | downcase

            # Figure out color filters.
            if color_swatch_options contains filter_label_to_lowercase
              assign is_color_filter = true
            endif

            # Don't worry about size option filters for now as they do not do anything.
            assign size_option_names = 'size,talla,taglia,taille,tamanho,grosse' | split: ','
              if size_option_names contains filter.label
              assign is_size_filter = true
            endif

            # Determine filter type.
            if is_color_filter
              assign filter_type = 'color'
            elsif is_size_filter
              assign filter_type = 'size'
            else
              assign filter_type = 'regular'
            endif

          -%}
          <div class="sidebar__filter-block sidebar-filter filter--{{ filter_type }}">
            <p class="sm-caps filter-t">{{ filter.label | escape }} {% if filter.operator == 'AND' %}<small>{{ 'collections.filter.match_all' | t }}</small>{% endif %}</p>
            <ul>
              {% liquid
                if filter.operator == 'AND'
                  assign active_values = filter.values | where: 'active', true
                  assign inactive_values = filter.values | where: 'active', false
                  assign sorted_values = active_values | concat: inactive_values
                else
                  assign sorted_values = filter.values
                endif
              %}
              {% for value in sorted_values %}

                {%- liquid

                  if is_color_filter
                    assign swatch_color_name = value.label | handleize | downcase | append: '.png'
                    assign swatch_image_url = swatch_color_name | file_url
                    assign css_color = value.label | split: ' ' | last | downcase

                    if images[swatch_color_name] != blank
                      assign bg_img = 'background-image:url(' | append:  swatch_image_url | append: ');'
                    else
                      assign bg_img = ''
                    endif
                    assign bg_color = 'background-color:' | append:  css_color | append: ';'
                  endif

                  if value.active
                    assign status = 'current'
                    assign url = value.url_to_remove
                  elsif value.count == 0 and value.active == false
                    assign status = 'disabled'
                    assign url = ''
                  else
                    assign status = ''
                    assign url = value.url_to_add
                  endif

                -%}
                <li class="filter-item {{ status }} js-filter">
                  {% if is_color_filter %}
                    <a class="js-collection-side-filter {{ status }} swatches__shape--{{ settings.color_swatch_shape }}" href="{{ url }}" title="{{ value.label }}" data-filter-tag="{{ url }}">
                      <input type="checkbox"
                             name="{{ value.param_name }}"
                             value="{{ value.value }}"
                             id="{{ value.label | downcase | handle }}"
                             {% if value.active %}checked{% endif %}
                             {% if value.count == 0 and value.active == false %}disabled{% endif %} >
                             {%- capture classes -%}
                             color-filter color-filter--{{ status }} {{ status }} color-filter--{{- filter.presentation }}
                           {%- endcapture -%}
                           {% case filter.presentation %}
                             {% assign classes = classes | append: ' color-filter--rounded' %}
                             {% when 'swatch' %}
                               {% if value.swatch.image %}
                                 {{
                                   value.swatch.image
                                   | image_url: width: 300
                                   | image_tag: alt: value.swatch.image.alt, class: classes
                                 }}
                               {% elsif value.swatch.color %}
                                 {% assign swatch_background = 'rgb('
                                   | append: value.swatch.color.rgb
                                   | append: ')'
                                 %}
                                 <div class="{{- classes -}}" style="background: {{ swatch_background }};"></div>
                               {% endif %}
                             {% when 'image' %}
                               {% if value.image %}
                                 {{
                                   value.image
                                   | image_url: width: 300
                                   | image_tag: alt: value.image.alt, class: classes, style: swatch_size_class
                                 }}
                               {% endif %}
                             {% else %}
                               <span
                                 class="color-filter color-filter--rounded color-filter--{{ status }} {{ status }} color-filter--default"
                                 style="{{ bg_color }}{{ bg_img }}"
                               ></span>
                           {% endcase %}
                      <label for="{{ value.label | downcase | handle }}" class="color-filter--label vib-center">{{ value.label | escape }} <span class="filter__count">({{ value.count }})</span></label>
                    </a>
                  {% else %}
                    <a class="js-collection-side-filter {{ status }}" href="{{ url }}" data-filter-tag="{{ url }}">
                      <input type="checkbox"
                             name="{{ value.param_name }}"
                             value="{{ value.value }}"
                             id="{{ value.label | downcase | handle }}"
                             {% if value.active %}checked{% endif %}
                             {% if value.count == 0 and value.active == false %}disabled{% endif %} >
                      <label class="regular-filter--label" for="{{ value.label | downcase | handle }}">
                        {%- assign icon = value.label | handleize | strip -%}
                        {% render 'snip-icons-jewelry',
                           wrapper: '.product-form__text-icon',
                           type: 'theme',
                           icon: icon,
                           size: '24px',
                           classes: 'vib-center mr1',
                           fill: text_color,
                           hover: text_color %}

                        <span class="vib-center">{{ value.label | escape }}</span>
                        <span class="filter__count vib-center">({{ value.count }})</span>
                      </label>
                    </a>
                  {% endif %}
                </li>
              {% endfor %}</ul>
          </div>
        {% when 'price_range' %}
          {%- liquid
            assign currencies_using_comma_decimals = "ANG,ARS,BRL,BYN,BYR,CLF,CLP,COP,CRC,CZK,DKK,EUR,HRK,HUF,IDR,ISK,MZN,NOK,PLN,RON,RUB,SEK,TRY,UYU,VES,VND" | split: ','
            assign uses_comma_decimals = false

            if currencies_using_comma_decimals contains cart.currency.iso_code
              assign uses_comma_decimals = true
            endif
          -%}

          <div class="sidebar__filter-block sidebar-filter filter--price-range" data-filters-price-range>
            <p class="sm-caps">{{ filter.label | escape }}</p>
            <div class="filter-range__boxes js-price-range">
              <div class="filter-range__field inline-block w50">
                <label class="filter-range__field__label visually-hidden" for="Filter-{{ filter.label | escape }}">{{ 'collections.filter.from' | t }}</label>
                <span class="filter-range__field__currency">{{ cart.currency.symbol }}</span>
                <input class="filter-range__field__input js-filter-range-input js-price-min-output"
                  aria-label="Filter by price from low"
                  name="{{ filter.min_value.param_name }}"
                  id="Filter-{{ filter.label | escape }}"
                  placeholder="0"
                  {%- if filter.min_value.value -%}
                    {%- if uses_comma_decimals -%}
                      value="{{ filter.min_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                    {%- else -%}
                      value="{{ filter.min_value.value | money_without_currency | replace: ',', '' | round }}"
                    {%- endif -%}
                  {%- endif -%}
                  type="number"
                  min="0"
                  {%- if uses_comma_decimals -%}
                    max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                  {%- else -%}
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                  {%- endif -%}>
              </div>
              <div class="filter-range__field inline-block w50">
                <label class="filter-range__field__label visually-hidden" for="Filter-{{ filter.label | escape }}-{{ forloop.index }}">{{ 'collections.filter.to' | t }}</label>
                <span class="filter-range__field__currency">{{ cart.currency.symbol }}</span>
                <input class="filter-range__field__input js-filter-range-input js-price-max-output"
                  aria-label="Filter by price to high"
                  name="{{ filter.max_value.param_name }}"
                  id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                  {%- if filter.max_value.value -%}
                    {%- if uses_comma_decimals -%}
                      value="{{ filter.max_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                    {%- else -%}
                      value="{{ filter.max_value.value | money_without_currency | replace: ',', '' | round }}"
                    {% endif %}
                  {%- endif -%}
                  type="number"
                  min="0"
                  {%- if uses_comma_decimals -%}
                    placeholder="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                    max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                  {%- else -%}
                    placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                  {%- endif -%}>
              </div>

              <div class="filter-range__slider--wrapper w100">
                <input class="filter-range__slider--input"
                       aria-label="Price min"
                  tabindex="-1"
                  {%- if filter.min_value.value -%}
                    {%- if uses_comma_decimals -%}
                      value="{{ filter.min_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                    {%- else -%}
                      value="{{ filter.min_value.value | money_without_currency | replace: ',', '' | round }}"
                    {% endif %}
                  {%- else -%}
                    value="0"
                  {%- endif -%}
                  min="0"
                  {%- if uses_comma_decimals -%}
                    max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                  {%- else -%}
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                  {%- endif -%}
                  step="1"
                  type="range"/>
                <input class="filter-range__slider--input"
                       aria-label="Price max"
                 tabindex="-1"
                 {%- if filter.max_value.value -%}
                    {%- if uses_comma_decimals -%}
                      value="{{ filter.max_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                    {%- else -%}
                      value="{{ filter.max_value.value | money_without_currency | replace: ',', '' | round }}"
                    {%- endif -%}
                  {%- else -%}
                    {%- if uses_comma_decimals -%}
                      value="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                    {%- else -%}
                      value="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                    {%- endif -%}
                  {%- endif -%}
                  min="0"
                  {%- if uses_comma_decimals -%}
                    max="{{ filter.range_max | money_without_currency | replace: '.', '' | replace: ',', '.' | round }}"
                  {%- else -%}
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' | round }}"
                  {%- endif -%}
                  step="1"
                  type="range"/>
              </div>
            </div>
          </div>
        {% endcase %}
      {%- endfor -%}
    </div>
  {%- endunless -%}
  {%- unless has_sortby == false -%}
    <div class="filter-drawer__menu-block js-mobile-menu {% if collection.all_products_count >= 1000 or has_filter == false %}active--menu{% endif %} span-12 auto" data-menu-handle="sort">
      <div class="filter-drawer__header grid__wrapper edge">
        <p class="span-12 auto a-left text-lg font-bold">{{ 'collections.filter.sort_title' | t }}</p>
      </div>
      <ul class="slide-nav__first-level--wrapper" data-link-parent="main">
        <!-- Regular sort options -->
        {% for option in type.sort_options %}
          {%- liquid
            if option.value == collection.sort_by
              assign status = 'current'
            else
              assign status = 'available'
            endif
          -%}
      
          <li class="slide-nav__first-level--item js-filter {% if status == 'current' %}current{% endif %}">
            <input
              type="checkbox"
              name="sort_by"
              value="{{ option.value | escape }}"
              style="display: none;"
              id="{{ option.name | downcase | handle }}">
            <a class="slide-nav__first-level--link mb0 vib-center js-sort-option" href="?sort_by={{ option.value }}" data-sort-value="{{ option.value }}">
              <label for="{{ option.name | downcase | handle }}" class="filter__text--label">{{ option.name }}</label>
            </a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {%- endunless -%}

  {% comment %} {%- if filter_count > 0 -%}
    <div class="filter-drawer__filtering__results span-12 auto js-filters-reset">
      <p class="sm-caps mb1">{{ 'collections.filter.filtering_by_label' | t }}</p>
      <ul class="current_filters mb0">
        {%- for filter in type.filters -%}
          {%- for value in filter.active_values -%}
            <li class="current_filters--filter">
              <a class="js-current-filter" href="{{ value.url_to_remove }}">
                {{ value.label | escape }}
              </a>
            </li>
          {%- endfor -%}
          {% if filter.type == "price_range" %}
            {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
              <li class="current_filters--filter">
                <a class="js-current-filter" href="{{ filter.url_to_remove }}">
                  {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
                </a>
              </li>
            {%- endif -%}
          {% endif %}
        {%- endfor -%}
        {%- liquid
          if type == collection
            assign clear_url = collection.url
          else
            assign clear_url = routes.search_url
          endif
        -%}
        <li><a class="current_filters--clear js-current-filter ml4" href="{{ clear_url }}">{{ 'collections.filter.clear_all' | t }}</a></li>
      </ul>
    </div>
  {%- endif -%} {% endcomment %}

  <style>
    .slide-nav__first-level--item .filter__text--label {
      cursor: pointer;
      font-size: 14px;
      margin-top: 60px;
      font-weight: 500;
    }

    .slide-nav__first-level--item{
      margin-top: 12px !important;
    }
    
    /* Style for active sort option */
    .slide-nav__first-level--item.current .filter__text--label,
    .slide-nav__first-level--item.current a {
      color: #1d4ed8 !important;
    }
    
    /* Style for active price range */
    .filter--price-range.active .sm-caps,
    .filter--price-range.active .filter-range__field__currency {
      color: #1d4ed8 !important;
    }
    .filter--price-range.active .filter-range__field__input {
      border-color: #1d4ed8;
    }
  
    .filter-drawer__wrapper .filter--color label {
      cursor: pointer;
    }
    
    .regular-filter--label {
      pointer-events: none;
    }
    
    .filter-drawer__wrapper,
    .filter-drawer__menu-block {
      background: var(--background);
    }
    
    .filter-drawer__wrapper,
    .filter-drawer__wrapper label,
    .filter-drawer__wrapper small,
    .filter-drawer__wrapper p,
    .filter-drawer__wrapper p a,
    .filter-drawer__wrapper li a,
    .filter-drawer__wrapper .product-price {
      color: #323232 !important;
      font-size: 13px;
      font-weight: 500;
    }
    
    .filter-drawer__wrapper p a:hover,
    .filter-drawer__wrapper li a:hover {
      color: var(--text-color-light);
    }
    
    .filter-drawer__wrapper svg:hover .hover-fill {
      fill: var(--text-color-light);
    }
  
    /* Style for active filters section */
    .current_filters--filter a {
      color: #1d4ed8 !important;
      font-weight: 500;
    }
  
    .current_filters--clear {
      color: #323232 !important;
    }

    .filter-t {
      font-size: 14px !important;
      font-weight: 700 !important;
    }
    
    /* Loading state styling */
    .filter-drawer__wrapper.is-loading {
      opacity: 0.7;
      pointer-events: none;
      transition: opacity 0.2s;
    }
    
    /* Add spinner for loading state */
    .filter-drawer__wrapper.is-loading::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 30px;
      height: 30px;
      margin: -15px 0 0 -15px;
      border-radius: 50%;
      border: 3px solid rgba(0, 0, 0, 0.1);
      border-top-color: #1d4ed8;
      animation: spin 0.8s infinite linear;
    }
    
    @keyframes spin {
      from {transform: rotate(0deg);}
      to {transform: rotate(360deg);}
    }
  </style>
  
  <script>
document.addEventListener('DOMContentLoaded', function() {
  let isLoading = false;
  
  // Critical: Move drawer to body to fix positioning
  function moveDrawerToBody() {
    const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
    if (drawer && drawer.parentElement !== document.body) {
      document.body.appendChild(drawer);
    }
  }
  
  moveDrawerToBody();
  
  // DIRECT FIX FOR CURRENT FILTERS CLICK
  // This adds a dedicated event delegation for clicks on current filters in the main page
  function setupMainPageFiltersClickEvent() {
    const mainPage = document.querySelector('.collection__page--topbar');
    if (!mainPage) return;
    
    // Use event delegation to catch all filter clicks
    mainPage.addEventListener('click', function(e) {
      // Find the closest js-current-filter ancestor of the click target
      const filterLink = e.target.closest('.js-current-filter');
      
      // If the click wasn't on a filter link, ignore it
      if (!filterLink) return;
      
      // If the click was on a filter link, prevent default and handle it
      e.preventDefault();
      
      // Prevent multiple requests
      if (isLoading) return;
      isLoading = true;
      
      // Record the drawer state
      const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
      const wasDrawerOpen = drawer && drawer.classList.contains('slideout--active');
      
      // Make the AJAX request
      fetch(filterLink.href, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.text())
      .then(html => {
        // Parse the HTML
        const parser = new DOMParser();
        const newDocument = parser.parseFromString(html, 'text/html');
        
        // Update product grid
        const productGrid = document.querySelector('#main-collection-product-grid');
        const newProductGrid = newDocument.querySelector('#main-collection-product-grid');
        if (productGrid && newProductGrid) {
          productGrid.innerHTML = newProductGrid.innerHTML;
        }
        
        // Update main page filters
        const mainFiltersContainer = document.querySelector('.js-main-filters-container');
        const newMainFiltersContainer = newDocument.querySelector('.js-main-filters-container');
        if (mainFiltersContainer && newMainFiltersContainer) {
          mainFiltersContainer.innerHTML = newMainFiltersContainer.innerHTML;
        } else if (mainFiltersContainer && !newMainFiltersContainer) {
          mainFiltersContainer.style.display = 'none';
        }
        
        // CRITICAL FIX: FULL REPLACEMENT of filter drawer blocks
        const drawerWrapper = document.querySelector('.filter-drawer__wrapper');
        const newDrawerWrapper = newDocument.querySelector('.filter-drawer__wrapper');
        
        if (drawerWrapper && newDrawerWrapper) {
          // Get all filter blocks from both documents
          const drawerFilterMenu = drawerWrapper.querySelector('.filter-drawer__menu-block[data-menu-handle="filter"]');
          const newDrawerFilterMenu = newDrawerWrapper.querySelector('.filter-drawer__menu-block[data-menu-handle="filter"]');
          
          // Replace the entire filter menu content if both elements exist
          if (drawerFilterMenu && newDrawerFilterMenu) {
            drawerFilterMenu.innerHTML = newDrawerFilterMenu.innerHTML;
          }
        }
        
        // Maintain drawer state
        if (drawer) {
          if (!wasDrawerOpen) {
            drawer.classList.remove('slideout--active');
            drawer.setAttribute('aria-hidden', 'true');
            
            // Hide overlay
            const overlay = document.querySelector('.js-slideout-overlay');
            if (overlay) {
              overlay.classList.remove('is-active');
              overlay.setAttribute('aria-hidden', 'true');
            }
          }
        }
        
        // Re-initialize all handlers
        setupAllEventHandlers();
        
        // Update URL without page reload
        window.history.pushState({}, '', filterLink.href);
        
        isLoading = false;
      })
      .catch(error => {
        console.error('Error:', error);
        isLoading = false;
      });
    });
  }
  
  // Main function to update UI based on AJAX response
  function updateUIFromResponse(html) {
    const parser = new DOMParser();
    const newDocument = parser.parseFromString(html, 'text/html');
    
    // Update product grid
    const productGrid = document.querySelector('#main-collection-product-grid');
    const newProductGrid = newDocument.querySelector('#main-collection-product-grid');
    if (productGrid && newProductGrid) {
      productGrid.innerHTML = newProductGrid.innerHTML;
    }
    
    // Update filter drawer content
    const drawerWrapper = document.querySelector('.filter-drawer__wrapper');
    const newDrawerWrapper = newDocument.querySelector('.filter-drawer__wrapper');
    if (drawerWrapper && newDrawerWrapper) {
      // Instead of replacing the entire drawer, update only the inner filter parts
      // Update filter list sections
      const filterBlocks = drawerWrapper.querySelectorAll('.sidebar__filter-block');
      const newFilterBlocks = newDrawerWrapper.querySelectorAll('.sidebar__filter-block');
      
      if (filterBlocks.length > 0 && newFilterBlocks.length > 0) {
        for (let i = 0; i < Math.min(filterBlocks.length, newFilterBlocks.length); i++) {
          filterBlocks[i].innerHTML = newFilterBlocks[i].innerHTML;
        }
      }
      
      // Update current filters section
      const currentFilters = drawerWrapper.querySelector('.filter-drawer__filtering__results');
      const newCurrentFilters = newDrawerWrapper.querySelector('.filter-drawer__filtering__results');
      
      if (currentFilters && newCurrentFilters) {
        currentFilters.innerHTML = newCurrentFilters.innerHTML;
      } else if (!currentFilters && newCurrentFilters) {
        // Add the filters section if it didn't exist before
        drawerWrapper.appendChild(newCurrentFilters.cloneNode(true));
      } else if (currentFilters && !newCurrentFilters) {
        // Hide the filters section if it no longer exists
        currentFilters.style.display = 'none';
      }
      
      // Reinitialize all event handlers without replacing the entire drawer
      setupAllEventHandlers();
    }
    
    // Update main page filters container
    const mainFiltersContainer = document.querySelector('.js-main-filters-container');
    const newMainFiltersContainer = newDocument.querySelector('.js-main-filters-container');
    
    if (mainFiltersContainer && newMainFiltersContainer) {
      // Only update filter list content, not container styling
      const mainFiltersList = mainFiltersContainer.querySelector('.js-main-filters-list');
      const newMainFiltersList = newMainFiltersContainer.querySelector('.js-main-filters-list');
      
      if (mainFiltersList && newMainFiltersList) {
        mainFiltersList.innerHTML = newMainFiltersList.innerHTML;
      }
      
      // Show or hide container based on filter presence
      const hasFilters = newMainFiltersList && newMainFiltersList.children.length > 0;
      mainFiltersContainer.style.display = hasFilters ? 'block' : 'none';
    } else if (!mainFiltersContainer && newMainFiltersContainer) {
      // If we need to add the main filters container
      const topbar = document.querySelector('.collection__page--topbar');
      if (topbar) {
        topbar.appendChild(newMainFiltersContainer.cloneNode(true));
      }
    }
    
    // Update filter count display if it exists
    const filterCount = document.querySelector('.js-filter-count');
    const newFilterCount = newDocument.querySelector('.js-filter-count');
    if (filterCount && newFilterCount) {
      filterCount.textContent = newFilterCount.textContent;
    }
    
    // Update product count if it exists
    const productCount = document.querySelector('.js-product-count');
    const newProductCount = newDocument.querySelector('.js-product-count');
    if (productCount && newProductCount) {
      productCount.textContent = newProductCount.textContent;
    }
    
    // Update any mobile filter buttons
    const mobileFilterButton = document.querySelector('.js-filter-button');
    const newMobileFilterButton = newDocument.querySelector('.js-filter-button');
    if (mobileFilterButton && newMobileFilterButton) {
      mobileFilterButton.innerHTML = newMobileFilterButton.innerHTML;
    }
  }
  
  // Make this function available globally
  window.updateUIFromResponse = updateUIFromResponse;
  
  // Setup all event handlers
  function setupAllEventHandlers() {
    setupAjaxFiltering();
    setupPermanentDrawer();
    setupPriceRangeHandlers();
    setupSortingHandlers();
    setupDrawerMenuSwitching();
    setupMainPageFiltersClickEvent(); // Added this line to ensure main page filters are set up
  }
  
  // AJAX filtering implementation
  function setupAjaxFiltering() {
    // Handle filter clicks
    document.querySelectorAll('.js-collection-side-filter').forEach(link => {
      const newLink = link.cloneNode(true);
      link.parentNode.replaceChild(newLink, link);
      
      newLink.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Prevent multiple requests
        if (isLoading) return;
        isLoading = true;
        
        // Add loading state
        const drawerWrapper = document.querySelector('.filter-drawer__wrapper');
        drawerWrapper.classList.add('is-loading');
        
        // Use fetch with timeout
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 10000); // 10 second timeout
        
        fetch(this.href, {
          signal: controller.signal,
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          clearTimeout(timeout);
          return response.text();
        })
        .then(html => {
          updateUIFromResponse(html);
          
          // Keep drawer open
          const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
          if (drawer) {
            drawer.classList.add('slideout--active');
            drawer.setAttribute('aria-hidden', 'false');
            
            // Ensure overlay is visible
            const overlay = document.querySelector('.js-slideout-overlay');
            if (overlay) {
              overlay.classList.add('is-active');
              overlay.setAttribute('aria-hidden', 'false');
            }
          }
          
          // Remove loading state
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
          
          // Update URL
          window.history.pushState({}, '', this.href);
        })
        .catch(error => {
          console.error('Error:', error);
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
        });
      });
    });
    
    // Handle clear all filter and individual filter removal within drawer
    document.querySelectorAll('.filter-drawer__wrapper .js-current-filter').forEach(link => {
      const newLink = link.cloneNode(true);
      link.parentNode.replaceChild(newLink, link);
      
      newLink.addEventListener('click', function(e) {
        e.preventDefault();
        
        if (isLoading) return;
        isLoading = true;
        
        // Add loading state
        document.querySelector('.filter-drawer__wrapper').classList.add('is-loading');
        
        fetch(this.href, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.text())
        .then(html => {
          updateUIFromResponse(html);
          
          // Keep drawer open for click inside drawer
          const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
          if (drawer) {
            drawer.classList.add('slideout--active');
            drawer.setAttribute('aria-hidden', 'false');
            
            // Ensure overlay is visible
            const overlay = document.querySelector('.js-slideout-overlay');
            if (overlay) {
              overlay.classList.add('is-active');
              overlay.setAttribute('aria-hidden', 'false');
            }
          }
          
          // Remove loading state
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
          
          // Update URL
          window.history.pushState({}, '', this.href);
        })
        .catch(error => {
          console.error('Error:', error);
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
        });
      });
    });
  }
  
  // Handle sorting options
  function setupSortingHandlers() {
    document.querySelectorAll('.js-sort-option').forEach(link => {
      const newLink = link.cloneNode(true);
      link.parentNode.replaceChild(newLink, link);
      
      newLink.addEventListener('click', function(e) {
        e.preventDefault();
        
        if (isLoading) return;
        isLoading = true;
        
        document.querySelector('.filter-drawer__wrapper').classList.add('is-loading');
        
        fetch(this.href, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.text())
        .then(html => {
          updateUIFromResponse(html);
          
          // Update sort UI
          document.querySelectorAll('.js-sort-option').forEach(opt => {
            opt.parentElement.classList.remove('current');
          });
          this.parentElement.classList.add('current');
          
          // Keep drawer open
          const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
          if (drawer) {
            drawer.classList.add('slideout--active');
            drawer.setAttribute('aria-hidden', 'false');
            
            // Ensure overlay is visible
            const overlay = document.querySelector('.js-slideout-overlay');
            if (overlay) {
              overlay.classList.add('is-active');
              overlay.setAttribute('aria-hidden', 'false');
            }
          }
          
          // Remove loading state
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
          
          // Update URL
          window.history.pushState({}, '', this.href);
        })
        .catch(error => {
          console.error('Error:', error);
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
        });
      });
    });
  }
  
  // Keep drawer open
  function setupPermanentDrawer() {
    const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
    if (!drawer) return;
    
    const originalCloseByName = WAU.Slideout._closeByName;
    
    WAU.Slideout._closeByName = function(name) {
      if (name === 'collection-filters') {
        if (drawer.getAttribute('data-should-close') === 'true') {
          drawer.removeAttribute('data-should-close');
          originalCloseByName.call(this, name);
        }
      } else {
        originalCloseByName.call(this, name);
      }
    };
    
    const closeButton = drawer.querySelector('.js-slideout-close');
    if (closeButton) {
      closeButton.addEventListener('click', function(e) {
        drawer.setAttribute('data-should-close', 'true');
        WAU.Slideout._closeByName('collection-filters');
      });
    }
    
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && drawer.classList.contains('slideout--active')) {
        drawer.setAttribute('data-should-close', 'true');
        WAU.Slideout._closeByName('collection-filters');
      }
    });
    
    const overlay = document.querySelector('.js-slideout-overlay');
    if (overlay) {
      overlay.addEventListener('click', function(e) {
        if (e.target === overlay) {
          drawer.setAttribute('data-should-close', 'true');
          WAU.Slideout._closeByName('collection-filters');
        }
      });
    }
  }
  
  // Handle price range changes
  function setupPriceRangeHandlers() {
    const priceInputs = document.querySelectorAll('.js-filter-range-input');
    const sliderInputs = document.querySelectorAll('.filter-range__slider--input');
    let timeout;
    
    function updatePriceRangeUI(isActive) {
      const priceRange = document.querySelector('.filter--price-range');
      if (priceRange) {
        if (isActive) {
          priceRange.classList.add('active');
        } else {
          priceRange.classList.remove('active');
        }
      }
    }
    
    function handlePriceChange(input) {
      if (isLoading) return;
      
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        isLoading = true;
        
        const priceRange = input.closest('.filter--price-range');
        const minInput = priceRange.querySelector('.js-price-min-output');
        const maxInput = priceRange.querySelector('.js-price-max-output');
        
        const minVal = minInput.value;
        const maxVal = maxInput.value;
        
        // Check if price filter is active
        const isPriceFilterActive = minVal > 0 || (maxVal && maxVal < priceRange.querySelector('.js-price-max-output').getAttribute('max'));
        updatePriceRangeUI(isPriceFilterActive);
        
        // Build URL with price filters
        const url = new URL(window.location.href);
        if (minVal) url.searchParams.set('filter.v.price.gte', minVal * 100);
        else url.searchParams.delete('filter.v.price.gte');
        
        if (maxVal) url.searchParams.set('filter.v.price.lte', maxVal * 100);
        else url.searchParams.delete('filter.v.price.lte');
        
        document.querySelector('.filter-drawer__wrapper').classList.add('is-loading');
        
        fetch(url.toString(), {
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.text())
        .then(html => {
          updateUIFromResponse(html);
          
          // Keep drawer open
          const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
          if (drawer) {
            drawer.classList.add('slideout--active');
            drawer.setAttribute('aria-hidden', 'false');
            
            // Ensure overlay is visible
            const overlay = document.querySelector('.js-slideout-overlay');
            if (overlay) {
              overlay.classList.add('is-active');
              overlay.setAttribute('aria-hidden', 'false');
            }
          }
          
          // Remove loading state
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
          
          // Update URL
          window.history.pushState({}, '', url.toString());
        })
        .catch(error => {
          console.error('Error:', error);
          document.querySelector('.filter-drawer__wrapper').classList.remove('is-loading');
          isLoading = false;
        });
      }, 800); // Shorter timeout for better responsiveness
    }
    
    priceInputs.forEach(input => {
      input.addEventListener('change', function() {
        handlePriceChange(this);
      });
      
      input.addEventListener('input', function() {
        // Also sync the slider with the input value
        const priceRange = this.closest('.filter--price-range');
        const sliders = priceRange.querySelectorAll('.filter-range__slider--input');
        
        if (this.classList.contains('js-price-min-output')) {
          sliders[0].value = this.value;
        } else if (this.classList.contains('js-price-max-output')) {
          sliders[1].value = this.value;
        }
      });
    });
    
    sliderInputs.forEach((input, index) => {
      input.addEventListener('input', function() {
        const priceRange = this.closest('.filter--price-range');
        const minSlider = priceRange.querySelectorAll('.filter-range__slider--input')[0];
        const maxSlider = priceRange.querySelectorAll('.filter-range__slider--input')[1];
        const minInput = priceRange.querySelector('.js-price-min-output');
        const maxInput = priceRange.querySelector('.js-price-max-output');
        
        if (this === minSlider) {
          minInput.value = this.value;
          // Ensure min doesn't exceed max
          if (parseInt(minInput.value) > parseInt(maxInput.value)) {
            maxInput.value = minInput.value;
            maxSlider.value = minInput.value;
          }
        } else {
          maxInput.value = this.value;
          // Ensure max doesn't fall below min
          if (parseInt(maxInput.value) < parseInt(minInput.value)) {
            minInput.value = maxInput.value;
            minSlider.value = maxInput.value;
          }
        }
        
        handlePriceChange(this);
      });
    });
    
    // Check if price filter is active and update UI accordingly
    const priceRange = document.querySelector('.filter--price-range');
    if (priceRange) {
      const minInput = priceRange.querySelector('.js-price-min-output');
      const maxInput = priceRange.querySelector('.js-price-max-output');
      
      if (minInput && maxInput) {
        const minVal = parseInt(minInput.value) || 0;
        const maxVal = parseInt(maxInput.value) || parseInt(maxInput.getAttribute('max'));
        const maxDefaultVal = parseInt(maxInput.getAttribute('max'));
        
        updatePriceRangeUI(minVal > 0 || (maxVal && maxVal < maxDefaultVal));
      }
    }
  }
  
  // Handle drawer menu switching based on button clicked
  function setupDrawerMenuSwitching() {
    const drawer = document.querySelector('[data-wau-slideout="collection-filters"]');
    if (!drawer) return;
    
    // Listen for slideout open events
    if (typeof Events !== 'undefined') {
      Events.on('slideout:open:collection-filters', function() {
        const menuButtons = document.querySelectorAll('.js-menu-toggle');
        
        menuButtons.forEach(button => {
          button.addEventListener('click', function() {
            const targetMenu = this.dataset.toggleMenu;
            const menuBlocks = drawer.querySelectorAll('.js-mobile-menu');
            
            // Hide all menu blocks
            menuBlocks.forEach(block => {
              block.style.display = 'none';
              block.classList.remove('active--menu');
            });
            
            // Show the target menu block
            const targetBlock = drawer.querySelector(`[data-menu-handle="${targetMenu}"]`);
            if (targetBlock) {
              targetBlock.style.display = 'block';
              targetBlock.classList.add('active--menu');
            }
          });
        });
      });
    }
    
    // Set up initial state based on which button was clicked
    const filterButton = document.querySelector('[data-toggle-menu="filter"]');
    const sortButton = document.querySelector('[data-toggle-menu="sort"]');
    
    if (filterButton) {
      filterButton.addEventListener('click', function() {
        setTimeout(() => {
          const menuBlocks = drawer.querySelectorAll('.js-mobile-menu');
          menuBlocks.forEach(block => {
            if (block.dataset.menuHandle === 'filter') {
              block.style.display = 'block';
              block.classList.add('active--menu');
            } else {
              block.style.display = 'none';
              block.classList.remove('active--menu');
            }
          });
        }, 50);
      });
    }
    
    if (sortButton) {
      sortButton.addEventListener('click', function() {
        setTimeout(() => {
          const menuBlocks = drawer.querySelectorAll('.js-mobile-menu');
          menuBlocks.forEach(block => {
            if (block.dataset.menuHandle === 'sort') {
              block.style.display = 'block';
              block.classList.add('active--menu');
            } else {
              block.style.display = 'none';
              block.classList.remove('active--menu');
            }
          });
        }, 50);
      });
    }
  }
  
  // Handle browser back/forward buttons
  window.addEventListener('popstate', function() {
    if (!isLoading) {
      isLoading = true;
      
      fetch(window.location.href, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.text())
      .then(html => {
        updateUIFromResponse(html);
        isLoading = false;
      })
      .catch(error => {
        console.error('Error:', error);
        window.location.reload();
        isLoading = false;
      });
    }
  });
  
  // Initialize all handlers
  setupAllEventHandlers();
});
  </script>
</div>