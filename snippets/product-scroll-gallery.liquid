{% comment %}
  product-scroll-gallery.liquid - Fully Optimized for Mobile LCP
{% endcomment %}

<div id="product-images" class="product-images-container">
  {% if product.featured_media %}
    <div id="main-image-gallery" class="product-main-images mb2 sm-mb0">
      <div class="product-images__scroll-gallery-container js-scroll-gallery" id="scrollGalleryContainer">
        {% for media in product.media %}
          {%- liquid
            assign is_selected = ''
            assign current_id = product.selected_or_first_available_variant.media | default: product.featured_media
            if current_id.id == media.id
              assign is_selected = 'is-selected'
            endif
          -%}
          <div class="{{ media.media_type }}-slide scroll--gallery_item carousel-cell {{ is_selected }}" 
               data-image-id="{{ media.id }}" 
               data-slide-index="{{ forloop.index0 }}" 
               tabindex="-1">
            <div class="product-gallery__media-container product-media--{{ media.id }} {{ media.media_type }}"
                 data-product-single-media-wrapper
                 {% if media.media_type == 'video' %} data-product-media-type-video data-enable-video-looping="{{ enable_video_looping }}"{% endif %}
                 {% if media.media_type == 'external_video' %} data-product-media-type-video data-enable-video-looping="{{ enable_video_looping }}" data-video-id="{{ media.external_id }}"{% endif %}
                 {% if media.media_type == 'model' %} data-product-media-type-model{% endif %}
                 data-thumbnail-id="product-template-{{ media.id }}"
                 data-media-id="product-template-{{ media.id }}">
              {% case media.media_type %}
                {% when 'image' %}
                  {%- capture counter -%}
                    {%- increment image_count -%}
                  {%- endcapture -%}
                  
                  {% if forloop.first %}
                    {% comment %} FIRST IMAGE - Optimized for mobile 412px display size {% endcomment %}
                    <picture>
                      <source media="(max-width: 768px)"
                              srcset="{{ media | image_url: width: 412 }} 412w,
                                      {{ media | image_url: width: 600 }} 600w">
                      <source media="(min-width: 769px)"
                              srcset="{{ media | image_url: width: 600 }} 600w,
                                      {{ media | image_url: width: 900 }} 900w,
                                      {{ media | image_url: width: 1200 }} 1200w">
                      <img id="{{ media.id }}" 
                           class="product__image {% if section.settings.click_to_enlarge %}js-zoom-btn{% endif %}"
                           src="{{ media | image_url: width: 412 }}"
                           alt="{{ media.alt | escape }}"
                           width="{{ media.width }}"
                           height="{{ media.height }}"
                           loading="eager"
                           fetchpriority="high"
                           decoding="sync"
                           style="aspect-ratio: {{ media.aspect_ratio }}; object-fit: contain; content-visibility: auto;"
                           sizes="(max-width: 768px) 412px, (min-width: 769px) 50vw"
                           data-zoom-src="{{ media | image_url: width: 1920 }}"
                           data-index="1">
                    </picture>
                  {% elsif forloop.index <= 3 %}
                    {% comment %} IMAGES 2-3 - Preloaded but lower priority {% endcomment %}
                    <picture>
                      <source media="(max-width: 768px)"
                              srcset="{{ media | image_url: width: 412 }} 412w,
                                      {{ media | image_url: width: 600 }} 600w">
                      <source media="(min-width: 769px)"
                              srcset="{{ media | image_url: width: 600 }} 600w,
                                      {{ media | image_url: width: 900 }} 900w,
                                      {{ media | image_url: width: 1200 }} 1200w">
                      <img id="{{ media.id }}" 
                           class="product__image {% if section.settings.click_to_enlarge %}js-zoom-btn{% endif %}"
                           src="{{ media | image_url: width: 412 }}"
                           alt="{{ media.alt | escape }}"
                           width="{{ media.width }}"
                           height="{{ media.height }}"
                           loading="eager"
                           fetchpriority="low"
                           decoding="async"
                           style="aspect-ratio: {{ media.aspect_ratio }};"
                           sizes="(max-width: 768px) 412px, (min-width: 769px) 50vw"
                           data-zoom-src="{{ media | image_url: width: 1920 }}"
                           data-index="{{ counter }}">
                    </picture>
                  {% else %}
                    {% comment %} OTHER IMAGES - Lazy loaded {% endcomment %}
                    <img id="{{ media.id }}" 
                         class="product__image {% if section.settings.click_to_enlarge %}js-zoom-btn{% endif %}"
                         srcset="{{ media | image_url: width: 412 }} 412w,
                                 {{ media | image_url: width: 600 }} 600w,
                                 {{ media | image_url: width: 900 }} 900w,
                                 {{ media | image_url: width: 1200 }} 1200w"
                         src="{{ media | image_url: width: 412 }}"
                         sizes="(max-width: 768px) 412px, (min-width: 769px) 50vw"
                         alt="{{ media.alt | escape }}"
                         width="{{ media.width }}"
                         height="{{ media.height }}"
                         loading="lazy"
                         fetchpriority="auto"
                         decoding="async"
                         style="aspect-ratio: {{ media.aspect_ratio }};"
                         data-zoom-src="{{ media | image_url: width: 1920 }}"
                         data-index="{{ counter }}">
                  {% endif %}

                {% when 'external_video' %}
                  <div class="product-gallery__product-video videoWrapper video-wrapper product-single__media js-video-external-wrapper">
                    {{ media | external_video_tag }}
                  </div>
                {% when 'video' %}
                  {% style %}
                    @media screen and (max-width: 320px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 360 }}) !important;
                      }
                    }
                    @media screen and (min-width: 320px) and (max-width: 780px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 412 }}) !important;
                      }
                    }
                    @media screen and (min-width: 780px) and (max-width: 1080px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 900 }}) !important;
                      }
                    }
                    @media screen and (min-width: 1080px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 1200 }}) !important;
                      }
                    }
                  {% endstyle %}
                  <div class="product-gallery__product-video product-single__media js-video-plyr-wrapper">
                    {{ media | video_tag: class: 'media-video', image_size: '800x' }}
                  </div>
                {% when 'model' %}
                  <div class="product-gallery__product-model product-single__media" style="padding-bottom: 100%">
                    {{ media | model_viewer_tag: image_size: '800x', reveal: 'interaction', toggleable: true, data-model-id: media.id }}
                  </div>
              {% endcase %}
            </div>
          </div>
        {% endfor %}
      </div>
      
      {% assign first_3d_model = product.media | where: "media_type", "model" | first %}
      {%- if first_3d_model -%}
        <button
          aria-label="{{ 'products.product.view_in_space_label' | t }}"
          class="media-button product-single__view-in-space"
          data-shopify-xr
          data-shopify-model3d-id="{{ first_3d_model.id }}"
          data-shopify-title="{{ product.title | escape }}"
          data-shopify-xr-hidden>
          {% render 'snip-icons',
             wrapper: '.product-single__view-in-space',
             type: 'media-icons',
             size: '25px',
             icon: '3d-icon',
             classes: 'vib-center'
             fill: 'var(--text-color)' %}
          <span class='product-single__view-in-space-text vib-center'>{{ 'products.product.view_in_space' | t }}</span>
        </button>
      {%- endif -%}
    </div>
  {% else %}
    <div class="product-images__scroll-gallery-container">
      {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}
      <span class="demo-1 ">{{ 'product-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}</span>
    </div>
  {% endif %}
  {% if section.settings.click_to_enlarge %}
    {%- style -%}
      @media (min-width: 1024px) {
        .product-images__scroll-gallery-container img:hover {
          cursor: zoom-in;
        }
      }
    {%- endstyle -%}
  {% endif %}
</div>

<style>
/* Critical CSS for LCP - Prevent layout shift */
.product-gallery__media-container {
  aspect-ratio: 1;
  background: #f6f6f6;
  position: relative;
  overflow: hidden;
  contain: layout style paint;
}

.product__image {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

/* Ensure first image is visible immediately */
.scroll--gallery_item:first-child {
  display: block !important;
  opacity: 1 !important;
  visibility: visible !important;
}

/* Mobile specific optimizations */
@media (max-width: 768px) {
  #product-images {
    min-height: 100vw;
  }
  .product-gallery__media-container {
    width: 100%;
    max-width: 412px;
    margin: 0 auto;
  }
}

@media (min-width: 769px) {
  #product-images {
    min-height: 50vw;
  }
}
</style>

<script>
// Optimized Gallery JavaScript - Deferred for LCP
(function() {
  'use strict';
  
  // Defer gallery initialization to not block LCP
  if ('requestIdleCallback' in window) {
    requestIdleCallback(initializeGallery, { timeout: 2000 });
  } else {
    setTimeout(initializeGallery, 100);
  }
  
  function initializeGallery() {
    console.log('Initializing optimized gallery...');
    
    const galleryContainer = document.getElementById('scrollGalleryContainer');
    if (!galleryContainer) {
      console.log('Gallery container not found');
      return;
    }
    
    const screenWidth = window.innerWidth;
    console.log('Screen width:', screenWidth);
    
    if (screenWidth < 1024) {
      setupMobileCarousel(galleryContainer);
    } else {
      setupDesktopGrid(galleryContainer);
    }
  }

  function setupMobileCarousel(container) {
    console.log('Setting up mobile carousel');
    
    // Store current slide index before destroying
    let currentIndex = 0;
    if (container.classList.contains('flickity-enabled')) {
      const existing = Flickity.data(container);
      if (existing) {
        currentIndex = existing.selectedIndex || 0;
        existing.destroy();
      }
    }
    
    // Check if Flickity exists
    if (typeof Flickity === 'undefined') {
      console.log('Flickity not available, falling back to basic mobile layout');
      setupBasicMobileLayout(container);
      return;
    }
    
    const slides = container.querySelectorAll('.scroll--gallery_item');
    console.log('Found slides for mobile:', slides.length);
    
    if (slides.length === 0) return;
    
    // Force all images to be visible first
    slides.forEach(slide => {
      slide.style.display = 'block';
      slide.style.opacity = '1';
      slide.style.visibility = 'visible';
    });
    
    // Initialize Flickity with optimized settings
    try {
      const flickityInstance = new Flickity(container, {
        cellAlign: 'left',
        contain: true,
        wrapAround: slides.length > 2,
        prevNextButtons: slides.length > 1,
        pageDots: slides.length > 1,
        draggable: true,
        freeScroll: false,
        percentPosition: false,
        selectedAttraction: 0.025,
        friction: 0.28,
        groupCells: false,
        adaptiveHeight: false,  // Prevent layout shifts
        cellSelector: '.scroll--gallery_item',
        resize: true,
        watchCSS: false,
        imagesLoaded: false,  // We handle loading ourselves
        lazyLoad: false  // We handle lazy loading in HTML
      });
      
      console.log('Flickity initialized successfully');
      
      // Restore previous slide position
      if (currentIndex > 0 && currentIndex < slides.length) {
        flickityInstance.select(currentIndex, false, true);
      }
      
      flickityInstance.on('ready', function() {
        console.log('Flickity ready');
        ensureDotsVisible(container);
      });
      
      flickityInstance.on('change', function(index) {
        console.log('Changed to slide:', index);
        container.setAttribute('data-current-slide', index);
        
        // Preload adjacent images
        preloadSlideImages(slides, index);
      });
      
      return flickityInstance;
      
    } catch (error) {
      console.error('Flickity initialization error:', error);
      setupBasicMobileLayout(container);
    }
  }

  function setupBasicMobileLayout(container) {
    console.log('Setting up basic mobile layout');
    
    const slides = container.querySelectorAll('.scroll--gallery_item');
    
    // Show only first slide initially
    slides.forEach((slide, index) => {
      if (index === 0) {
        slide.style.display = 'block';
        slide.classList.add('is-selected');
      } else {
        slide.style.display = 'none';
      }
    });
    
    // Create simple navigation if multiple slides
    if (slides.length > 1) {
      createSimpleNavigation(container, slides);
    }
  }

  function createSimpleNavigation(container, slides) {
    // Remove existing navigation
    const existingNav = container.querySelector('.simple-nav');
    if (existingNav) existingNav.remove();
    
    const nav = document.createElement('div');
    nav.className = 'simple-nav';
    nav.style.cssText = `
      display: flex;
      justify-content: center;
      margin-top: 20px;
      gap: 10px;
    `;
    
    slides.forEach((slide, index) => {
      const dot = document.createElement('button');
      dot.className = 'simple-dot';
      dot.style.cssText = `
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: none;
        background: ${index === 0 ? '#333' : '#ddd'};
        cursor: pointer;
        transition: background 0.3s ease;
      `;
      
      dot.addEventListener('click', () => {
        // Hide all slides
        slides.forEach(s => {
          s.style.display = 'none';
          s.classList.remove('is-selected');
        });
        
        // Show selected slide
        slide.style.display = 'block';
        slide.classList.add('is-selected');
        
        // Update dots
        nav.querySelectorAll('.simple-dot').forEach((d, i) => {
          d.style.background = i === index ? '#333' : '#ddd';
        });
        
        // Preload adjacent images
        preloadSlideImages(slides, index);
      });
      
      nav.appendChild(dot);
    });
    
    container.appendChild(nav);
  }

  function setupDesktopGrid(container) {
    console.log('Setting up desktop grid');
    
    // Destroy Flickity if exists
    if (container.classList.contains('flickity-enabled')) {
      const flickityInstance = Flickity.data(container);
      if (flickityInstance) {
        flickityInstance.destroy();
      }
    }
    
    // Remove any mobile navigation
    const simpleNav = container.querySelector('.simple-nav');
    if (simpleNav) simpleNav.remove();
    
    // Ensure all slides are visible for desktop grid
    const slides = container.querySelectorAll('.scroll--gallery_item');
    slides.forEach(slide => {
      slide.style.display = 'block';
      slide.style.opacity = '1';
      slide.style.visibility = 'visible';
      slide.style.position = 'static';
    });
    
    // Clean up any scroll prevention
    container.removeAttribute('data-current-slide');
  }

  function preloadSlideImages(slides, currentIndex) {
    // Preload current and next 2 slides
    const indicesToLoad = [
      currentIndex,
      Math.min(slides.length - 1, currentIndex + 1),
      Math.min(slides.length - 1, currentIndex + 2)
    ];
    
    indicesToLoad.forEach(index => {
      const slide = slides[index];
      if (slide) {
        const img = slide.querySelector('img');
        if (img && img.loading === 'lazy') {
          img.loading = 'eager';
        }
      }
    });
  }

  function ensureDotsVisible(container) {
    if (window.innerWidth >= 1024) return;
    
    const slides = container.querySelectorAll('.scroll--gallery_item');
    if (slides.length <= 1) return;
    
    setTimeout(() => {
      const dots = container.querySelector('.flickity-page-dots');
      if (dots) {
        dots.style.display = 'block';
        dots.style.visibility = 'visible';
        dots.style.opacity = '1';
        dots.style.position = 'relative';
        dots.style.marginTop = '20px';
        dots.style.textAlign = 'center';
        console.log('Dots made visible');
      }
    }, 100);
  }

  function switchToImage(mediaId) {
    const targetSlide = document.querySelector(`[data-image-id="${mediaId}"]`);
    if (!targetSlide) return;
    
    document.querySelectorAll('.scroll--gallery_item').forEach(slide => {
      slide.classList.remove('is-selected');
    });
    
    targetSlide.classList.add('is-selected');
    
    if (window.innerWidth < 1024) {
      const container = document.getElementById('scrollGalleryContainer');
      if (container && container.classList.contains('flickity-enabled')) {
        const flickityInstance = Flickity.data(container);
        if (flickityInstance) {
          const slideIndex = Array.from(container.querySelectorAll('.scroll--gallery_item')).indexOf(targetSlide);
          flickityInstance.select(slideIndex);
          container.setAttribute('data-current-slide', slideIndex);
        }
      } else {
        // Handle simple navigation
        const slides = document.querySelectorAll('.scroll--gallery_item');
        const slideIndex = Array.from(slides).indexOf(targetSlide);
        
        slides.forEach(slide => {
          slide.style.display = 'none';
          slide.classList.remove('is-selected');
        });
        
        targetSlide.style.display = 'block';
        targetSlide.classList.add('is-selected');
        
        // Update simple navigation dots if they exist
        const nav = document.querySelector('.simple-nav');
        if (nav) {
          nav.querySelectorAll('.simple-dot').forEach((dot, index) => {
            dot.style.background = index === slideIndex ? '#333' : '#ddd';
          });
        }
      }
    }
    
    // Ensure image is loaded
    const img = targetSlide.querySelector('img');
    if (img && img.loading === 'lazy') {
      img.loading = 'eager';
    }
  }
  
  // Handle resize with debounce
  let resizeTimer;
  window.addEventListener('resize', function() {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(initializeGallery, 250);
  });

  // Export functions for global use
  window.switchToImage = switchToImage;

  // Handle variant changes
  document.addEventListener('variant:change', function(e) {
    if (e.detail && e.detail.variant && e.detail.variant.featured_media) {
      switchToImage(e.detail.variant.featured_media.id);
    }
  });

  // Intersection Observer for lazy images
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          if (img.loading === 'lazy') {
            img.loading = 'eager';
          }
        }
      });
    }, {
      rootMargin: '50px'
    });

    // Only observe lazy loaded images
    document.querySelectorAll('.scroll--gallery_item img[loading="lazy"]').forEach(img => {
      imageObserver.observe(img);
    });
  }
})();
</script>
<script src="{{ 'fixed-zoom-button.js' | asset_url }}" defer></script>