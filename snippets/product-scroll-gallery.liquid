{% comment %}
  product-scroll-gallery.liquid - Fixed with Flickity mobile + desktop grid
{% endcomment %}

<div id="product-images" class="product-images-container">
  {% if product.featured_media %}
    <div id="main-image-gallery" class="product-main-images mb2 sm-mb0">
      <div class="product-images__scroll-gallery-container js-scroll-gallery" id="scrollGalleryContainer">
        {% for media in product.media %}
          {%- liquid
            assign is_selected = ''
            assign current_id = product.selected_or_first_available_variant.media | default: product.featured_media
            if current_id.id == media.id
              assign is_selected = 'is-selected'
            endif

            assign loading = 'lazy'
            assign fetch_priority = 'auto'

            if section.index == 1 and forloop.first
              assign loading = 'eager'
              assign fetch_priority = 'high'
            endif
          -%}
          <div class="{{ media.media_type }}-slide scroll--gallery_item carousel-cell {{ is_selected }}" 
               data-image-id="{{ media.id }}" 
               data-slide-index="{{ forloop.index0 }}" 
               tabindex="-1">
            <div class="product-gallery__media-container product-media--{{ media.id }} {{ media.media_type }}"
                 data-product-single-media-wrapper
                 {% if media.media_type == 'video' %} data-product-media-type-video data-enable-video-looping="{{ enable_video_looping }}"{% endif %}
                 {% if media.media_type == 'external_video' %} data-product-media-type-video data-enable-video-looping="{{ enable_video_looping }}" data-video-id="{{ media.external_id }}"{% endif %}
                 {% if media.media_type == 'model' %} data-product-media-type-model{% endif %}
                 data-thumbnail-id="product-template-{{ media.id }}"
                 data-media-id="product-template-{{ media.id }}">
              {% case media.media_type %}
                {% when 'image' %}
                {%- capture counter -%}
                  {%- increment image_count -%}
                {%- endcapture -%}
                  <img id="{{ media.id }}" 
                       class="product__image {% if section.settings.click_to_enlarge %}js-zoom-btn{% endif %}"
                       srcset="{%- if media.width >= 180 -%}{{ media | image_url: width: 180 }} 180w,{%- endif -%}
                       {%- if media.width >= 360 -%}{{ media | image_url: width: 360 }} 360w,{%- endif -%}
                       {%- if media.width >= 540 -%}{{ media | image_url: width: 540 }} 540w,{%- endif -%}
                       {%- if media.width >= 720 -%}{{ media | image_url: width: 720 }} 720w,{%- endif -%}
                       {%- if media.width >= 780 -%}{{ media | image_url: width: 780 }} 780w,{%- endif -%}
                       {%- if media.width >= 900 -%}{{ media | image_url: width: 900 }} 900w,{%- endif -%}
                       {%- if media.width >= 1080 -%}{{ media | image_url: width: 1080 }} 1080w,{%- endif -%}
                       {%- if media.width >= 1220 -%}{{ media | image_url: width: 1220 }} 1220w,{%- endif -%}
                       {%- if media.width >= 1520 -%}{{ media | image_url: width: 1520 }} 1520w,{%- endif -%}
                       {%- if media.width >= 1920 -%}{{ media | image_url: width: 1920 }} 1920w{%- endif -%}"
                       src="{{ media | image_url: width: 900 }}"
                       sizes="(min-width: 1601px) calc(1600px / 2), (min-width: 768px) and (max-width: 1600px) calc(100vw / 2), (max-width: 767px) 100vw, 900px"
                       alt="{{ media.alt | escape }}"
                       width="{{ media.width }}"
                       height="{{ media.height }}"
                       data-zoom-src="{%- if media.width >= 1920 -%}{{ media | image_url: width: 1920 }}{%- elsif media.width >= 1520 -%}{{ media | image_url: width: 1520 }}{%- else -%}{{ media | image_url: width: 1220 }}{%- endif -%}"
                       loading="{{ loading }}"
                       fetchpriority="{{ fetch_priority }}"
                       data-index="{{ counter }}">

                      {% if section.settings.click_to_enlarge %}
                      <a class="js-zoom-btn product-gallery__zoom-btn no-js-hidden lg-hide" 
                         title="click to zoom-in" 
                         data-index="{{ counter }}" 
                         href="{{ media | image_url: width: 2400 }}" 
                         tabindex="-1">
                        {% render 'snip-icons',
                           wrapper: '.product-gallery__zoom-btn',
                           type: 'theme',
                           icon: 'search',
                           size: '16px',
                           classes: 'mr0',
                           fill: 'var(--directional-text)',
                           hover: 'var(--directional-text)' %}
                      </a>
                    {% endif %}

                {% when 'external_video' %}
                  <div class="product-gallery__product-video videoWrapper video-wrapper product-single__media js-video-external-wrapper">
                    {{ media | external_video_tag }}
                  </div>
                {% when 'video' %}
                  {% style %}
                    @media screen and (max-width: 320px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 360 }}) !important;
                      }
                    }
                    @media screen and (min-width: 320px) and (max-width: 780px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 900 }}) !important;
                      }
                    }
                    @media screen and (min-width: 780px) and (max-width: 1080px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 1080 }}) !important;
                      }
                    }
                    @media screen and (min-width: 1080px) {
                      .product-media--{{ media.id }} .plyr__poster {
                        background-image: url({{ media.preview_image | image_url: width: 2048 }}) !important;
                      }
                    }
                  {% endstyle %}
                  <div class="product-gallery__product-video product-single__media js-video-plyr-wrapper">
                    {{ media | video_tag: class: 'media-video', image_size: '800x' }}
                  </div>
                {% when 'model' %}
                  <div class="product-gallery__product-model product-single__media" style="padding-bottom: 100%">
                    {{ media | model_viewer_tag: image_size: '800x', reveal: 'interaction', toggleable: true, data-model-id: media.id }}
                  </div>
              {% endcase %}
            </div>
          </div>
        {% endfor %}
      </div>
      
      {% assign first_3d_model = product.media | where: "media_type", "model" | first %}
      {%- if first_3d_model -%}
        <button
          aria-label="{{ 'products.product.view_in_space_label' | t }}"
          class="media-button product-single__view-in-space"
          data-shopify-xr
          data-shopify-model3d-id="{{ first_3d_model.id }}"
          data-shopify-title="{{ product.title | escape }}"
          data-shopify-xr-hidden>
          {% render 'snip-icons',
             wrapper: '.product-single__view-in-space',
             type: 'media-icons',
             size: '25px',
             icon: '3d-icon',
             classes: 'vib-center'
             fill: 'var(--text-color)' %}
          <span class='product-single__view-in-space-text vib-center'>{{ 'products.product.view_in_space' | t }}</span>
        </button>
      {%- endif -%}
    </div>
  {% else %}
    <div class="product-images__scroll-gallery-container">
      {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}
      <span class="demo-1 ">{{ 'product-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}</span>
    </div>
  {% endif %}
  {% if section.settings.click_to_enlarge %}
    {%- style -%}
      @media (min-width: 1024px) {
        .product-images__scroll-gallery-container img:hover {
          cursor: zoom-in;
        }
      }
    {%- endstyle -%}
  {% endif %}
</div>
<script>
// Updated Product Gallery JavaScript for Fixed Layout
document.addEventListener('DOMContentLoaded', function() {
  initializeGallery();
  
  // Handle resize to reinitialize if needed
  window.addEventListener('resize', debounce(initializeGallery, 250));
});

function initializeGallery() {
  const galleryContainer = document.getElementById('scrollGalleryContainer');
  if (!galleryContainer) return;
  
  const screenWidth = window.innerWidth;
  
  if (screenWidth < 1024) {
    // Mobile/Tablet: Ensure Flickity is working
    enableFlickity(galleryContainer);
  } else {
    // Desktop: Disable Flickity for grid layout
    disableFlickity(galleryContainer);
    setupDesktopGrid(galleryContainer);
  }
}

function enableFlickity(container) {
  // Clean up any interfering inline styles first
  cleanupInlineStyles(container);
  
  // If Flickity isn't already initialized and is available
  if (window.Flickity && !container.classList.contains('flickity-enabled')) {
    const flickityInstance = new Flickity(container, {
      cellAlign: 'center',
      contain: true,
      wrapAround: true,
      autoPlay: false,
      pauseAutoPlayOnHover: true,
      prevNextButtons: true,
      pageDots: true, // Ensure dots are enabled
      dragThreshold: 10,
      selectedAttraction: 0.025,
      friction: 0.28,
      // Make height responsive to content
      adaptiveHeight: true,
      setGallerySize: true
    });
    
    // Force dynamic height calculation
    setTimeout(() => {
      ensureDotsVisible(container);
      fixImageAspectRatio(container);
      setDynamicHeight(container, flickityInstance);
    }, 100);
    
    setTimeout(() => {
      ensureDotsVisible(container);
      fixImageAspectRatio(container);
      setDynamicHeight(container, flickityInstance);
    }, 500);
    
    // Listen for Flickity ready event
    flickityInstance.on('ready', () => {
      ensureDotsVisible(container);
      fixImageAspectRatio(container);
      setDynamicHeight(container, flickityInstance);
    });
    
    // Listen for Flickity settle event (when slide changes)
    flickityInstance.on('settle', () => {
      fixImageAspectRatio(container);
      setDynamicHeight(container, flickityInstance);
    });
    
    // Listen for window resize
    window.addEventListener('resize', debounce(() => {
      setDynamicHeight(container, flickityInstance);
    }, 250));
  }
  
  // Ensure container styles for mobile
  container.style.position = 'relative';
  container.style.overflow = 'visible'; // Changed to visible for dots
}

function setDynamicHeight(container, flickityInstance) {
  if (window.innerWidth < 1024) {
    // Calculate the height based on the viewport width and square aspect ratio
    const containerWidth = container.offsetWidth;
    const targetHeight = containerWidth; // Square aspect ratio
    
    // Set the height on the viewport
    const viewport = container.querySelector('.flickity-viewport');
    if (viewport) {
      viewport.style.height = targetHeight + 'px';
    }
    
    // Remove any fixed heights from the container
    container.style.height = 'auto';
    container.style.minHeight = 'auto';
    
    // Resize Flickity to match
    if (flickityInstance && flickityInstance.resize) {
      flickityInstance.resize();
    }
    
    console.log(`Set dynamic height: ${targetHeight}px for container width: ${containerWidth}px`);
  }
}

function fixImageAspectRatio(container) {
  // Force square aspect ratio on mobile and proper fitting
  if (window.innerWidth < 1024) {
    const slides = container.querySelectorAll('.scroll--gallery_item');
    slides.forEach(slide => {
      slide.style.aspectRatio = '1 / 1'; // Square ratio
      slide.style.height = 'auto';
      slide.style.marginBottom = '0';
      slide.style.paddingBottom = '0';
      
      const img = slide.querySelector('img');
      if (img) {
        img.style.aspectRatio = '1 / 1'; // Square images
        img.style.objectFit = 'contain'; // Ensure full image is visible
        img.style.width = '100%';
        img.style.height = 'auto'; // Let aspect ratio control height
        img.style.display = 'block';
      }
    });
    
    // Remove any fixed height from container
    container.style.height = 'auto';
    container.style.minHeight = 'auto';
    container.style.overflow = 'visible'; // Allow dots to show
  }
}

function ensureDotsVisible(container) {
  // Look for dots in multiple possible locations
  const possibleDotSelectors = [
    '.flickity-page-dots',
    'ol.flickity-page-dots',
    '.js-scroll-gallery .flickity-page-dots'
  ];
  
  possibleDotSelectors.forEach(selector => {
    const dots = container.querySelector(selector) || 
                 container.parentElement.querySelector(selector) ||
                 document.querySelector(`#main-image-gallery ${selector}`);
    
    if (dots) {
      dots.style.display = 'block';
      dots.style.visibility = 'visible';
      dots.style.opacity = '1';
      dots.style.position = 'relative';
      dots.style.marginTop = '20px';
      dots.style.textAlign = 'center';
      dots.style.zIndex = '1000';
      console.log('Flickity dots found and made visible:', selector);
    }
  });
}

function disableFlickity(container) {
  // Destroy Flickity instance if it exists
  if (window.Flickity && container.classList.contains('flickity-enabled')) {
    const flickityInstance = Flickity.data(container);
    if (flickityInstance) {
      flickityInstance.destroy();
    }
  }
  
  // Reset container styles for desktop
  container.style.position = 'relative';
  container.style.overflow = 'visible';
}

function setupDesktopGrid(container) {
  // Ensure all slides are visible on desktop
  const slides = container.querySelectorAll('.scroll--gallery_item');
  slides.forEach((slide, index) => {
    slide.style.display = 'block';
    slide.style.opacity = '1';
    slide.style.position = 'relative';
    slide.style.transform = 'none';
    slide.style.left = 'auto';
    slide.style.top = 'auto';
    slide.style.height = 'auto';
    slide.style.paddingBottom = '0';
    slide.style.paddingRight = '0'; // No padding needed with CSS Grid
    slide.style.paddingLeft = '0';
    slide.style.aspectRatio = '';
    slide.style.width = '100%'; // Let CSS Grid handle sizing
    slide.style.marginBottom = index === 0 ? '0' : '0'; // Remove margin-bottom from all items
  });
}

// Clean up inline styles that interfere with mobile Flickity
function cleanupInlineStyles(container) {
  const slides = container.querySelectorAll('.scroll--gallery_item');
  slides.forEach((slide, index) => {
    // Remove inline styles that interfere with Flickity on mobile
    slide.style.paddingBottom = '';
    slide.style.paddingRight = '';
    slide.style.height = '';
    slide.style.position = '';
    slide.style.display = '';
    slide.style.opacity = '';
    slide.style.transform = '';
    slide.style.left = '';
    slide.style.top = '';
    
    // Ensure margin-bottom is removed from all items, especially first one
    slide.style.marginBottom = '0';
    
    // Set square aspect ratio for mobile
    if (window.innerWidth < 1024) {
      slide.style.aspectRatio = '1 / 1'; // Square ratio
    }
  });
  
  // Remove fixed height from container that's blocking dots
  container.style.height = 'auto';
  container.style.minHeight = 'auto';
  container.style.overflow = 'visible';
}

// Handle variant changes
function switchToImage(mediaId) {
  const targetSlide = document.querySelector(`[data-image-id="${mediaId}"]`);
  if (!targetSlide) return;
  
  // Remove selection from all slides
  document.querySelectorAll('.scroll--gallery_item').forEach(slide => {
    slide.classList.remove('is-selected');
  });
  
  // Add selection to target slide
  targetSlide.classList.add('is-selected');
  
  // If on mobile and Flickity is active, select the slide
  if (window.innerWidth < 1024) {
    const container = document.getElementById('scrollGalleryContainer');
    if (container && container.classList.contains('flickity-enabled')) {
      const flickityInstance = Flickity.data(container);
      if (flickityInstance) {
        const slideIndex = Array.from(container.querySelectorAll('.scroll--gallery_item')).indexOf(targetSlide);
        flickityInstance.select(slideIndex);
      }
    }
  }
  
  console.log(`Switched to image: ${mediaId}`);
}

// Utility function
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Export functions
window.switchToImage = switchToImage;

// Handle variant changes if you have them
document.addEventListener('variant:change', function(e) {
  if (e.detail && e.detail.variant && e.detail.variant.featured_media) {
    switchToImage(e.detail.variant.featured_media.id);
  }
});

// Additional CSS injection for guaranteed mobile 16:9 ratio
const mobileStyles = document.createElement('style');
mobileStyles.textContent = `
  @media (max-width: 1023px) {
    .product__section-images .scroll--gallery_item {
      aspect-ratio: 16 / 9 !important;
      margin-bottom: 0 !important;
      padding-bottom: 0 !important;
    }
    
    .product__section-images .scroll--gallery_item:first-of-type {
      margin-bottom: 0 !important;
      padding-bottom: 0 !important;
    }
    
    .product__section-images .scroll--gallery_item img {
      aspect-ratio: 16 / 9 !important;
      object-fit: contain !important;
      width: 100% !important;
      height: 100% !important;
    }
    
    .product__section-images .flickity-page-dots {
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
      margin-top: 15px !important;
      text-align: center !important;
    }
  }
`;
document.head.appendChild(mobileStyles);
</script>