{%- liquid
  if product.template_suffix == 'pre-order'
    assign call_to_action = 'products.product.pre_order' | t
  else
    assign call_to_action = 'products.product.add_to_cart' | t
  endif
  unless current_variant.available
    assign call_to_action = 'products.product.sold_out' | t
  endunless

  assign product_form_id = product.id | append: '-product-form-buttons-' | append: section.id

  unless no_js
    assign no_js_class = 'no-js-hidden'
  endunless

  assign classes = "js-product-form-quickshop product__form-buttons js-prod-form-submit " | append: no_js_class

  if product.gift_card?
    assign show_quantity = false
  endif
-%}


{%
  form 'product', product,
  id: product_form_id,
  class: classes,
  data-product-id: product.id
%}

  {% if show_quantity %}
  <div class="product__quantity pt2 mb2" {{ block.shopify_attributes }}>
    <label class="product__quantity-label vib-center" for="quickshop-productQty-{{ product.id }}">
      {{- 'products.product.quantity' | t -}}
    </label>
    <div class="product__quantity--selector">
      <button
        class="product__quantity-down downer js-qty-down mr1 mb0 no-js-hidden"
        href="{{ product.url }}"
        tabindex="0"
        aria-label="Decrease"
        type="button" 
      >
        {%
          render 'snip-icons',
          wrapper: '.product__quantity',
          type: 'apollo',
          icon: 'minus',
          size: '10px',
          fill: 'var(--text-color)',
          hover: 'var(--text-color)'
        %}
      </button>
      <input
        id="quickshop-productQty-{{ product.id }}"
        min="1"
        data-limit="{% if current_variant.inventory_management == 'shopify' %}{% unless current_variant.inventory_policy == 'continue' %}{{ current_variant.inventory_quantity }}{% endunless %}{% endif %}"
        type="text"
        name="quantity"
        class="product-qty product__quantity-input vib-center"
        value="1"
      >
      <button
        class="product__quantity-up js-qty-up up ml1 mb0 no-js-hidden"
        href="{{ product.url }}"
        tabindex="0"
        aria-label="Increase"
        type="button"
      >
        {%
          render 'snip-icons',
          wrapper: '.product__quantity',
          type: 'apollo',
          icon: 'plus',
          size: '10px',
          fill: 'var(--text-color)',
          hover: 'var(--text-color)'
        %}
      </button>
    </div>
  </div>
  {% else %}
    <input class="formQty" type="hidden" name="quantity" value="1">
  {% endif %}
  <div
    class="product-form__buttons product__add-container mt-4 mb-10 w-full animate--text delay--{{ index }}"
    {{ block.shopify_attributes }}
  >

    {% if block.settings.show_gift_card_recipient and product.gift_card? %}
      {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
    {%- endif -%}

    <input id="formVariantId" name="id" type="hidden" value="{{ product.selected_or_first_available_variant.id }}">

    <input
        id="product-submit-{{ product.id }}"
        type="submit"
        name="button"
        data-variant-id="{{ current_variant.id }}"
        class="button ajax-submit js-ajax-submit add-item add w100 inline-block w-full text-2xl {% if settings.product_show_payment_button or product.selling_plan_groups.size == 0 %} btn-primary{% endif %}"
        value="{{ call_to_action }}"
        {% unless current_variant.available %}
          disabled
        {% endunless %}
      >
    {% if settings.product_show_payment_button %}
      <div class="product-additional-buttons mb2">
        {{ form | payment_button }}
      </div>
    {% endif %}
  </div>
{%- endform -%}

{%- for block in section.blocks -%}
  {%- if block.type == '@app' -%}
    <!-- Infinite Options by ShopPad -->
    <script>
      // Create "window.Shoppad.apps.infiniteoptions" object if it doesn't already exist
      'Shoppad.apps.infiniteoptions'.split('.').reduce(function (o, x) {
        if (!o[x]) {
          o[x] = {};
        }
        return o[x];
      }, window);
      // Note we are using the theme app extension
      window.Shoppad.apps.infiniteoptions.themeAppExtensionId = "{{ product_form_id }}";
    </script>
    {% break %}
  {%- endif -%}
{%- endfor -%}

<style>
  /* Custom styling for success state */
  .button.ajax-submit {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .button.ajax-submit.adding-to-cart {
    background-color: #FFA500 !important; /* Orange during adding process */
    color: white !important;
  }
  
  .button.ajax-submit.added-to-cart {
    background-color: #1d4ed8 !important; /* Desired blue color */
    color: white !important;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  /* Keyframe animation for the button pulse */
  @keyframes successPulse {
    0% { opacity: 0.9; }
    50% { opacity: 1; }
    100% { opacity: 0.9; }
  }
  
  .button.ajax-submit.added-to-cart {
    animation: successPulse 0.5s ease-in-out;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get the form and submit button
    const form = document.getElementById('{{ product_form_id }}');
    if (!form) return;
    
    const submitButton = form.querySelector('.js-ajax-submit');
    if (!submitButton) return;
    
    const originalText = submitButton.value;
    const originalButtonClass = submitButton.className;
    let resetTimer; // Variable to store our timeout reference
    let isInSuccessState = false; // Flag to track if button is in success state
    
    // Configurable options
    const successDisplayDuration = 2000; // 2 seconds for both checkmark and color to be visible
    
    // Text settings - explicitly define these to ensure consistency
    const addingText = "{{ 'products.product.adding' | t }}";
    const addedText = "{{ 'products.product.added' | t }} âœ“";
    
    console.log('Form and submit button found, setting up handlers');
    
    // Create a wrapper around the button to maintain control
    const buttonWrapper = document.createElement('div');
    buttonWrapper.className = 'button-wrapper';
    submitButton.parentNode.insertBefore(buttonWrapper, submitButton);
    buttonWrapper.appendChild(submitButton);
    
    // Set up a MutationObserver to immediately detect and prevent unwanted text changes
    const buttonObserver = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
          if (isInSuccessState) {
            // If we're in success state and someone tries to change the text, force it back
            if (submitButton.value !== addedText) {
              console.log('Preventing unwanted text change during success state');
              submitButton.value = addedText;
            }
          }
        }
      });
    });
    
    buttonObserver.observe(submitButton, { attributes: true });
    
    // Function to handle the successful add-to-cart event
    function handleSuccess() {
      // Clear any existing timeouts to prevent multiple timers
      if (resetTimer) clearTimeout(resetTimer);
      
      // Set our state flag
      isInSuccessState = true;
      
      // Change button appearance with checkmark
      submitButton.value = addedText;
      submitButton.classList.remove('adding-to-cart');
      submitButton.classList.add('added-to-cart');
      
      // Set a single timeout to reset everything together
      resetTimer = setTimeout(function() {
        // Reset both the text and the styling in the same timeout
        isInSuccessState = false;
        submitButton.value = originalText;
        submitButton.classList.remove('added-to-cart');
      }, successDisplayDuration);
    }
    
    // Handle form submission - capture original ajax submit event
    form.addEventListener('submit', function(e) {
      console.log('Form submitted');
      isInSuccessState = false; // Reset state
      submitButton.value = addingText;
      submitButton.classList.add('adding-to-cart');
    });
    
    // Method 1: Listen for Events' custom event system
    if (typeof Events !== 'undefined') {
      Events.on('ajaxProduct:added', function(event) {
        console.log('ajaxProduct:added event detected via Events system');
        handleSuccess();
      });
    }
    
    // Method 2: Create a MutationObserver to watch the cart count or the mini-cart
    const cartBubble = document.querySelector('.cart-count-bubble');
    const miniCart = document.querySelector('.mini-cart');
    
    if (cartBubble || miniCart) {
      const targetNode = cartBubble || miniCart;
      const observer = new MutationObserver(function(mutations) {
        console.log('Cart element mutation detected');
        
        if (submitButton.classList.contains('adding-to-cart')) {
          handleSuccess();
        }
      });
      
      observer.observe(targetNode, { 
        childList: true, 
        subtree: true,
        characterData: true,
        attributes: true 
      });
    }
    
    // Method 3: Listen for the standard DOM event
    document.addEventListener('ajaxProduct:added', function(event) {
      console.log('Standard DOM ajaxProduct:added event detected');
      handleSuccess();
    });
    
    // Method 4: Create a global event listener
    window.productAddedToCart = function() {
      console.log('Global productAddedToCart function called');
      if (submitButton.classList.contains('adding-to-cart')) {
        handleSuccess();
      }
    };
    
    // Forcibly reassert our button state at regular intervals during the success state
    // This will combat any scripts that might be trying to change the text
    setInterval(function() {
      if (isInSuccessState) {
        if (submitButton.value !== addedText) {
          console.log('Reasserting success state text');
          submitButton.value = addedText;
        }
        if (!submitButton.classList.contains('added-to-cart')) {
          console.log('Reasserting success state styling');
          submitButton.classList.add('added-to-cart');
        }
      }
    }, 50); // Check every 50ms
    
    // Inject the event listener for your custom event into the global scope
    const scriptEl = document.createElement('script');
    scriptEl.textContent = `
      // Add event trigger to the ajax callback
      (function() {
        const originalFetch = window.fetch;
        window.fetch = function() {
          return originalFetch.apply(this, arguments)
            .then(function(response) {
              if (response.url.includes('/cart/add') || response.url.includes('/cart/add.js')) {
                response.clone().json().then(function(data) {
                  if (data && (data.items || data.product_title)) {
                    // Try all possible event emitters
                    if (typeof Events !== 'undefined') {
                      Events.trigger('ajaxProduct:added', data);
                    }
                    
                    // Standard DOM event
                    document.dispatchEvent(new CustomEvent('ajaxProduct:added', { detail: data }));
                    
                    // Global function
                    if (typeof window.productAddedToCart === 'function') {
                      window.productAddedToCart(data);
                    }
                  }
                }).catch(function(err) {
                  console.log('Error parsing response', err);
                });
              }
              return response;
            });
        };
      })();
    `;
    document.head.appendChild(scriptEl);
  });
</script>